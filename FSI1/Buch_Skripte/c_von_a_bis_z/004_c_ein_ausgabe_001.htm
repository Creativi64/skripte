<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: C von A bis Z &ndash; 4 Formatierte Ein-/Ausgabe mit »scanf()« und »printf()«</title>
<meta name="title" content="Galileo Computing :: C von A bis Z - 4 Formatierte Ein-/Ausgabe mit »scanf()« und »printf()«">
<meta name="author" content="J&uuml;rgen Wolf ">
<meta name="publisher" content="Galileo Press 2009">
<meta name="copyright" content="Galileo Press 2009">
<meta name="Description" content="C von A bis Z - Das umfassende Handbuch &ndash; 4 Formatierte Ein-/Ausgabe mit »scanf()« und »printf()«">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href="003_c_grundlagen_002.htm">
<link rel="next" href="004_c_ein_ausgabe_002.htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opc3"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opc3"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opc3" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="000_c_vorwort_001.htm#mj764cb3fd439d3b95d1843e7c7d17f235">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="000_c_vorwort_gutachter_001.htm#mj3d41cb339c9b2fc1d6e99cdaa93c3860">Vorwort des Gutachters</a></td>
</tr>
<tr>
<td><a class="navnav" href="001_c_einstieg_in_c_001.htm#mja24d93ff97bb42dbebf4689160c45195">1 Einstieg in C</a></td>
</tr>
<tr>
<td><a class="navnav" href="002_c_das_erste_programm_001.htm#mj2604a667cc98d3fa2178751273346b91">2 Das erste Programm</a></td>
</tr>
<tr>
<td><a class="navnav" href="003_c_grundlagen_001.htm#mj7ac54ba315b94149806c1de3fc89ee7f">3 Grundlagen</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj20c131820fbfb1497afd796ee443599e">4 Formatierte Ein-/Ausgabe mit »scanf()« und »printf()«</a></td>
</tr>
<tr>
<td><a class="navnav" href="005_c_basisdatentypen_001.htm#mjeda2957449ddc812dad62b400fe57752">5 Basisdatentypen</a></td>
</tr>
<tr>
<td><a class="navnav" href="006_c_operatoren_001.htm#mjab3693b096d581607801a36ce88905fc">6 Operatoren</a></td>
</tr>
<tr>
<td><a class="navnav" href="007_c_typumwandlung_001.htm#mj5c5e497ac2ab4367fe9df0ffd218cfca">7 Typumwandlung</a></td>
</tr>
<tr>
<td><a class="navnav" href="008_c_kontrollstrukturen_001.htm#mjc7bf6f584a2fe20b4c5f6b16ba15d57d">8 Kontrollstrukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="009_c_funktionen_001.htm#mj7893101be51aa469fe52334038acd465">9 Funktionen</a></td>
</tr>
<tr>
<td><a class="navnav" href="010_c_praeprozessor_001.htm#mjacdd200a20163a4d3fa418b6cb95763e">10 Präprozessor-Direktiven</a></td>
</tr>
<tr>
<td><a class="navnav" href="011_c_arrays_001.htm#mje29de26c54a3884f7316cbbb2a073ad8">11 Arrays</a></td>
</tr>
<tr>
<td><a class="navnav" href="012_c_zeiger_001.htm#mjee28a882ef9125d2c4cc49121b2c65c1">12 Zeiger (Pointer)</a></td>
</tr>
<tr>
<td><a class="navnav" href="013_c_kommandozeilenargumente_001.htm#mjf6a9e42fa3bc25b2b1e06270e7bf8f68">13 Kommandozeilenargumente</a></td>
</tr>
<tr>
<td><a class="navnav" href="014_c_dyn_speicherverwaltung_001.htm#mj8d062301d2449b13710f1484d499cd9b">14 Dynamische Speicherverwaltung</a></td>
</tr>
<tr>
<td><a class="navnav" href="015_c_strukturen_001.htm#mj5e146ba18168113a5c645cd2d07c4ec8">15 Strukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="016_c_ein_ausgabe_funktionen_001.htm#mj136f9ac6b5b7c440aafe5010411ef011">16 Ein-/Ausgabe-Funktionen</a></td>
</tr>
<tr>
<td><a class="navnav" href="017_c_dateien_verzeichnisse_001.htm#mj9f81aea722a9edb8d0080df81eb9402c">17 Attribute von Dateien und das Arbeiten mit Verzeichnissen (nicht ANSI C)</a></td>
</tr>
<tr>
<td><a class="navnav" href="018_c_stdarg_h_001.htm#mj9d64febdc46a1375e5c4498b17154e30">18 Arbeiten mit variabel langen Argumentlisten &#8211; &lt;stdarg.h&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="019_c_zeitroutinen_001.htm#mj0a8102e96a1297bd767ac7274e069f0f">19 Zeitroutinen</a></td>
</tr>
<tr>
<td><a class="navnav" href="020_c_headerdateien_001.htm#mjf3caede8ebd504dc6b7454b297c251e8">20 Weitere Headerdateien und ihre Funktionen (ANSI C)</a></td>
</tr>
<tr>
<td><a class="navnav" href="021_c_dyn_datenstrukturen_001.htm#mja75ba2f4ab8f95e9e321d195c1e26d76">21 Dynamische Datenstrukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="022_c_algorithmen_001.htm#mj07afe6f332eab2e8168da2f69f7b31c4">22 Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="023_c_cgi_001.htm#mj6c4219b4e615fa24deaa57d5c3d04db8">23 CGI mit C</a></td>
</tr>
<tr>
<td><a class="navnav" href="024_c_mysql_001.htm#mj12dab301033f9fd856aa739270c45e08">24 MySQL und C</a></td>
</tr>
<tr>
<td><a class="navnav" href="025_c_netzwerkprogrammierung_001.htm#mja8101c6e0e4cb2e6fd8312114dad30d7">25 Netzwerkprogrammierung und Cross&ndash;Plattform-Entwicklung</a></td>
</tr>
<tr>
<td><a class="navnav" href="026_c_paralleles_rechnen_001.htm#mj710dc0ad851d57e60533f8797ff9c1e6">26 Paralleles Rechnen</a></td>
</tr>
<tr>
<td><a class="navnav" href="027_c_sicheres_programmieren_001.htm#mj13eba8f9d68ac8414bffaa3a1b24ec31">27 Sicheres Programmieren</a></td>
</tr>
<tr>
<td><a class="navnav" href="028_c_weiterfuehrendes_001.htm#mj3e65f750149ade087925f303b3871af9">28 Wie geht&#8217;s jetzt weiter?</a></td>
</tr>
<tr>
<td><a class="navnav" href="029_c_anhang_a_001.htm#mjec9bf1c5e3fe2e46047c2f9c7aa9c531">A Operatoren</a></td>
</tr>
<tr>
<td><a class="navnav" href="030_c_anhang_b_001.htm#mj803443bb6e7546011c48e6e57fbdbb64">B Die C-Standard-Bibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download.galileo-press.de/openbook/c_von_a_bis_z/galileocomputing_c_von_a_bis_z.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 10,6 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="003_c_grundlagen_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opc3" class="navnav">Galileo Computing</a> / <a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opc3" class="navnav">&lt;openbook&gt;</a> / <a href="index.htm" class="navnav"> C von A bis Z</a></div></td>
<td align="right" width="25%"><div align="right"><a href="004_c_ein_ausgabe_002.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="buchtitel">C von A bis Z</a><span class="autor"> von J&uuml;rgen Wolf </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="navnav"><img src="common/9783836214117.gif" border="0" alt="Buch: C von A bis Z" title="Buch: C von A bis Z"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2132?GPP=opc3"><span class="autor"><strong>C von A bis Z</strong><br>3., aktualisierte und erweiterte Auflage, geb., mit CD und Referenzkarte<br>1.190 S., 39,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1411-7</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="#mj20c131820fbfb1497afd796ee443599e" class="navh">4 Formatierte Ein-/Ausgabe mit »scanf()« und »printf()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mj9988ed46abbabfaf84eb71b69bea2fd8" class="navh">4.1 Formatierte Eingabe mit »scanf()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj60a0684e4544cacd09b3b2f9736f4ea8" class="navh">4.1.1 Der Adressoperator </a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjedd81d34a0ba6a6d5ea2b65efcc47322" class="navh">4.1.2 Probleme und deren Behandlung mit »scanf()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj084949d953d4845602b7382212674444" class="navh">4.1.3 Überprüfen auf das richtige Format</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj1f78adb73f46983978636c9fe266ef95" class="navh">4.1.4 Zusammenfassung zu »scanf()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="004_c_ein_ausgabe_002.htm#mjb4c4970ad14ad0f371dd4834405e406d" class="navnav">4.2 Formatierte Ausgabe mit »printf()«</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main">
<p class="anleser"><em><span class="ckursiv">Um auf den nächsten Seiten etwas mehr mit den Programmen 
machen zu können, benötigen Sie Kenntnisse in der einfacheren (hier formatierten) Ein- und Ausgabe. Die in diesem Kapitel vorgestellten Funktionen </span><span class="clisting"><span class="ckursiv">printf()</span></span><span class="ckursiv"> und </span><span class="clisting"><span class="ckursiv">scanf()</span></span><span class="ckursiv"> sind recht gut für diesen Einstieg geeignet, stellen allerdings keinesfalls das Nonplusultra in C dar. Ganz im Gegenteil: Beide Funktionen sind eher als sicherheitskritisch zu betrachten und in der Praxis mit Vorsicht zu genießen (Stichwort: »Format String Exploits«).</span></em></p><a id="mj20c131820fbfb1497afd796ee443599e" name="mj20c131820fbfb1497afd796ee443599e"></a><h1 class="t1"><span class="cfett">4</span><span class="cfett"> Formatierte Ein-/Ausgabe mit »scanf()« und »printf()«</span></h1><a id="mj9988ed46abbabfaf84eb71b69bea2fd8" name="mj9988ed46abbabfaf84eb71b69bea2fd8"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">4.1</span><span class="cfett"> Formatierte Eingabe mit »scanf()«</span>  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Hinweis</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Zuerst noch ein Hinweis für die absoluten Anfänger in der Programmiersprache C. Einiges wird Ihnen in diesem Kapitel ein wenig unklar sein. Aber wenn Sie das Buch ganz durchgelesen haben, wird sich vieles von selbst klären. Sie werden Erleuchtung finden, versprochen!</p>
</td>
</tr>
</table><br><p>Betrachten wir zunächst die Syntax dieser Funktion:</p>
<div class="listing"><pre class="prettyprint">//benötigter include für diesen Befehl
#include &lt;stdio.h&gt;

int<span class="cfett"> scanf</span>(const char * restric format, ...);</pre></div>
<p>Mit der Funktion <span class="clisting">scanf()</span> können Werte unterschiedlicher Datentypen formatiert eingelesen werden. Eingelesen wird dabei von der Standardeingabe (<span class="clisting">stdin</span>). Mit <span class="ckursiv">Standardeingabe</span> ist normalerweise die Tastatur gemeint. Hierzu ein Beispiel mit der Funktion <span class="clisting">scanf()</span>:</p>
<div class="listing"><pre class="prettyprint">/* scanf1.c */
#include &lt;stdio.h&gt;

int main (void) {
   int i;               /* ein ganzzahliger Datentyp */
   printf("Bitte geben Sie eine Zahl ein : ");
  <span class="cfett"> scanf("%d",&amp;i);</span>      /* Wartet auf die Eingabe.    */
   printf("Die Zahl, die Sie eingegeben haben, war %d\n",i);
   return 0;
}</pre></div>
<p>Wenn das Programm korrekt abläuft, wird nach einer Zahl gefragt. Jetzt gibt der Anwender eine Zahl ein und drückt <img src="common/icons/Enter.gif" align="top" title="Taste Enter" alt="Taste Enter">. Anschließend gibt das Programm die Zahl, die eingegeben wurde, auf dem Bildschirm aus und wird beendet.</p>
<div class="bildbox">
<p><a name="IDAGEUQ"></a><a onClick="OpenWin('bilder/04_001.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein04_001.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 4.1    </strong>Eine einfache Zahleneingabe mit »scanf()«</p>
<p>Bildlich können Sie sich diesen Vorgang folgendermaßen vorstellen:</p>
<div class="bildbox">
<p><a name="IDALEUQ"></a><a onClick="OpenWin('bilder/04_002.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein04_002.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 4.2    </strong>Programm-Ein-/Ausgabe mit »scanf()« und »printf()«</p>
<p><span class="clisting">scanf()</span> ist ähnlich aufgebaut wie <span class="clisting">printf()</span>. Wie bei <span class="clisting">printf()</span> werden hier zwei Klammern und zwei Hochkommata verwendet. Es wird also formatiert eingelesen. Das Formatzeichen <span class="clisting">%d</span> steht für die formatierte Eingabe einer dezimalen Zahl. Was aber bedeutet hier das Zeichen »<span class="clisting">&amp;</span>«?</p><a id="mj60a0684e4544cacd09b3b2f9736f4ea8" name="mj60a0684e4544cacd09b3b2f9736f4ea8"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">4.1.1</span><span class="cfett"> Der Adressoperator »&amp;«</span>  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Den Adressoperator »<span class="clisting">&amp;</span>« jetzt schon besser zu verstehen, kann nicht schaden. Später, wenn das Thema »Zeiger« (Pointer; siehe Kapitel 12) besprochen wird, kann dieses Vorverständnis von Nutzen sein. Sollte dieser Abschnitt Ihnen ein wenig fremd vorkommen, ist das kein Grund zur Sorge.</p>
<p>Eine Variable kann in die vier folgenden Einzelteile zerlegt werden:</p>
<ul class="gp">
<li>Datentyp</li>
</ul>
<ul class="gp">
<li>Name der Variable</li>
</ul>
<ul class="gp">
<li>Speicheradresse der Variable</li>
</ul>
<ul class="gp">
<li>Wert der Variable</li>
</ul>
<p>Im Programmbeispiel von oben heißt das konkret: Der Datentyp ist <span class="clisting">int</span>, der Name ist <span class="clisting">i</span>, und die Adresse wird während der Laufzeit zugewiesen (darauf haben Sie keinen Einfluss). Die Speicheradresse sei hier z. B. <span class="clisting">0000:123A</span>. Der Wert ist der, den Sie mit <span class="clisting">scanf()</span> noch eingeben mussten. Wurde jetzt z. B. <span class="clisting">5</span> eingegeben, ist dieser Speicherplatz wie folgt belegt:</p>
<div class="bildbox">
<p><a name="IDA2FUQ"></a><a onClick="OpenWin('bilder/04_003.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein04_003.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 4.3    </strong>Eine Variable im Speicher (vereinfacht dargestellt)</p>
<p>Das <span class="clisting">&amp;</span>-Zeichen ist nichts anderes als der Adressoperator. Dies bedeutet hier, dass der Variablen <span class="clisting">i</span> vom Typ <span class="clisting">int</span> mit der Speicheradresse <span class="clisting">0000:123A</span> der Wert <span class="clisting">5</span> zugewiesen wird. Oder einfacher: Verschicken Sie eine E-Mail an jemanden, ohne die E-Mail-Adresse anzugeben?</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Hinweis</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Die Attribute einer Variable wurden hier nur vereinfacht dargestellt. Neben den hier erwähnten Attributen gibt es noch das <span class="ckursiv">Zugriffsrecht</span>, den <span class="ckursiv">Gültigkeitsbereich</span> und die <span class="ckursiv">Lebensdauer</span> einer Variablen. Aber darauf gehe ich erst später in Kapitel 9 ein.</p>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Achtung</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Ein Fehler, den Anfänger häufig machen, ist das Weglassen des Adressoperators <span class="clisting">&amp;</span>.</p>
</td>
</tr>
</table><br><p>Was beim Einlesen einer Zeichenkette richtig ist, ist bei anderen Datentypen wie Ganz- oder Gleitpunktzahlen wieder falsch:</p>
<div class="listing"><pre class="prettyprint">/* FALSCH, da Adressoperator &amp; fehlt */
scanf("%d", zahl);

/*
   Richtig, denn eine Zeichenkette benötigt keinen Adressoperator.
*/
scanf("%s", string);</pre></div>
<p>Auch wenn <span class="clisting">scanf()</span> das Gegenstück zu <span class="clisting">printf()</span> ist und sich beide in ihrer Schreibweise ähneln, sollten Sie nicht auf die Idee kommen, Folgendes zu schreiben:</p>
<div class="listing"><pre class="prettyprint">/* FALSCH */
scanf("Bitte geben Sie eine Zahl ein: %d\n", &amp;zahl);</pre></div>
<p>Das funktioniert deshalb nicht, weil <span class="clisting">scanf()</span> für die Standard<span class="ckursiv">ein</span>gabe programmiert ist und <span class="clisting">printf()</span> für die Standard<span class="ckursiv">aus</span>gabe. Wobei die Standardausgabe auf der Kommandozeile auch umgeleitet werden kann.</p><a id="mjedd81d34a0ba6a6d5ea2b65efcc47322" name="mjedd81d34a0ba6a6d5ea2b65efcc47322"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">4.1.2</span><span class="cfett"> Probleme und deren Behandlung mit »scanf()«</span>  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Ein häufiges Problem, das auftritt, wenn Sie <span class="clisting">scanf()</span> für die Eingabe verwenden, ist die Pufferung. Diese ist je nach System und Anwendung zeilen- oder vollgepuffert. Dies gilt wiederum nicht für die Standardfehlerausgabe (<span class="clisting">stderr</span>), die laut ANSI C niemals vollgepuffert sein darf. Bevor ich weiter erkläre, sollten Sie folgendes Programm testen:</p>
<div class="listing"><pre class="prettyprint">/* scanf2.c */
#include &lt;stdio.h&gt;

int main(void) {
   char a,b,c;
   printf("1. Buchstabe : ");
   scanf("%c",&amp;a);
   printf("2. Buchstabe : ");
   scanf("%c",&amp;b);
   printf("3. Buchstabe : ");
   scanf("%c",&amp;c);
   printf("Sie gaben ein : %c %c %c ",a,b,c);
   return 0;
}</pre></div>
<p>Folgendes könnte nun vom Programm auf den Bildschirm ausgegeben werden:</p>
<div class="bildbox">
<p><a name="IDA0RUQ"></a><a onClick="OpenWin('bilder/04_004.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein04_004.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 4.4    </strong>Ein mögliches Problem mit »scanf()« unter Linux</p>
<p>Was ist hier passiert? Warum wird der zweite Buchstabe immer übersprungen? Wie gesagt, das Problem ist hier die Pufferung. Und in C gibt es keinen Befehl (wie etwa <span class="clisting">chomp</span> bei Perl), um das letzte Zeichen zu entfernen.</p>
<p>In diesem Beispiel wurde als erster Buchstabe »a« eingegeben und <img src="common/icons/Enter.gif" align="top" title="Taste Enter" alt="Taste Enter"> gedrückt. Dieses <img src="common/icons/Enter.gif" align="top" title="Taste Enter" alt="Taste Enter"> (ASCII-Code = 10 = <span class="clisting">\n</span> = <span class="ckursiv">newline</span>) befindet sich immer noch im Puffer der Standardeingabe und wird automatisch für das zweite Zeichen verwendet. Was können Sie dagegen tun? Hier gibt es ein paar Möglichkeiten, die allerdings auch systemabhängig sind:</p>
<h4 class="t4"><span class="cfett">Möglichkeit 1</span></h4>
<p>Sie benutzen die Funktion <span class="clisting">fflush()</span> zum Entleeren des Tastaturpuffers. Möglicherweise gelingt dies nicht auf jedem Betriebssystem (speziell nicht unter Linux):</p>
<div class="listing"><pre class="prettyprint">/* scanf3.c */
#include &lt;stdio.h&gt;

int main(void) {
   char a,b,c;
   printf("1. Buchstabe : ");
   scanf("%c",&amp;a);
  <span class="cfett"> fflush(stdin);</span>
   printf("2. Buchstabe : ");
   scanf("%c",&amp;b);
  <span class="cfett"> fflush(stdin);</span>
   printf("3. Buchstabe : ");
   scanf("%c",&amp;c);
   printf("Sie gaben ein : %c %c %c ",a,b,c);
   return 0;
}</pre></div>
<h4 class="t4"><span class="cfett">Möglichkeit 2</span></h4>
<p>Sie benutzen eine <span class="clisting">do while</span>-Schleife und <span class="ckursiv">ziehen</span> das Newline-Zeichen aus dem Puffer heraus:</p>
<div class="listing"><pre class="prettyprint">/* scanf4.c */
#include &lt;stdio.h&gt;

int main(void) {
   char a, b, c;
   printf("1. Buchstabe : ");
  <span class="cfett"> do {</span>scanf("%c",&amp;a);<span class="cfett">} while ( getchar() != '\n' );</span>
   printf("2. Buchstabe : ");
  <span class="cfett"> do {</span>scanf("%c",&amp;b);<span class="cfett">} while ( getchar() != '\n' );</span>
   printf("3. Buchstabe : ");
  <span class="cfett"> do {</span>scanf("%c",&amp;c);<span class="cfett">} while ( getchar() != '\n' );</span>
   printf("%c %c %c\n", a, b, c);
   return 0;
}</pre></div>
<p>Mehr zur <span class="clisting">do while</span>-Schleife finden Sie in Abschnitt 8.9.</p>
<h4 class="t4"><span class="cfett">Möglichkeit 3</span></h4>
<p>Sie verwenden <span class="clisting">scanf()</span> erst gar nicht (wie dies in der Praxis aus Sicherheitsgründen zu empfehlen ist) und greifen auf eine der vielen anderen Standardeingabe-Funktionen zurück. Ideal wäre es beispielsweise, die Funktion <span class="clisting">fgets()</span> zum Einlesen zu verwenden und diese Eingabe mit der Funktion <span class="clisting">sscanf()</span> in ein entsprechendes Format zu konvertieren (siehe auch Abschnitt 16.23). Ein entsprechendes Beispiel könnte so aussehen:</p>
<div class="listing"><pre class="prettyprint">/* scanf5.c */
#include &lt;stdio.h&gt;

int main(void) {
   char ch;
   char buf[2];

   printf("Ein Zeichen bitte : ");
   fgets(buf, 2, stdin);
   sscanf(buf, "%c", &amp;ch);
   printf("Das Zeichen : %c\n",ch);
   return 0;
}</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Hinweis</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">In diesem Buch wird noch des Öfteren die Funktion <span class="clisting">scanf()</span> verwendet. Falls etwas nicht so funktioniert, wie es sollte, beziehen Sie sich auf die drei gezeigten Möglichkeiten in diesem Kapitel.</p>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Achtung</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Die Funktion <span class="clisting">scanf()</span> ist nicht gegen einen Pufferüberlauf (<span class="ckursiv">Buffer-Overflow</span>) geschützt und somit unsicher, d.  h., sie könnte für einen Hack des Programms durch eine andere Person missbraucht werden. Damit ist gemeint, dass die Funktion nicht die Anzahl der eingegebenen Zeichen überprüft und es damit zu Fehlern kommen kann bzw. ein Fehlverhalten von außen provoziert werden kann. Abgesehen davon ist <span class="clisting">scanf()</span> (und auch <span class="clisting">printf()</span>) ein guter Kanidat für <span class="ckursiv">Format String Exploits</span>. Viele Compiler monieren <span class="clisting">scanf()</span> auch als unsichere Funktion. Der Compiler von Microsoft VC++ z. B. rät, stattdessen die Funktion <span class="clisting">scanf_f()</span>zu verwenden. Beachten Sie hierbei allerdings, das <span class="clisting">scanf_f()</span> keine Standard-C-Funktion und somit auch nicht portabel ist.</p>
</td>
</tr>
</table><br><a id="mj084949d953d4845602b7382212674444" name="mj084949d953d4845602b7382212674444"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">4.1.3</span><span class="cfett"> Überprüfen auf das richtige Format</span>  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Um sicherzugehen, dass der Benutzer auch das Richtige eingegeben hat, können (müssen) Sie den Rückgabewert von <span class="clisting">scanf()</span> überprüfen:</p>
<div class="listing"><pre class="prettyprint">/* scanf6.c */
#include &lt;stdio.h&gt;

int main(void) {
   char a;
   int b, check;

   printf("Bitte Eingabe machen (Zeichen/Zahl): ");
   check = scanf("%c %d",&amp;a, &amp;b);
   printf("check = %d \n",check);
   return 0;
}</pre></div>
<p>Der Rückgabewert von <span class="clisting">scanf()</span> ist dabei immer die Anzahl der erfolgreich gelesenen Werte. Der Wert 0 hingegen wird zurückgegeben, wenn es zu keiner Übereinstimmung mit dem geforderten Formatzeichen gekommen ist. In diesem Beispiel erwartet <span class="clisting">scanf()</span> die Eingabe eines Zeichens (<span class="clisting">%c</span>) und einer Dezimalzahl (<span class="clisting">%d</span>). Wenn beide Eingaben richtig gemacht wurden, sollte die folgende <span class="clisting">printf()</span>-Anweisung den Wert »2« ausgeben.</p>
<p>Mit einer kleinen Überprüfung können Sie das Programm verbessern, um ein undefiniertes Verhalten für die Weiterarbeit zu verhindern:</p>
<div class="listing"><pre class="prettyprint">/* scanf7.c */
#include &lt;stdio.h&gt;

int main(void) {
   int a, b, check;

   printf("Bitte zwei Zahlen eingeben: ");
   check = scanf("%d %d",&amp;a ,&amp;b);
   fflush(stdin);  /* unter Linux entfernen */
   //getchar();    /* für Linux             */
   /* Ist check gleich 2, war die Eingabe richtig. */
   if(check == 2)
      printf("Beide Zahlen richtig %d und %d\n",a ,b);
   /* ... nicht richtig, also war die 2. Zahl falsch. */
   else if(check == 1) {
         printf("Die 2.Zahl hat das falsche Format!!\n");
         printf("Bitte Eingabe wiederholen: ");
         /* noch ein Versuch */
         check = scanf("%d",&amp;b);
         fflush(stdin);
         if(check)
            printf("Eingabe Ok. Ihre Zahlen %d %d\n",a,b);
         else
            printf("Leider nochmals falsch\n");
      }
   else
      printf("Die erste oder beide Eingaben waren falsch!\n" );
   return 0;
}</pre></div>
<p>Bei fehlerfreier Ausführung liefert die <span class="clisting">scanf()</span>-Funktion die Anzahl der Zeichen zurück, die erfolgreich gelesen, konvertiert und gespeichert wurden.</p>
<p>Wenn die erste Eingabe von <span class="clisting">scanf()</span> im Beispiel schon fehlerhaft ist, wird die zweite Eingabe gar nicht mehr beachtet. Daher gibt <span class="clisting">scanf()</span> dann <span class="clisting">0</span> zurück, da gar keine Zeichen gespeichert werden konnten.</p>
<div class="bildbox">
<p><a name="IDAR1UQ"></a><a onClick="OpenWin('bilder/04_005.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein04_005.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 4.5    </strong>Die Überprüfung des Rückgabewertes von »scanf()«</p><a id="mj1f78adb73f46983978636c9fe266ef95" name="mj1f78adb73f46983978636c9fe266ef95"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">4.1.4</span><span class="cfett"> Zusammenfassung zu »scanf()«</span>  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Funktion <span class="clisting">scanf()</span> liest zeichenweise eine Folge von Eingabefeldern ein. Für jedes Eingabefeld muss eine Adresse vorhanden sein, wobei das Eingabefeld mit dem Datentyp der Adresse übereinstimmen muss. Bei Erfolg liefert <span class="clisting">scanf()</span> die Anzahl der erfolgreich eingelesenen Felder zurück. Konnten keine Felder korrekt eingelesen werden, gibt <span class="clisting">scanf()</span> als Rückgabewert <span class="clisting">0</span> zurück. Für den Fall, dass bei der Eingabe schon ein Fehler auftrat, bevor die Daten überhaupt gelesen werden konnten, wird <span class="clisting">EOF</span> zurückgegeben.</p>
<p>Folgende Zeichen werden bei <span class="clisting">scanf()</span> als Eingabefelder akzeptiert:</p>
<ul class="gp">
<li>alle Zeichen bis zum nächsten Whitespace</li>
</ul>
<ul class="gp">
<li>alle Zeichen bis zu einer bestimmten Feldbreite von n</li>
</ul>
<ul class="gp">
<li>alle Zeichen bis zu dem ersten Zeichen, das nicht mehr in ein entsprechendes Format konvertiert werden konnte</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Whitespace</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Ein <span class="ckursiv">Whitespace</span> ist ein Leerzeichen, ein Tabulator oder eine Zeilenschaltung.</p>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Anmerkung für den Anfänger</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Nochmals eine Anmerkung für die absoluten Neulinge in C: Sie wurden in diesem Kapitel teilweise mit Begriffen wie <span class="ckursiv">Variablen, Datentypen, Format, Formatanweisungen, Feldbreite</span> usw. bombardiert, mit denen Sie zum größten Teil wohl noch nichts anfangen können. Den Großteil dieser Begriffe werden Sie aber auf den nächsten Seiten noch genauer kennenlernen. Ich habe die Aufteilung der einzelnen Themen bewusst in dieser Form vorgenommen. Wenn Sie dieses Buch durchgearbeitet haben, werden Sie kein Anfänger mehr sein und hin und wieder das eine oder andere Thema nachschlagen wollen. Dann wird es Ihnen leichter fallen, Informationen zur Funktion <span class="clisting">scanf()</span> kompakt in ein oder zwei Kapiteln zu finden, anstatt im ganzen Buch verstreut danach suchen zu müssen.</p>
</td>
</tr>
</table><br><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="http://openbook.galileocomputing.de/c_von_a_bis_z/004_c_ein_ausgabe_001.htm"><input type="hidden" name="buchtitel" value="C von A bis Z"><input type="hidden" name="Kapitel" value="4 Formatierte Ein-/Ausgabe mit »scanf()« und »printf()«"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="003_c_grundlagen_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="004_c_ein_ausgabe_002.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">&nbsp;&nbsp;</td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/?GPP=opc3" class="nav">
<strong>Zum Katalog</strong></a>
</td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2132?GPP=opc3">
<img src="common/9783836214117_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C von A bis Z" title="Zum Katalog: C von A bis Z">
<br /><br /><strong>&nbsp;C von A bis Z</strong><br /><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt&nbsp;bestellen</a><br /><br />
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2"><a href="#kommentar" class="nav"><strong>&nbsp;Ihre Meinung?</strong></a>
</td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br /><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br /><br /></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/?GPP=opc3" class="nav"><strong>Buchtipps</strong></a></td>
</tr>
<tr> 
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2083?GPP=opc3">
<img src="common/9783836213851_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in C++" title="Zum Katalog: Einstieg in C++"><br /><br /><br /><br /><br /><br /><br />&nbsp;Einstieg in C++</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opc3">
<img src="common/9783836214292_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br /><br /><br /><br /><br /><br /><br />&nbsp;C++ von A bis Z</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1299?GPP=opc3">
<img src="common/9783898428392_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C/C++" title="Zum Katalog: C/C++"><br /><br /><br /><br /><br /><br /><br />&nbsp;C/C++</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1712?GPP=opc3">
<img src="common/9783836211574_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Shell-Programmierung" title="Zum Katalog: Shell-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Shell-Programmierung</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2049?GPP=opc3">
<img src="common/9783836213660_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Linux-UNIX-Programmierung" title="Zum Katalog: Linux-UNIX-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Linux-UNIX-<br />&nbsp;Programmierung</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2138?GPP=opc3">
<img src="common/9783836214209_s.gif" width="107" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: IT-Handbuch für Fachinformatiker" title="Zum Katalog: IT-Handbuch für Fachinformatiker"><br /><br /><br /><br /><br /><br /><br />&nbsp;IT-Handbuch für <br />&nbsp;Fachinformatiker</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2165?GPP=opc3">
<img src="common/9783836214391_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Ubuntu GNU/Linux" title="Zum Katalog: Ubuntu GNU/Linux"><br /><br /><br /><br /><br /><br /><br />&nbsp;Ubuntu GNU/Linux</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1628?GPP=opc3">
<img src="common/9783836211161_s.gif" width="117" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Coding for Fun" title="Zum Katalog: Coding for Fun"><br /><br /><br /><br /><br /><br /><br /><br />&nbsp;Coding for Fun&nbsp;</a><br /><br /></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2"><strong>&nbsp;Shopping</strong></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br /><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opc3"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br /><br /></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2009</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
