<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: C von A bis Z &ndash; 17 Attribute von Dateien und das Arbeiten mit Verzeichnissen (nicht ANSI C)</title>
<meta name="title" content="Galileo Computing :: C von A bis Z - 17 Attribute von Dateien und das Arbeiten mit Verzeichnissen (nicht ANSI C)">
<meta name="author" content="J&uuml;rgen Wolf ">
<meta name="publisher" content="Galileo Press 2009">
<meta name="copyright" content="Galileo Press 2009">
<meta name="Description" content="C von A bis Z - Das umfassende Handbuch &ndash; 17 Attribute von Dateien und das Arbeiten mit Verzeichnissen (nicht ANSI C)">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href="016_c_ein_ausgabe_funktionen_026.htm">
<link rel="next" href="017_c_dateien_verzeichnisse_002.htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opc3"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opc3"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opc3" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="000_c_vorwort_001.htm#mj764cb3fd439d3b95d1843e7c7d17f235">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="000_c_vorwort_gutachter_001.htm#mj3d41cb339c9b2fc1d6e99cdaa93c3860">Vorwort des Gutachters</a></td>
</tr>
<tr>
<td><a class="navnav" href="001_c_einstieg_in_c_001.htm#mja24d93ff97bb42dbebf4689160c45195">1 Einstieg in C</a></td>
</tr>
<tr>
<td><a class="navnav" href="002_c_das_erste_programm_001.htm#mj2604a667cc98d3fa2178751273346b91">2 Das erste Programm</a></td>
</tr>
<tr>
<td><a class="navnav" href="003_c_grundlagen_001.htm#mj7ac54ba315b94149806c1de3fc89ee7f">3 Grundlagen</a></td>
</tr>
<tr>
<td><a class="navnav" href="004_c_ein_ausgabe_001.htm#mj20c131820fbfb1497afd796ee443599e">4 Formatierte Ein-/Ausgabe mit »scanf()« und »printf()«</a></td>
</tr>
<tr>
<td><a class="navnav" href="005_c_basisdatentypen_001.htm#mjeda2957449ddc812dad62b400fe57752">5 Basisdatentypen</a></td>
</tr>
<tr>
<td><a class="navnav" href="006_c_operatoren_001.htm#mjab3693b096d581607801a36ce88905fc">6 Operatoren</a></td>
</tr>
<tr>
<td><a class="navnav" href="007_c_typumwandlung_001.htm#mj5c5e497ac2ab4367fe9df0ffd218cfca">7 Typumwandlung</a></td>
</tr>
<tr>
<td><a class="navnav" href="008_c_kontrollstrukturen_001.htm#mjc7bf6f584a2fe20b4c5f6b16ba15d57d">8 Kontrollstrukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="009_c_funktionen_001.htm#mj7893101be51aa469fe52334038acd465">9 Funktionen</a></td>
</tr>
<tr>
<td><a class="navnav" href="010_c_praeprozessor_001.htm#mjacdd200a20163a4d3fa418b6cb95763e">10 Präprozessor-Direktiven</a></td>
</tr>
<tr>
<td><a class="navnav" href="011_c_arrays_001.htm#mje29de26c54a3884f7316cbbb2a073ad8">11 Arrays</a></td>
</tr>
<tr>
<td><a class="navnav" href="012_c_zeiger_001.htm#mjee28a882ef9125d2c4cc49121b2c65c1">12 Zeiger (Pointer)</a></td>
</tr>
<tr>
<td><a class="navnav" href="013_c_kommandozeilenargumente_001.htm#mjf6a9e42fa3bc25b2b1e06270e7bf8f68">13 Kommandozeilenargumente</a></td>
</tr>
<tr>
<td><a class="navnav" href="014_c_dyn_speicherverwaltung_001.htm#mj8d062301d2449b13710f1484d499cd9b">14 Dynamische Speicherverwaltung</a></td>
</tr>
<tr>
<td><a class="navnav" href="015_c_strukturen_001.htm#mj5e146ba18168113a5c645cd2d07c4ec8">15 Strukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="016_c_ein_ausgabe_funktionen_001.htm#mj136f9ac6b5b7c440aafe5010411ef011">16 Ein-/Ausgabe-Funktionen</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj9f81aea722a9edb8d0080df81eb9402c">17 Attribute von Dateien und das Arbeiten mit Verzeichnissen (nicht ANSI C)</a></td>
</tr>
<tr>
<td><a class="navnav" href="018_c_stdarg_h_001.htm#mj9d64febdc46a1375e5c4498b17154e30">18 Arbeiten mit variabel langen Argumentlisten &#8211; &lt;stdarg.h&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="019_c_zeitroutinen_001.htm#mj0a8102e96a1297bd767ac7274e069f0f">19 Zeitroutinen</a></td>
</tr>
<tr>
<td><a class="navnav" href="020_c_headerdateien_001.htm#mjf3caede8ebd504dc6b7454b297c251e8">20 Weitere Headerdateien und ihre Funktionen (ANSI C)</a></td>
</tr>
<tr>
<td><a class="navnav" href="021_c_dyn_datenstrukturen_001.htm#mja75ba2f4ab8f95e9e321d195c1e26d76">21 Dynamische Datenstrukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="022_c_algorithmen_001.htm#mj07afe6f332eab2e8168da2f69f7b31c4">22 Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="023_c_cgi_001.htm#mj6c4219b4e615fa24deaa57d5c3d04db8">23 CGI mit C</a></td>
</tr>
<tr>
<td><a class="navnav" href="024_c_mysql_001.htm#mj12dab301033f9fd856aa739270c45e08">24 MySQL und C</a></td>
</tr>
<tr>
<td><a class="navnav" href="025_c_netzwerkprogrammierung_001.htm#mja8101c6e0e4cb2e6fd8312114dad30d7">25 Netzwerkprogrammierung und Cross&ndash;Plattform-Entwicklung</a></td>
</tr>
<tr>
<td><a class="navnav" href="026_c_paralleles_rechnen_001.htm#mj710dc0ad851d57e60533f8797ff9c1e6">26 Paralleles Rechnen</a></td>
</tr>
<tr>
<td><a class="navnav" href="027_c_sicheres_programmieren_001.htm#mj13eba8f9d68ac8414bffaa3a1b24ec31">27 Sicheres Programmieren</a></td>
</tr>
<tr>
<td><a class="navnav" href="028_c_weiterfuehrendes_001.htm#mj3e65f750149ade087925f303b3871af9">28 Wie geht&#8217;s jetzt weiter?</a></td>
</tr>
<tr>
<td><a class="navnav" href="029_c_anhang_a_001.htm#mjec9bf1c5e3fe2e46047c2f9c7aa9c531">A Operatoren</a></td>
</tr>
<tr>
<td><a class="navnav" href="030_c_anhang_b_001.htm#mj803443bb6e7546011c48e6e57fbdbb64">B Die C-Standard-Bibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download.galileo-press.de/openbook/c_von_a_bis_z/galileocomputing_c_von_a_bis_z.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 10,6 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="016_c_ein_ausgabe_funktionen_026.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opc3" class="navnav">Galileo Computing</a> / <a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opc3" class="navnav">&lt;openbook&gt;</a> / <a href="index.htm" class="navnav"> C von A bis Z</a></div></td>
<td align="right" width="25%"><div align="right"><a href="017_c_dateien_verzeichnisse_002.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="buchtitel">C von A bis Z</a><span class="autor"> von J&uuml;rgen Wolf </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="navnav"><img src="common/9783836214117.gif" border="0" alt="Buch: C von A bis Z" title="Buch: C von A bis Z"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2132?GPP=opc3"><span class="autor"><strong>C von A bis Z</strong><br>3., aktualisierte und erweiterte Auflage, geb., mit CD und Referenzkarte<br>1.190 S., 39,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1411-7</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="#mj9f81aea722a9edb8d0080df81eb9402c" class="navh">17 Attribute von Dateien und das Arbeiten mit Verzeichnissen (nicht ANSI C)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjdce8721b710bdcb73a183a6861554eff" class="navh">17.1 Attribute einer Datei ermitteln &#8211; »stat()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj5d3a6760640b035d4c82d67c5fa40d05" class="navh">17.1.1 »stat()« &#8211; »st_mode«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjfa96859cf23f01558e382594661bdbe0" class="navh">17.1.2 »stat()« &#8211; »st_size«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjfc20e82dbd79f9a349df3d5e66258b3e" class="navh">17.1.3 »stat()« &#8211; »st_atime«, »st_mtime« und »st_ctime«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj8384f1dc9ba3069a09dd846cfea507c3" class="navh">17.1.4 »stat()« &#8211; »st_gid« und »st_uid«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mja6dac40bbc1506b1e02baf619838ffb3" class="navh">17.1.5 »stat()« &#8211; »st_nlink«, »st_ino«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjc3760fa109b9837b23fb25544bb53b07" class="navh">17.1.6 »stat()« &#8211; »st_dev«, »st_rdev«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="017_c_dateien_verzeichnisse_002.htm#mj391fcba8692b6c16acc47fbe1a03a818" class="navnav">17.2 Prüfen des Zugriffsrechts &#8211; »access()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="017_c_dateien_verzeichnisse_003.htm#mjd1acf37cfe2d9ca41a30b369589d112f" class="navnav">17.3 Verzeichnisfunktionen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="017_c_dateien_verzeichnisse_003.htm#mj1b339621fd0d872343888bdc1219c470" class="navnav">17.3.1 Verzeichnis erstellen, löschen und wechseln &#8211; »mkdir()«, »rmdir« und »chdir«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="017_c_dateien_verzeichnisse_003.htm#mj30679887ecf4b9ece2f56be87e77f1d5" class="navnav">17.3.2 In das Arbeitsverzeichnis wechseln &#8211; »getcwd()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="017_c_dateien_verzeichnisse_003.htm#mjc31cd7e93db31d7407d32cd062032c36" class="navnav">17.3.3 Verzeichnisse öffnen, lesen und schließen &#8211; »opendir()«, »readdir()« und »closedir()«</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main">
<p class="anleser"><em><span class="ckursiv">Das Ermitteln der Eigenschaften einer Datei oder das Öffnen und Auslesen eines Verzeichnisses sind systemabhängig. Denn jedes Betriebssystem verwaltet Dateien und Verzeichnisse auf andere Art. Daher wird in Büchern oft auf dieses Thema verzichtet. In diesem Kapitel versuche ich, es so universell wie möglich zu behandeln.</span></em></p><a id="mj9f81aea722a9edb8d0080df81eb9402c" name="mj9f81aea722a9edb8d0080df81eb9402c"></a><h1 class="t1"><span class="cfett">17</span><span class="cfett"> Attribute von Dateien und das Arbeiten mit Verzeichnissen (nicht ANSI C)</span></h1><a id="mjdce8721b710bdcb73a183a6861554eff" name="mjdce8721b710bdcb73a183a6861554eff"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">17.1</span><span class="cfett"> Attribute einer Datei ermitteln &#8211; »stat()«</span>  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Der Funktion <span class="clisting">stat()</span> wird die Adresse der Struktur <span class="clisting">struct stat</span> übergeben. Aus dieser Struktur können die Attribute der Datei ausgelesen werden. Die Syntax dazu lautet:</p>
<div class="listing"><pre class="prettyprint">#include &lt;sys/stat.h&gt;    /* LINUX/UNIX     */
#include &lt;sys/types.h&gt;   /* LINUX/UNIX     */
#include &lt;sys\stat.h&gt;    /* MS-DOS/WINDOWS */

int stat(const char *pfad, struct stat *puffer);</pre></div>
<p>Mit <span class="clisting">stat()</span> werden somit die Attribute der Datei, die Sie mit <span class="clisting">pfad</span> angeben, in die Adresse der Strukturvariablen <span class="clisting">puffer</span> geschrieben. Ein Beispiel:</p>
<div class="listing"><pre class="prettyprint">struct stat attribut;
stat("testprogramm.txt", &amp;attribut);
...
if(attribut.st_mode &amp; S_IFCHR)
   printf("Datei ist eine Gerätedatei");</pre></div>
<p>Hiermit wird getestet, ob die Datei <span class="ckursiv">testprogramm.txt</span> eine Gerätedatei ist.</p>
<p>Es folgt eine Auflistung der einzelnen Variablen der Struktur <span class="clisting">struct stat</span>, in der sich die jeweiligen Attribute zu einer Datei befinden. Dabei ist wiederum anzumerken, dass es Unterschiede zwischen Linux/UNIX und MS-DOS/Windows gibt. Tabelle 17.1 enthält die einzelnen Elemente der Struktur <span class="clisting">stat</span>.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 17.1    </strong>Bedeutung der einzelnen Strukturvariablen in »stat( )«</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Variable</span>
</td>
<td class="tabellenkopf"><span class="cfett">Bedeutung</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">st_dev</pre></div>
</td>
<td class="tabellentext">
<p>Gerätenummer (Device-Nummer) des Dateisystems</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">st_ino</pre></div>
</td>
<td class="tabellentext">
<p>Inode-Nummer (nur Linux)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">st_mode</pre></div>
</td>
<td class="tabellentext">
<p>Dateimodus (Dateityp und Zugriffsrechte)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">st_nlink</pre></div>
</td>
<td class="tabellentext">
<p>Anzahl fester Links auf die Datei (bei MS-DOS/Windows immer 1)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">st_uid</pre></div>
</td>
<td class="tabellentext">
<p>numerische UID des Dateieigentümers</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">st_gid</pre></div>
</td>
<td class="tabellentext">
<p>numerische GID des Dateieigentümers</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">st_rdev</pre></div>
</td>
<td class="tabellentext">
<p>Geräte-ID (nur für Spezialdateien; bei MS-DOS/Windows  <span class="clisting">st_dev</span>)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">st_size</pre></div>
</td>
<td class="tabellentext">
<p>Größe der Datei in Bytes</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">st_atime</pre></div>
</td>
<td class="tabellentext">
<p>Datum des letzten Zugriffs</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">st_mtime</pre></div>
</td>
<td class="tabellentext">
<p>Datum der letzten Veränderung (bei MS-DOS/Windows  <span class="clisting">st_atime</span>)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">st_ctime</pre></div>
</td>
<td class="tabellentext">
<p>Datum der Inode-Änderung (bei MS-DOS/Windows <span class="clisting">st_atime</span>)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">st_blksize</pre></div>
</td>
<td class="tabellentext">
<p>eingestellte Blockgröße (nicht überall vorhanden)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">st_blocks</pre></div>
</td>
<td class="tabellentext">
<p>Anzahl der verwendeten <span class="clisting">st_blksize</span>-Blöcke (nicht überall vorhanden)</p>
</td>
</tr>
</table><br><a id="mj5d3a6760640b035d4c82d67c5fa40d05" name="mj5d3a6760640b035d4c82d67c5fa40d05"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">17.1.1</span><span class="cfett"> »stat()« &#8211; »st_mode«</span>  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Mit dem Strukturelement <span class="clisting">short st_mode</span> in der Struktur <span class="clisting">stat</span> können Sie die Dateiart erfragen. Dazu verknüpfen Sie den bitweisen UND-Operator (<span class="clisting">&amp;</span>) und den in <span class="clisting">st_mode</span> gespeicherten Wert mit einer der Konstanten aus Tabelle 17.2.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 17.2    </strong>Dateimodus (Dateityp erfragen)</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Konstante</span>
</td>
<td class="tabellenkopf"><span class="cfett">Bedeutung</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_IFREG</pre></div>
</td>
<td class="tabellentext">
<p>reguläre Datei</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_IFDIR</pre></div>
</td>
<td class="tabellentext">
<p>Verzeichnis</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_IFCHR</pre></div>
</td>
<td class="tabellentext">
<p>zeichenorientierte Gerätedatei</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_ISBLK</pre></div>
</td>
<td class="tabellentext">
<p>blockorientierte Gerätedatei</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_ISFIFO</pre></div>
</td>
<td class="tabellentext">
<p>FIFO  (benannte Pipe)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_ISLINK</pre></div>
</td>
<td class="tabellentext">
<p>symbolischer Link (nicht bei POSIX.1 oder SVR4)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_ISSOCK</pre></div>
</td>
<td class="tabellentext">
<p>Socket (nicht bei POSIX.1 oder SVR4)</p>
</td>
</tr>
</table><br><p>POSIX schreibt diese Konstanten allerdings nicht vor. Bei Linux/UNIX-Systemen könnten diese Konstanten auch als entsprechende Makros in der Headerdatei <span class="ckursiv">&lt;sys/stat.h&gt;</span> implementiert sein. Der Makroname entspricht dabei dem Konstantennamen (<span class="clisting">S_IFREG()</span>, <span class="clisting">S_IFDIR()</span>, <span class="clisting">S_IFCHR()</span>, <span class="clisting">S_ISBLK()</span>, <span class="clisting">S_ISFIFO()</span>,                 <span class="clisting">S_IS&ndash;LINK()</span> und <span class="clisting">S_ISSOCK()</span>). Alle diese Makros geben 1 zurück, wenn Entsprechendes zutrifft, ansonsten 0.</p>
<p>Im folgenden Listing können Sie über Argumente aus der Kommandozeile beliebig viele Dateien dahingehend abfragen, ob es sich um eine reguläre Datei     (<span class="clisting">S_IFREG</span>), eine zeichenorientierte Gerätedatei (<span class="clisting">S_IFCHR</span>) oder ein Verzeichnis   (<span class="clisting">S_IFDIR</span>) handelt.</p>
<div class="listing"><pre class="prettyprint">/* file_chk.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#ifdef __unix__
      #include &lt;unistd.h&gt;
      #include &lt;sys/stat.h&gt;
      #include &lt;sys/types.h&gt;
#else
      #include &lt;sys\stat.h&gt;
#endif

int main(int argc, char *argv[]) {
   struct stat attribut;

   if(argc == 1) {
      printf("%s = ",*argv);
      if(stat(*argv, &amp;attribut) == -1) {
         fprintf(stderr,"Fehler bei stat ...\n");
         return EXIT_FAILURE;
      }
      if(attribut.st_mode &amp; S_IFREG)
         printf("Reguläre Datei\n");
      else if(attribut.st_mode &amp; S_IFDIR)
         printf("Directory\n");
      else if(attribut.st_mode &amp; S_IFCHR)
         printf("Gerätedatei\n");
      else
         printf("Unbekannte Datei\n");
   }
   else {
      while(*++argv) {
         printf("%s = ",*argv);
         if(stat(*argv, &amp;attribut) == -1) {
            fprintf(stderr,"Fehler bei stat (2)...\n");
            return EXIT_FAILURE;
         }
         if(attribut.st_mode &amp; S_IFREG)
            printf("Reguläre Datei\n");
         else if(attribut.st_mode &amp; S_IFDIR)
            printf("Directory\n");
         else if(attribut.st_mode &amp; S_IFCHR)
            printf("Gerätedatei\n");
         else
            printf("Unbekannte Datei\n");
      }/* Ende while */
   }
   return EXIT_SUCCESS;
}</pre></div>
<div class="bildbox">
<p><a name="IDA20UQ"></a><a onClick="OpenWin('bilder/17_001.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein17_001.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 17.1    </strong>Erfragen der Dateiart mit »st_mode«</p>
<p>Zuerst werden in der Schleife mit</p>
<div class="listing"><pre class="prettyprint">if(stat(*argv, &amp;attribut) == -1)</pre></div>
<p>die Attribute der Datei <span class="clisting">*argv</span> in die Adresse der Strukturvariablen <span class="clisting">attribut</span> geschrieben. Anschließend werden einige Attribute mit den folgenden Zeilen abgefragt, um zu ermitteln, um welche Dateiart es sich hierbei handelt:</p>
<div class="listing"><pre class="prettyprint">if(attribut.st_mode &amp; S_IFREG)
   printf("Reguläre Datei\n");
else if(attribut.st_mode &amp; S_IFDIR)
   printf("Directory\n");
else if(attribut.st_mode &amp; S_IFCHR)
   printf("Gerätedatei\n");
else
   printf("Unbekannte Datei\n");</pre></div>
<p>Danach fährt die Programmausführung mit dem nächsten Argument in der Kommandozeile fort.</p>
<p>Wenn sich das Listing bei Ihnen nicht übersetzen lässt und Sie unter Linux/UNIX arbeiten, sollten Sie es mit den entsprechenden Makros probieren:</p>
<div class="listing"><pre class="prettyprint">if( S_IFREG(attribut.st_mode) )
   printf("Reguläre Datei\n");
else if( S_IFDIR(attribut.st_mode) )
   printf("Directory\n");
else if( S_IFCHR(attribut.st_mode) )
   printf("Gerätedatei\n");
else
   printf("Unbekannte Datei\n");</pre></div>
<p>Mit dem Strukturelement <span class="clisting">st_mode</span> in der Struktur <span class="clisting">stat</span> lassen sich die Zugriffsrechte einer Datei ebenfalls abfragen. Dies funktioniert genauso wie bei der Abfrage der Dateiart. Zudem müssen Sie den bitweisen UND-Operator (<span class="clisting">&amp;</span>) mit einer der unter Linux/UNIX vorgegebenen Konstanten verknüpfen (siehe Tabelle 17.3).</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 17.3    </strong>Dateimodus (Rechte erfragen) unter Linux/UNIX</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Konstante</span>
</td>
<td class="tabellenkopf"><span class="cfett">Bedeutung</span>
</td>
<td class="tabellenkopf"><span class="cfett">Benutzerklasse</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_IRUSR</pre></div>
</td>
<td class="tabellentext">
<p><span class="clisting">read</span> (Leserecht)</p>
</td>
<td class="tabellentext">
<p>Dateieigentümer</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_IWUSR</pre></div>
</td>
<td class="tabellentext">
<p><span class="clisting">write</span> (Schreibrecht)</p>
</td>
<td class="tabellentext">
<p>Dateieigentümer</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_IXUSR</pre></div>
</td>
<td class="tabellentext">
<p><span class="clisting">execute</span> (Ausführungsrecht)</p>
</td>
<td class="tabellentext">
<p>Dateieigentümer</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_IRGRP</pre></div>
</td>
<td class="tabellentext">
<p><span class="clisting">read</span> (Leserecht)</p>
</td>
<td class="tabellentext">
<p>Gruppe des Dateieigentümers</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_IWGRP</pre></div>
</td>
<td class="tabellentext">
<p><span class="clisting">write</span> (Schreibrecht)</p>
</td>
<td class="tabellentext">
<p>Gruppe des Dateieigentümers</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_IXGRP</pre></div>
</td>
<td class="tabellentext">
<p><span class="clisting">execute</span> (Ausführungsrecht)</p>
</td>
<td class="tabellentext">
<p>Gruppe des Dateieigentümers</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_IROTH</pre></div>
</td>
<td class="tabellentext">
<p><span class="clisting">read</span> (Leserecht)</p>
</td>
<td class="tabellentext">
<p>alle anderen Benutzer</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_IWOTH</pre></div>
</td>
<td class="tabellentext">
<p><span class="clisting">write</span> (Schreibrecht)</p>
</td>
<td class="tabellentext">
<p>alle anderen Benutzer</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_IXOTH</pre></div>
</td>
<td class="tabellentext">
<p><span class="clisting">execute</span> (Ausführungsrecht)</p>
</td>
<td class="tabellentext">
<p>alle anderen Benutzer</p>
</td>
</tr>
</table><br><p>Bei MS-DOS/Windows gibt es zum Erfragen der Zugriffsrechte die Möglichkeiten, die Tabelle 17.4 aufführt.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 17.4    </strong>Dateimodus (Rechte erfragen) unter MS-DOS/Windows</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Konstante</span>
</td>
<td class="tabellenkopf"><span class="cfett">Bedeutung</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_IWRITE</pre></div>
</td>
<td class="tabellentext">
<p>nur Schreibrecht</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_IREAD</pre></div>
</td>
<td class="tabellentext">
<p>nur Leserecht</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">S_IEXEC</pre></div>
</td>
<td class="tabellentext">
<p>Ausführen erlaubt bzw. Verzeichnis durchsuchen erlaubt</p>
</td>
</tr>
</table><br><p>Hierzu ein Beispiel für Linux/UNIX:</p>
<div class="listing"><pre class="prettyprint">/* check_rwx.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/types.h&gt;

int main(int argc, char *argv[]) {
   struct stat attribut;
   int i;
   char l_rwx[10];
   char rwx[] = "rwxrwxrwx";

   int bits[] = {
      S_IRUSR,S_IWUSR,S_IXUSR,   /* Zugriffsrechte User    */
      S_IRGRP,S_IWGRP,S_IXGRP,   /* Zugriffsrechte Gruppe  */
      S_IROTH,S_IWOTH,S_IXOTH    /* Zugriffsrechte der Rest */
   };
   while(*++argv) { /* einzelne Argumente durchlaufen */
      l_rwx[0]='\0';
      printf("%18s = ",*argv);
      if(stat(*argv, &amp;attribut) == -1) {
         fprintf(stderr,"Fehler bei stat?!?...\n");
         return EXIT_FAILURE;
      }
      for(i = 0; i &lt; 9; i++) {
         /* wenn nicht 0, dann gesetzt */
         if(attribut.st_mode &amp; bits[i])
            l_rwx[i]=rwx[i];  /*r,w oder x*/
         else
            l_rwx[i] = '-'; /*wenn nicht gesetzt, dann '-'*/
      }
      l_rwx[9]='\0';
      printf("%s\n",l_rwx);
   }/*Ende while*/
   return EXIT_SUCCESS;
}</pre></div>
<div class="bildbox">
<p><a name="IDARHVQ"></a><a onClick="OpenWin('bilder/17_002.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein17_002.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 17.2    </strong>Ausgabe der Zugriffsrechte unter Linux/UNIX</p>
<p>Dieses Listing stellt eine einfache Methode dar, wie die Zugriffsrechte einer Datei oder eines Verzeichnisses in gewohnter Linux-Manier ausgegeben werden können. Bei MS-DOS/Windows können Sie so vorgehen:</p>
<div class="listing"><pre class="prettyprint">if(attribut.st_mode &amp; S_IREAD)
 { /* Datei darf nur gelesen werden */ }
else if(attribut.st_mode &amp; S_IWRITE)
 { /* Datei darf beschrieben werden */ }
else if(attribut.st_mode &amp; S_IEXEC)
 { /* Datei ist eine ausführbare (bsp. *.exe */ }</pre></div>
<p>Wird hingegen bei Linux/UNIX die oktale Darstellung der Zugriffsrechte benötigt, können Sie dies folgendermaßen erreichen:</p>
<div class="listing"><pre class="prettyprint">/* permission_oct.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/types.h&gt;

int main(int argc, char *argv[]) {
   struct stat attribut;

   while(*++argv) { /* einzelne Argumente durchlaufen */
      printf("%18s = ",*argv);
      if(stat(*argv, &amp;attribut) == -1) {
         fprintf(stderr,"Fehler bei stat?!?...\n");
         return EXIT_FAILURE;
      }
      printf("%o\n", attribut.st_mode &amp; 0777);
   }
   return EXIT_SUCCESS;
}</pre></div><a id="mjfa96859cf23f01558e382594661bdbe0" name="mjfa96859cf23f01558e382594661bdbe0"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">17.1.2</span><span class="cfett"> »stat()« &#8211; »st_size«</span>  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Kommen wir nun zu einem weiteren Parameter der Struktur <span class="clisting">stat</span>. Um die Größe einer Datei in Bytes zu ermitteln, kann die Strukturvariable <span class="clisting">st_size</span> verwendet werden. Ein Wert wird aber nur für reguläre Dateien und Verzeichnisse (bei MS-DOS/Windows 0 für Verzeichnisse) zurückgegeben. Beim Filesystem werden dabei nicht die einzelnen Bytes angegeben, sondern immer ganze Blöcke von Bytes. Typische Blockgrößen sind 512 oder 1024 Bytes. Das bedeutet, die Variable von <span class="clisting">st_size</span> gibt nicht den physikalischen Speicher einer Datei aus, den diese wirklich belegt. Das folgende Programm gibt die Größe aller Dateien auf dem Bildschirm aus, die Sie in der Kommandozeile angeben.</p>
<div class="listing"><pre class="prettyprint">/* size.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#ifdef __unix__
      #include &lt;sys/stat.h&gt;
      #include &lt;sys/types.h&gt;
#else
      #include &lt;sys\stat.h&gt;
#endif

int main(int argc, char *argv[]) {
   struct stat attribut;
   unsigned long sizeofall=0;

   if(argc == 1) {
      if(stat(*argv, &amp;attribut) == -1) {
         fprintf(stderr,"Fehler bei stat....\n");
         return EXIT_FAILURE;
      }
      else {
         printf("Größe von %s = %ld Bytes\n",
            *argv,attribut.st_size);
         return EXIT_SUCCESS;
      }
   }
   else {
      while(*++argv) {
         if(stat(*argv, &amp;attribut) == -1) {
            fprintf(stderr,"Fehler bei stat....\n");
            return EXIT_FAILURE;
         }
         else {
            printf("Größe von %s = %ld Bytes\n",
               *argv,attribut.st_size);
            sizeofall += attribut.st_size;
         }
      }
   }
   printf("Größe aller Dateien in der "
          " Kommandozeile = %ld Bytes",sizeofall);
   printf("= %ld KB\n",sizeofall/=1024);
   return EXIT_SUCCESS;
}</pre></div>
<div class="bildbox">
<p><a name="IDAANVQ"></a><a onClick="OpenWin('bilder/17_003.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein17_003.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 17.3    </strong>Größe von Dateien mit »st_size« ermitteln</p>
<p>Wie ich bereits erwähnt habe, gelingt es unter Windows/MS-DOS nicht, die Größe eines Verzeichnisses zu erhalten. Bei UNIX/Linux hingegen funktioniert das schon, da Verzeichnisse hier wie normale Dateien behandelt werden.</p><a id="mjfc20e82dbd79f9a349df3d5e66258b3e" name="mjfc20e82dbd79f9a349df3d5e66258b3e"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">17.1.3</span><span class="cfett"> »stat()« &#8211; »st_atime«, »st_mtime« und »st_ctime«</span>  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Um spezielle Zeitdaten einer Datei abzufragen, befinden sich in der Struktur <span class="clisting">stat</span> folgende Variablen:</p>
<ul class="gp">
<li><span class="clisting">st_atime</span> = Zeit des letzten Zugriffs</li>
</ul>
<ul class="gp">
<li><span class="clisting">st_mtime</span> = Zeit der letzten Änderung des Dateiinhalts</li>
</ul>
<ul class="gp">
<li><span class="clisting">st_ctime</span> = Zeit der letzten Inode-Änderung</li>
</ul><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Hinweis</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Mit einer Inode werden unter Linux/UNIX Verwaltungsinformationen von den eigentlichen Daten getrennt gespeichert. Diese Inode-Informationen sind dabei Merkmale wie Zugriffszeit, Rechte, Größe und weitere Angaben. Die einzige Information, die nicht zur Inode gehört, ist der Name der Datei.</p>
</td>
</tr>
</table><br><p>Die Unterscheidung dieser drei Zeitattribute trifft nur für Linux/UNIX zu. Bei MS-DOS/Windows bedeuten alle drei Zeiten dasselbe: nämlich den Zeitpunkt, zu dem die Datei das letzte Mal geändert wurde. Dazu ein Beispiel: Von allen Dateien, die Sie in der Kommandozeile eingeben, wird die Zeit des letzten Zugriffs und die Zeit der letzten Änderung ausgegeben:</p>
<div class="listing"><pre class="prettyprint">/* ch_time.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
#ifdef __unix__
      #include &lt;sys/stat.h&gt;
      #include &lt;sys/types.h&gt;
#else
      #include &lt;sys\stat.h&gt;
#endif

int main(int argc, char *argv[]) {
   struct stat attribut;
   unsigned long sizeofall=0;

   if(argc == 1) {
      if(stat(*argv, &amp;attribut) == -1) {
         fprintf(stderr,"Fehler bei stat....\n");
         return EXIT_FAILURE;
      }
      else {
         printf("Groesse von %s = %ld Bytes\n",
            *argv,attribut.st_size);
         printf("letzter Zugriff : %s",
            ctime(&amp;attribut.st_atime));
         printf("letzte Aenderung: %s",
            ctime(&amp;attribut.st_mtime));
         return EXIT_SUCCESS;
      }
   }
   else {
      while(*++argv) {
         if(stat(*argv, &amp;attribut) == -1) {
            fprintf(stderr,"Fehler bei stat....\n");
            return EXIT_FAILURE;
         }
         else {
            printf("Groesse von %s = %ld Bytes\n",
                *argv,attribut.st_size);
            printf("letzter Zugriff : %s",
               ctime(&amp;attribut.st_atime));
            printf("letzte Aenderung: %s\n",
               ctime(&amp;attribut.st_mtime));
            sizeofall += attribut.st_size;
         }
      }
   }
   printf("Groesse aller Dateien in der "
          "Kommandozeile = %ld Bytes",sizeofall);
   printf("= %ld KB\n",sizeofall/=1024);
   return EXIT_SUCCESS;
}</pre></div>
<div class="bildbox">
<p><a name="IDADTVQ"></a><a onClick="OpenWin('bilder/17_004.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein17_004.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 17.4    </strong>Abfragen verschiedener Zeitdaten unter Linux</p>
<p>Das Programm wurde mit dem vorherigen Beispiel vermischt. Auf diese Weise wird gleichzeitig die Größe der Datei inklusive der letzten Änderung und des letzten Zugriffs auf die Datei ausgegeben.</p>
<p>Unter Linux lässt sich außerdem mithilfe der Variablen <span class="clisting">st_atime</span> und <span class="clisting">st_mtime</span> beim Kopieren einer Datei verhindern, dass diese beiden Werte verändert werden. Gemeint ist damit Folgendes: Wenn Sie eine Datei beispielsweise mit <span class="clisting">cp</span> kopieren, werden normalerweise alle drei Werte auf das aktuelle Datum gesetzt. Wollen Sie das Datum des Originals erhalten (letzter Zugriff und Änderung des Inhalts), können Sie folgendermaßen vorgehen:</p>
<div class="listing"><pre class="prettyprint">/* manipulate_time.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;utime.h&gt;
#include &lt;fcntl.h&gt;

int main(int argc, char *argv[]) {
   FILE *q,*z;
   struct stat attribut;
   char buf[1024];
   int i;
   struct utimbuf zeit;  /* siehe Funktion utimes() */

   if(stat(argv[1],&amp;attribut) &lt; 0) {
      fprintf(stderr, "Fehler bei stat ...\n");
      return EXIT_FAILURE;
   }
   zeit.actime = attribut.st_atime;
   zeit.modtime= attribut.st_mtime;

   q=fopen(argv[1],"r");
   z=fopen(argv[2],"w");
   if(q == NULL || z == NULL) {
      fprintf(stderr,"Fehler bei fopen ...\n");
      return EXIT_FAILURE;
   }
   while( (i=fread(buf, 1, 1024, q)) &gt; 0 )
      fwrite(buf, 1, i, z);

   /* Wichtig!!! Ohne den Stream zu schließen, wird die
    * aktuelle Zeit verwendet, da die Datei erst nach
    * return 0 beendet wird. */
   fclose(q);
   fclose(z);
   /* Jetzt die Zeit von quelle in ziel eintragen */
   if(utime(argv[2], &amp;zeit) &lt; 0) {
      printf("Fehler bei utime() ...\n");
      return EXIT_FAILURE;
   }
   return EXIT_SUCCESS;
}</pre></div>
<p>Kopieren Sie einmal eine Datei mittels <span class="clisting">cp</span>, und sehen Sie sich die Zeiten mit <span class="clisting">ls</span> <span class="clisting">&ndash;l</span>, <span class="clisting">ls -lu</span> und <span class="clisting">ls -lc</span> an. Bei der Überprüfung der Zeitangabe werden Sie feststellen, dass alle drei Zeitdaten auf dieselbe Zeit gesetzt wurden.</p>
<p>Wiederholen Sie dies nun mit dem eben geschriebenen Programm. Bei einem erneuten Blick auf die Zeitdaten sind die Variablen <span class="clisting">st_atime</span> und <span class="clisting">st_mtime</span> jetzt identisch mit der Originaldatei. Hätten Sie in diesem Listing <span class="clisting">fclose()</span> nicht oder erst nach der Funktion <span class="clisting">utime()</span> verwendet, so würde wieder der aktuelle Zeitstempel gesetzt, da dies den letzten Zugriff darstellt.</p>
<p>Wollen Sie herausfinden, welche von zwei Dateien älter ist, können Sie dies mit der Strukturvariablen <span class="clisting">st_mtime</span> ermitteln:</p>
<div class="listing"><pre class="prettyprint">/* older_file.c */
#include &lt;sys/stat.h&gt;
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
#include &lt;stdlib.h&gt;

time_t st_mTime(char *name) {
   struct stat s;

   if (stat(name, &amp;s)) {
      perror(name);
      exit(EXIT_FAILURE);
   }
   return s.st_mtime;
}

int main(int argc, char *argv[]) {
   time_t t1, t2;

   if (argc == 3) {
      t1 = st_mTime(argv[1]),
      t2 = st_mTime(argv[2]);
      if(t1 != t2)
         printf("%s ist %s wie %s\n"
          ,argv[1],(t1&gt;t2?"neuer":"älter"),argv[2]);
      else
         printf("Beide Dateien sind gleich alt\n");
   }
   else {
      fprintf(stderr, "Verwendung %s datei1 datei2\n",argv[0]);
      return EXIT_FAILURE;
   }
   return EXIT_SUCCESS;
}</pre></div>
<p>In diesem Listing wurde die Headerdatei <span class="ckursiv">&lt;time.h&gt;</span> verwendet, um den Rückgabetyp <span class="clisting">time_t</span> zu verwenden. Zu dieser Headerdatei finden Sie im Buch noch einen eigenen Abschnitt (19.1).</p><a id="mj8384f1dc9ba3069a09dd846cfea507c3" name="mj8384f1dc9ba3069a09dd846cfea507c3"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">17.1.4</span><span class="cfett"> »stat()« &#8211; »st_gid« und »st_uid«</span>  <a href="#t2t36"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Um herauszufinden, wer der Eigentümer und der Gruppeneigentümer einer Datei ist, können Sie sich der Variablen <span class="clisting">st_uid</span> (Eigentümer) und <span class="clisting">st_gid</span> (Gruppeneigentümer) bedienen. Hierzu das Listing:</p>
<div class="listing"><pre class="prettyprint">/* ugid.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/types.h&gt;

int main(int argc, char *argv[]){
   struct stat attribut;

   while(*++argv) {
      if(stat(*argv,&amp;attribut) &lt; 0) {
         fprintf(stderr, "Fehler bei stat ...\n");
         return EXIT_FAILURE;
      }
      printf("\n%18s\n", *argv);
      printf("USER-ID  : %d\n", attribut.st_uid);
      printf("GROUP-ID : %d\n\n", attribut.st_gid);
   }
   return EXIT_SUCCESS;
}</pre></div><a id="mja6dac40bbc1506b1e02baf619838ffb3" name="mja6dac40bbc1506b1e02baf619838ffb3"></a><a name="t35"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t36"></a><h3 class="t3"><span class="cfett">17.1.5</span><span class="cfett"> »stat()« &#8211; »st_nlink«, »st_ino«</span>  <a href="#t2t37"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t35"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Weitere Informationen zu einer Datei unter Linux lassen sich mit den Variablen <span class="clisting">st_nlink</span> (Anzahl der Links) und <span class="clisting">st_ino</span> (Inode-Nummer der Datei) ausgeben:</p>
<div class="listing"><pre class="prettyprint">/* link_ino.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/types.h&gt;

int main(int argc, char *argv[]){
   struct stat attribut;

   while(*++argv) {
      if(stat(*argv,&amp;attribut) &lt; 0) {
         fprintf(stderr, "Fehler bei stat ...\n");
         return EXIT_FAILURE;
       }
       printf("\n%18s\n",*argv);
       printf("Anzahl Links  : %d\n",attribut.st_nlink);
       printf("Inode Nummer  : %d\n\n",attribut.st_ino);
   }
   return EXIT_SUCCESS;
}</pre></div><a id="mjc3760fa109b9837b23fb25544bb53b07" name="mjc3760fa109b9837b23fb25544bb53b07"></a><a name="t36"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t37"></a><h3 class="t3"><span class="cfett">17.1.6</span><span class="cfett"> »stat()« &#8211; »st_dev«, »st_rdev«</span>  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t36"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Die Strukturvariablen <span class="clisting">st_dev</span> und <span class="clisting">st_rdev</span> sind recht nützlich für Gerätedateien. Bei MS-DOS/Windows haben beide Variablen dieselbe Bedeutung:</p>
<ul class="gp">
<li><span class="clisting">st_dev</span> &#8211; enthält für jeden Dateinamen die Gerätenummer des Filesystems, in dem sich diese Dateien und ihr zugehöriger Inode befinden. (Windows/MS-DOS und Linux/UNIX).</li>
</ul>
<ul class="gp">
<li><span class="clisting">st_rdev</span> &#8211; hat nur für zeichen- und blockorientierte Gerätedateien einen definierten Wert, nämlich die Gerätenummer des zugeordneten Geräts. Die <span class="clisting">majornummer</span> legt den Gerätetyp fest, während der <span class="clisting">minornummer</span> der entsprechende Gerätetreiber übergeben wird. So werden verschiedene Geräte des gleichen Typs unterschieden (nur Linux/UNIX).</li>
</ul>
<p>Das Folgende ist ein Beispielprogramm nur für MS-DOS/Windows. Das Programm liefert zu angegebenen Dateinamen den Laufwerksnamen zurück:</p>
<div class="listing"><pre class="prettyprint">/* lfwrk.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys\stat.h&gt;

int main(int argc, char *argv[]) {
   struct stat laufwerknr;

   if(argc==1) {
      fprintf(stderr, "usage:%s Datei1 Datei2 Datei3\n", *argv);
      return EXIT_FAILURE;
   }
   while(*++argv) {
      printf("%s = Laufwerk : ",*argv);
      if(stat(*argv, &amp;laufwerknr) == -1) {
         fprintf(stderr,"..Fehler bei stat...!\n");
         return EXIT_FAILURE;
      }
      else
         printf("%c (%d)\n",
            laufwerknr.st_dev + 'A',laufwerknr.st_dev);
   }
   return EXIT_SUCCESS;
}</pre></div>
<div class="bildbox">
<p><a name="IDAIAWQ"></a><a onClick="OpenWin('bilder/17_005.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein17_005.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 17.5    </strong>Ermittlung des Laufwerks, in dem sich die Datei befindet</p>
<p>Ein kurze Erklärung zu:</p>
<div class="listing"><pre class="prettyprint">laufwerknr.st_dev + 'A'</pre></div>
<p>Da der PC die Laufwerke nicht &#8211; wie Sie es gewohnt sind &#8211; mit</p>
<div class="listing"><pre class="prettyprint">A:\ = 1. Diskettenlaufwerk
B:\ = 2. Diskettenlaufwerk
C:\ = 1.Festplatte
D:\ = 2.Festplatte oder CD-ROM-Laufwerk
................usw. bis Z:\ falls vorhanden</pre></div>
<p>erkennt, sondern mit Nummern wie</p>
<div class="listing"><pre class="prettyprint">0 = 1. Diskettenlaufwerk
1 = 2. Diskettenlaufwerk
2 = 1.Festplatte
3 = 2.Festplatte oder CD-ROM-Laufwerk</pre></div>
<p>wurde einfach die dezimale Ziffer <span class="clisting">0 + 'A'</span> hinzuaddiert. Dies gelingt, weil das Zeichen <span class="clisting">'A'</span> intern für den Wert 65 steht (siehe ASCII-Tabelle) und anschließend auch das Formatzeichen <span class="clisting">char</span> für 65 (<span class="clisting">%c</span> = <span class="clisting">char</span>) ausgegeben wird. Somit wird z. B. für das Laufwerk 2 der Buchstabe C zurückgegeben (2+<span class="clisting">'A'</span> = 67; ASCII-codiert = <span class="clisting">'C'</span>).</p>
<p>Das Beispiel dazu für Linux/UNIX sieht so aus:</p>
<div class="listing"><pre class="prettyprint">/* b_c_file.c */
#include &lt;sys/sysmacros.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

int main(int argc, char *argv[]) {
   struct stat statpuffer;

   if(argc == 1) {
      fprintf(stderr, "usage: %s Datei1 Datei2 ....\n", *argv);
      return EXIT_FAILURE;
   }
   while(*++argv) {
      printf("%s: ",*argv);
      if(stat(*argv, &amp;statpuffer) == -1)
         fprintf(stderr,"Fehler bei stat...\n");
      else {
         printf("dev = %2d/%2d",major(statpuffer.st_dev),
                                minor(statpuffer.st_dev));
         if(S_ISCHR(statpuffer.st_mode)||
            S_ISBLK(statpuffer.st_mode)) {
            printf("-&gt; rdev = %2d/%2d (%s",
               major(statpuffer.st_rdev),
               minor(statpuffer.st_rdev),
               (S_ISCHR(statpuffer.st_mode))?"zeichen" :"block");
            printf("orientiert");
         }
      }
      printf("\n");
   }
   return EXIT_SUCCESS;
}</pre></div>
<p>Vielleicht noch ein Wort zu dieser Zeile:</p>
<div class="listing"><pre class="prettyprint">if(S_ISCHR(statpuffer.st_mode)||
   S_ISBLK(statpuffer.st_mode))</pre></div>
<p>Hiermit wird überprüft, ob es sich um eine zeichenorientierte (<span class="clisting">S_ISCHR</span>) oder eine blockorientierte (<span class="clisting">S_ISBLK</span>) Gerätedatei handelt. Es erfolgt dann eine entsprechende Ausgabe.</p><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="http://openbook.galileocomputing.de/c_von_a_bis_z/017_c_dateien_verzeichnisse_001.htm"><input type="hidden" name="buchtitel" value="C von A bis Z"><input type="hidden" name="Kapitel" value="17 Attribute von Dateien und das Arbeiten mit Verzeichnissen (nicht ANSI C)"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="016_c_ein_ausgabe_funktionen_026.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="017_c_dateien_verzeichnisse_002.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">&nbsp;&nbsp;</td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/?GPP=opc3" class="nav">
<strong>Zum Katalog</strong></a>
</td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2132?GPP=opc3">
<img src="common/9783836214117_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C von A bis Z" title="Zum Katalog: C von A bis Z">
<br /><br /><strong>&nbsp;C von A bis Z</strong><br /><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt&nbsp;bestellen</a><br /><br />
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2"><a href="#kommentar" class="nav"><strong>&nbsp;Ihre Meinung?</strong></a>
</td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br /><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br /><br /></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/?GPP=opc3" class="nav"><strong>Buchtipps</strong></a></td>
</tr>
<tr> 
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2083?GPP=opc3">
<img src="common/9783836213851_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in C++" title="Zum Katalog: Einstieg in C++"><br /><br /><br /><br /><br /><br /><br />&nbsp;Einstieg in C++</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opc3">
<img src="common/9783836214292_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br /><br /><br /><br /><br /><br /><br />&nbsp;C++ von A bis Z</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1299?GPP=opc3">
<img src="common/9783898428392_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C/C++" title="Zum Katalog: C/C++"><br /><br /><br /><br /><br /><br /><br />&nbsp;C/C++</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1712?GPP=opc3">
<img src="common/9783836211574_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Shell-Programmierung" title="Zum Katalog: Shell-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Shell-Programmierung</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2049?GPP=opc3">
<img src="common/9783836213660_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Linux-UNIX-Programmierung" title="Zum Katalog: Linux-UNIX-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Linux-UNIX-<br />&nbsp;Programmierung</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2138?GPP=opc3">
<img src="common/9783836214209_s.gif" width="107" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: IT-Handbuch für Fachinformatiker" title="Zum Katalog: IT-Handbuch für Fachinformatiker"><br /><br /><br /><br /><br /><br /><br />&nbsp;IT-Handbuch für <br />&nbsp;Fachinformatiker</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2165?GPP=opc3">
<img src="common/9783836214391_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Ubuntu GNU/Linux" title="Zum Katalog: Ubuntu GNU/Linux"><br /><br /><br /><br /><br /><br /><br />&nbsp;Ubuntu GNU/Linux</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1628?GPP=opc3">
<img src="common/9783836211161_s.gif" width="117" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Coding for Fun" title="Zum Katalog: Coding for Fun"><br /><br /><br /><br /><br /><br /><br /><br />&nbsp;Coding for Fun&nbsp;</a><br /><br /></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2"><strong>&nbsp;Shopping</strong></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br /><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opc3"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br /><br /></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2009</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
