<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: C von A bis Z &ndash; 12.2 Zeiger initialisieren</title>
<meta name="title" content="Galileo Computing :: C von A bis Z - 12.2 Zeiger initialisieren">
<meta name="author" content="J&uuml;rgen Wolf ">
<meta name="publisher" content="Galileo Press 2009">
<meta name="copyright" content="Galileo Press 2009">
<meta name="Description" content="C von A bis Z - Das umfassende Handbuch &ndash; 12.2 Zeiger initialisieren">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href="012_c_zeiger_001.htm">
<link rel="next" href="012_c_zeiger_003.htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opc3"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opc3"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opc3" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="000_c_vorwort_001.htm#mj764cb3fd439d3b95d1843e7c7d17f235">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="000_c_vorwort_gutachter_001.htm#mj3d41cb339c9b2fc1d6e99cdaa93c3860">Vorwort des Gutachters</a></td>
</tr>
<tr>
<td><a class="navnav" href="001_c_einstieg_in_c_001.htm#mja24d93ff97bb42dbebf4689160c45195">1 Einstieg in C</a></td>
</tr>
<tr>
<td><a class="navnav" href="002_c_das_erste_programm_001.htm#mj2604a667cc98d3fa2178751273346b91">2 Das erste Programm</a></td>
</tr>
<tr>
<td><a class="navnav" href="003_c_grundlagen_001.htm#mj7ac54ba315b94149806c1de3fc89ee7f">3 Grundlagen</a></td>
</tr>
<tr>
<td><a class="navnav" href="004_c_ein_ausgabe_001.htm#mj20c131820fbfb1497afd796ee443599e">4 Formatierte Ein-/Ausgabe mit »scanf()« und »printf()«</a></td>
</tr>
<tr>
<td><a class="navnav" href="005_c_basisdatentypen_001.htm#mjeda2957449ddc812dad62b400fe57752">5 Basisdatentypen</a></td>
</tr>
<tr>
<td><a class="navnav" href="006_c_operatoren_001.htm#mjab3693b096d581607801a36ce88905fc">6 Operatoren</a></td>
</tr>
<tr>
<td><a class="navnav" href="007_c_typumwandlung_001.htm#mj5c5e497ac2ab4367fe9df0ffd218cfca">7 Typumwandlung</a></td>
</tr>
<tr>
<td><a class="navnav" href="008_c_kontrollstrukturen_001.htm#mjc7bf6f584a2fe20b4c5f6b16ba15d57d">8 Kontrollstrukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="009_c_funktionen_001.htm#mj7893101be51aa469fe52334038acd465">9 Funktionen</a></td>
</tr>
<tr>
<td><a class="navnav" href="010_c_praeprozessor_001.htm#mjacdd200a20163a4d3fa418b6cb95763e">10 Präprozessor-Direktiven</a></td>
</tr>
<tr>
<td><a class="navnav" href="011_c_arrays_001.htm#mje29de26c54a3884f7316cbbb2a073ad8">11 Arrays</a></td>
</tr>
<tr>
<td><a class="navh" href="##mjee28a882ef9125d2c4cc49121b2c65c1">12 Zeiger (Pointer)</a></td>
</tr>
<tr>
<td><a class="navnav" href="013_c_kommandozeilenargumente_001.htm#mjf6a9e42fa3bc25b2b1e06270e7bf8f68">13 Kommandozeilenargumente</a></td>
</tr>
<tr>
<td><a class="navnav" href="014_c_dyn_speicherverwaltung_001.htm#mj8d062301d2449b13710f1484d499cd9b">14 Dynamische Speicherverwaltung</a></td>
</tr>
<tr>
<td><a class="navnav" href="015_c_strukturen_001.htm#mj5e146ba18168113a5c645cd2d07c4ec8">15 Strukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="016_c_ein_ausgabe_funktionen_001.htm#mj136f9ac6b5b7c440aafe5010411ef011">16 Ein-/Ausgabe-Funktionen</a></td>
</tr>
<tr>
<td><a class="navnav" href="017_c_dateien_verzeichnisse_001.htm#mj9f81aea722a9edb8d0080df81eb9402c">17 Attribute von Dateien und das Arbeiten mit Verzeichnissen (nicht ANSI C)</a></td>
</tr>
<tr>
<td><a class="navnav" href="018_c_stdarg_h_001.htm#mj9d64febdc46a1375e5c4498b17154e30">18 Arbeiten mit variabel langen Argumentlisten &#8211; &lt;stdarg.h&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="019_c_zeitroutinen_001.htm#mj0a8102e96a1297bd767ac7274e069f0f">19 Zeitroutinen</a></td>
</tr>
<tr>
<td><a class="navnav" href="020_c_headerdateien_001.htm#mjf3caede8ebd504dc6b7454b297c251e8">20 Weitere Headerdateien und ihre Funktionen (ANSI C)</a></td>
</tr>
<tr>
<td><a class="navnav" href="021_c_dyn_datenstrukturen_001.htm#mja75ba2f4ab8f95e9e321d195c1e26d76">21 Dynamische Datenstrukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="022_c_algorithmen_001.htm#mj07afe6f332eab2e8168da2f69f7b31c4">22 Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="023_c_cgi_001.htm#mj6c4219b4e615fa24deaa57d5c3d04db8">23 CGI mit C</a></td>
</tr>
<tr>
<td><a class="navnav" href="024_c_mysql_001.htm#mj12dab301033f9fd856aa739270c45e08">24 MySQL und C</a></td>
</tr>
<tr>
<td><a class="navnav" href="025_c_netzwerkprogrammierung_001.htm#mja8101c6e0e4cb2e6fd8312114dad30d7">25 Netzwerkprogrammierung und Cross&ndash;Plattform-Entwicklung</a></td>
</tr>
<tr>
<td><a class="navnav" href="026_c_paralleles_rechnen_001.htm#mj710dc0ad851d57e60533f8797ff9c1e6">26 Paralleles Rechnen</a></td>
</tr>
<tr>
<td><a class="navnav" href="027_c_sicheres_programmieren_001.htm#mj13eba8f9d68ac8414bffaa3a1b24ec31">27 Sicheres Programmieren</a></td>
</tr>
<tr>
<td><a class="navnav" href="028_c_weiterfuehrendes_001.htm#mj3e65f750149ade087925f303b3871af9">28 Wie geht&#8217;s jetzt weiter?</a></td>
</tr>
<tr>
<td><a class="navnav" href="029_c_anhang_a_001.htm#mjec9bf1c5e3fe2e46047c2f9c7aa9c531">A Operatoren</a></td>
</tr>
<tr>
<td><a class="navnav" href="030_c_anhang_b_001.htm#mj803443bb6e7546011c48e6e57fbdbb64">B Die C-Standard-Bibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download.galileo-press.de/openbook/c_von_a_bis_z/galileocomputing_c_von_a_bis_z.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 10,6 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="012_c_zeiger_001.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opc3" class="navnav">Galileo Computing</a> / <a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opc3" class="navnav">&lt;openbook&gt;</a> / <a href="index.htm" class="navnav"> C von A bis Z</a></div></td>
<td align="right" width="25%"><div align="right"><a href="012_c_zeiger_003.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="buchtitel">C von A bis Z</a><span class="autor"> von J&uuml;rgen Wolf </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="navnav"><img src="common/9783836214117.gif" border="0" alt="Buch: C von A bis Z" title="Buch: C von A bis Z"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2132?GPP=opc3"><span class="autor"><strong>C von A bis Z</strong><br>3., aktualisierte und erweiterte Auflage, geb., mit CD und Referenzkarte<br>1.190 S., 39,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1411-7</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="012_c_zeiger_001.htm#mjee28a882ef9125d2c4cc49121b2c65c1" class="navnav">12 Zeiger (Pointer)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="012_c_zeiger_001.htm#mj4b8b5fc31fbd6b5f91b0efbcacede23e" class="navnav">12.1 Zeiger deklarieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjf6107b64d82c7b50d184e8f79ab4674b" class="navh">12.2 Zeiger initialisieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj335cf9a9b8d14263a9f97db410ad5105" class="navh">12.2.1 Speichergröße von Zeigern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="012_c_zeiger_003.htm#mj984570039e966f084dc541b0aa339e38" class="navnav">12.3 Zeigerarithmetik</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="012_c_zeiger_004.htm#mj87126f763f0fd049dd612709d6611ebd" class="navnav">12.4 Zeiger, die auf andere Zeiger verweisen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="012_c_zeiger_004.htm#mj882793c3ed66d504793b14f8097bc82a" class="navnav">12.4.1 Subtraktion zweier Zeiger</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="012_c_zeiger_005.htm#mj8f53364d1c5700ff0950019a50bc10b1" class="navnav">12.5 Typensicherung bei der Dereferenzierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="012_c_zeiger_006.htm#mj7a8cbb91c00cd7a7db170b71c55a2118" class="navnav">12.6 Zeiger als Funktionsparameter (call&ndash;by&ndash;reference)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="012_c_zeiger_006.htm#mj1d0c139ec6125f198a762880b480283f" class="navnav">12.6.1 Zeiger als Rückgabewert</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="012_c_zeiger_007.htm#mjb99637a42fd3decdfe07fe3416407be8" class="navnav">12.7 Array und Zeiger</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="012_c_zeiger_008.htm#mj13c471f1707e00fcd1343a6b758e2093" class="navnav">12.8 Zeiger auf Strings</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="012_c_zeiger_008.htm#mjee203927509156f577c439ed8f1f9e98" class="navnav">12.8.1 Zeiger auf konstante Objekte (Read-only-Zeiger)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="012_c_zeiger_009.htm#mj477a1c84c32c1708b923a6f03df18868" class="navnav">12.9 Zeiger auf Zeiger und Stringtabellen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="012_c_zeiger_009.htm#mjd5e86d20b2221d4b924beb60ca6aa9b6" class="navnav">12.9.1 Stringtabellen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="012_c_zeiger_010.htm#mj434cf4839e6f8e30b7398c30641d5e38" class="navnav">12.10 Zeiger auf Funktionen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="012_c_zeiger_011.htm#mj73b6b10a1e5c84bb6227972822059e40" class="navnav">12.11 void-Zeiger</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="012_c_zeiger_012.htm#mjeac6320125efac0480883292b05b7c46" class="navnav">12.12 Äquivalenz zwischen Zeigern und Arrays</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="012_c_zeiger_013.htm#mjf7d5fcb591067eb77c9205cc918a04cf" class="navnav">12.13 Der »restrict«-Zeiger</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mjf6107b64d82c7b50d184e8f79ab4674b" name="mjf6107b64d82c7b50d184e8f79ab4674b"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">12.2</span><span class="cfett"> Zeiger initialisieren</span>  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Hier beginnt eine gefährliche Operation. Wird im Programm ein Zeiger verwendet, der zuvor nicht initialisiert wurde, kann dies zu schwerwiegenden Fehlern führen &#8211; sogar bis zum Absturz eines Betriebssystems (bei 16-Bit-Systemen). Die Gefahr ist, dass bei einem Zeiger, der nicht mit einer gültigen Adresse initialisiert wurde und auf den jetzt zurückgegriffen werden soll, stattdessen einfach auf irgendeine Adresse im Arbeitsspeicher zurückgegriffen wird. Wenn sich in diesem Speicherbereich wichtige Daten oder Programme bei der Ausführung befinden, kommt es logischerweise zu Problemen.</p>
<p>Um das Prinzip der Zeiger zu verstehen, müssen Sie nochmals zurück zu den normalen Datentypen springen, beispielsweise zu folgender Initialisierung:</p>
<div class="listing"><pre class="prettyprint">int x = 5;</pre></div>
<p>Durch diese Initialisierung ergibt sich im Arbeitsspeicher folgendes Bild:</p>
<div class="bildbox">
<p><a name="IDAYDUQ"></a><a onClick="OpenWin('bilder/12_001.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein12_001.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 12.1    </strong>Darstellung einer Variablen im Arbeitsspeicher</p>
<p>Die Adresse ist eine erfundene Adresse im Arbeitsspeicher, auf die Sie keinen Einfluss haben. Diese wird vom System beim Start des Programms vergeben. Damit der Rechner weiß, von wo er den Wert einer Variablen auslesen soll, wird eine Adresse benötigt. Ebenso sieht es mit der Initialisierung einer Variablen aus, falls dieser ein Wert zugewiesen wird. Der Name einer Variablen ist der Name, den Sie bei der Deklaration selbst festgelegt haben. Der Wert 5 wurde zu Beginn des Programms definiert. Dieser Block oben hat eine Speichergröße von vier Bytes (<span class="clisting">int</span> = vier Bytes oder, auf 16-Bit-Systemen, zwei Bytes).</p>
<p>Hundertprozentig stimmt diese Analyse eines Datentyps nicht. Es gibt noch einige weitere Attribute, die ein Datentyp besitzt, und zwar folgende:</p>
<ul class="gp">
<li>Wann bekommt die Variable ihren Speicherplatz zugeordnet? (Das ist abhängig vom Schlüsselwort <span class="clisting">static</span> oder <span class="clisting">auto</span>.)</li>
</ul>
<ul class="gp">
<li>Wie lange bleibt der Speicherort dieser Variablen gültig?</li>
</ul>
<ul class="gp">
<li>Wer kann diesen Wert ändern bzw. abrufen? (Das ist abhängig vom Gültigkeitsbereich und von der Sichtbarkeit der Variablen: global, lokal, Schlüsselwort <span class="clisting">const</span>.)</li>
</ul>
<ul class="gp">
<li>Wann wird die Variable gespeichert? (Das ist abhängig vom Schlüsselwort <span class="clisting">volatile</span>.)</li>
</ul>
<p>Dies dient allerdings hier nur zur Information, denn die Dinge sollten jetzt nicht komplizierter gemacht werden, als sie sind.</p>
<p>Benötigen Sie die Adresse einer Variablen im Arbeitsspeicher, dann kann diese mit dem Formatzeichen <span class="clisting">%p</span> und dem Adressoperator <span class="clisting">&amp;</span> abgefragt und ausgegeben werden:</p>
<div class="listing"><pre class="prettyprint">/* ptr1.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void) {
   int x = 5;

   printf("Die Adresse von x ist %p \n",&amp;x);
   return EXIT_SUCCESS;
}</pre></div>
<p>In diesem Beispiel wurde mithilfe des Adressoperators und des Formatzeichens <span class="clisting">%p</span> die aktuelle Speicheradresse der Variablen <span class="clisting">x</span> ausgegeben.</p>
<p>Jetzt ist auch klar, warum <span class="clisting">scanf()</span> eine Fehlermeldung ausgibt, wenn kein Adressoperator mit angegeben wird:</p>
<div class="listing"><pre class="prettyprint">scanf("%d",x);  /* Wohin damit ...??? */</pre></div>
<p>Das wäre dasselbe, als wenn der Postbote einen Brief zustellen soll, auf dem sich keine Anschrift befindet. Der Brief wird niemals sein Ziel erreichen. Genauso läuft es in Ihrem PC ab, egal ob Sie jetzt ein Computerspiel spielen oder ein Textverarbeitungsprogramm verwenden. Jedes Speicherobjekt, das Sie definieren, hat eine Adresse, einen Namen und eine bestimmte Speichergröße (je nach Datentyp). Der Wert ist der einzige dieser vier Angaben, der zur Laufzeit festgelegt oder verändert werden kann.</p>
<p>Wie kann jetzt einem Zeiger die Adresse einer Variablen übergeben werden? Dies soll das folgende Beispiel demonstrieren:</p>
<div class="listing"><pre class="prettyprint">/* ptr2.c */
#include &lt;stdio.h&gt;

#include &lt;stdlib.h&gt;

int main(void) {
   int abfrage;
   int Kapitel1 = 5;
   int Kapitel2 = 60;
   int Kapitel3 = 166;
   int Nachtrag = 233;
   int *Verzeichnis;   /* Zeiger */

   do {
      printf("\tINDEXREGISTER VOM BUCH\n");
      printf("\t*******************************\n\n");
      printf("\t-1- Kapitel 1\n");
      printf("\t-2- Kapitel 2\n");
      printf("\t-3- Kapitel 3\n");
      printf("\t-4- Nachtrag\n");
      printf("\t-5- Ende\n");
      printf("\n");
      printf("\tAuswahl : ");
      scanf("%d",&amp;abfrage);
      printf("\tKapitel %d finden Sie auf ",abfrage);

      switch(abfrage) {
         case 1  :  Verzeichnis =&amp; Kapitel1;
                    printf("Seite %d\n", *Verzeichnis);
                    break;
         case 2  :  Verzeichnis =&amp; Kapitel2;
                    printf("Seite %d\n", *Verzeichnis);
                    break;
         case 3  :  Verzeichnis =&amp; Kapitel3;
                    printf("Seite %d\n", *Verzeichnis);
                    break;
         case 4  :  Verzeichnis =&amp; Nachtrag;
                    printf("Seite %d\n", *Verzeichnis);
                    break;
         default :  printf("Seite ???\n");
                    break;
      }
   } while(abfrage &lt; 5);
   return EXIT_SUCCESS;
}</pre></div>
<p>Der Zeiger des Programms ist:</p>
<div class="listing"><pre class="prettyprint">int *Verzeichnis;</pre></div>
<p>Hiermit wurde ein Zeiger mit dem Namen <span class="clisting">Verzeichnis</span> deklariert. Bis zur <span class="clisting">switch</span>-Verzweigung geschieht so weit nichts Neues. Aber dann finden Sie in der ersten <span class="clisting">case</span>-Anweisung:</p>
<p><span class="clisting">Verzeichnis =&amp; Kapitel1;</span></p>
<div class="bildbox">
<p><a name="IDA2QUQ"></a><a onClick="OpenWin('bilder/12_002.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein12_002.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 12.2    </strong>Programm zur Verwendung der Zeiger in Aktion</p>
<p>Damit wird dem Zeiger <span class="clisting">Verzeichnis</span> die Adresse der Variablen <span class="clisting">Kapitel1</span> übergeben. Dies können Sie am Adressoperator <span class="clisting">&amp;</span> erkennen, der sich vor der Variablen <span class="clisting">Kapitel1</span> befindet. Falls Sie den Adressoperator vor der Variablen <span class="clisting">Kapitel1</span> vergessen, wird der Compiler das Programm nicht übersetzen, da ein Zeiger eine Adresse und nicht den Wert einer Variablen haben will.</p>
<p>Zu diesem Beispiel folgt ein kleiner Ausschnitt, der verdeutlicht, was im Speicher alles geschieht:</p>
<div class="listing"><pre class="prettyprint">int Kapitel1 = 5;
int Kapitel2 = 60;
int Kapitel3 = 166;
int Nachtrag = 233;
int *Verzeichnis;</pre></div>
<div class="bildbox">
<p><a name="IDAVRUQ"></a><a onClick="OpenWin('bilder/12_003.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein12_003.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 12.3    </strong>Darstellung im Arbeitsspeicher</p>
<p>Zunächst erfolgt beispielsweise die Adressübergabe der Variablen <span class="clisting">Kapitel1</span> an den Zeiger <span class="clisting">Verzeichnis</span> mit dem Adressoperator:</p>
<div class="listing"><pre class="prettyprint">Verzeichnis =&amp; Kapitel1;</pre></div>
<div class="bildbox">
<p><a name="IDA5RUQ"></a><a onClick="OpenWin('bilder/12_004.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein12_004.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 12.4    </strong>Der Zeiger verweist hier auf die Adresse der Variablen »Kapitel1«.</p>
<p>Daran lässt sich erkennen, wie der Zeiger <span class="clisting">Verzeichnis</span> die Adresse der Variablen <span class="clisting">Kapitel1</span> enthält. Ein wenig anders sieht es dann hiermit aus:</p>
<div class="listing"><pre class="prettyprint">printf("Seite %d\n", *Verzeichnis);</pre></div>
<p>Hier kommt zum ersten Mal der Indirektionsoperator (<span class="clisting">*</span>) ins Spiel. Dieser dereferenziert den Wert der Adresse, mit der der Zeiger zuvor mit</p>
<div class="listing"><pre class="prettyprint">Verzeichnis =&amp; Kapitel1;</pre></div>
<p>initialisiert wurde. Lassen Sie bei der Ausgabe einfach einmal den Indirektionsoperator weg:</p>
<div class="listing"><pre class="prettyprint">printf("Seite %d\n", Verzeichnis);   /* ohne &#8217;*&#8217; */</pre></div>
<p>Übersetzen Sie dieses Programm erneut, und lassen Sie sich das <span class="clisting">Verzeichnis</span> von <span class="clisting">Kapitel1</span> ausgeben. Es wird irgendeine Zahl ausgegeben, nur nicht die Zahl 5. Warum? Eine Umänderung der Zeile</p>
<div class="listing"><pre class="prettyprint">printf("Seite %d\n", *Verzeichnis);</pre></div>
<p>in</p>
<div class="listing"><pre class="prettyprint">printf("Adressen %p %p\n", *Verzeichnis, Kapitel1);</pre></div>
<p>zeigt mehr. Jetzt soll wieder das erste Kapitel bei der Abfrage verwendet werden. Danach müssten beide Male dieselben Adressen ausgegeben werden. Mit <span class="clisting">Verzeichnis =&amp; Kapitel1</span> wurde doch nur die Adresse übergeben. Und im Zeiger selbst befindet sich auch nur die Adresse von <span class="clisting">Kapitel1</span>. Ohne den Indirektionsoperator ist der Zeiger hier nutzlos. Nur mit diesem Operator können Sie auf den Inhalt einer Variablen mithilfe eines Zeigers zugreifen.</p>
<p>Wenn Sie den Zeiger jetzt auf <span class="clisting">Kapitel3</span> (<span class="clisting">Verzeichnis =&amp; Kapitel3</span>) verweisen lassen, ergibt sich folgender Stand im Arbeitsspeicher:</p>
<div class="bildbox">
<p><a name="IDAOTUQ"></a><a onClick="OpenWin('bilder/12_005.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein12_005.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 12.5    </strong>Der Zeiger verweist jetzt auf die Adresse von »Kapitel3«.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Merke</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Wird der Indirektionsoperator (<span class="clisting">*</span>) vorangestellt, erkennen Sie, dass nicht auf den Zeiger zurückgegriffen werden soll, sondern auf das Datenobjekt, dessen Anfangsadresse sich im Zeiger befindet.</p>
</td>
</tr>
</table><br><p>Zum besseren Verständnis folgt dazu ein weiteres Programm, das die Verwendung von Zeigern detaillierter darstellen soll. Es ist ein lehrreiches Beispiel, und es lohnt sich, es zu studieren:</p>
<div class="listing"><pre class="prettyprint">/* ptr3.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void) {
   int x=5;
   int *y;

   printf("Adresse x=%p, Wert x=%d\n", &amp;x, x);

   /*  Führt bei manchen Systemen zum Programmabsturz,
    *  ggf. auskommentieren. */
   printf("Adresse *y=%p, Wert *y=%d(unsinn)\n", &amp;y, *y);
   printf("\ny=&amp;x;\n\n");

   /* y hat jetzt die Adresse von x. */
   y =&amp; x;
   printf("Adresse  x=%p, Wert x=%d\n", &amp;x, x);
   printf("Adresse *y=%p, Wert *y=%d\n", &amp;y, *y);
   printf("\nAdresse, auf die y zeigt, ist %p\n", y);
   printf("und das ist die Adresse von x = %p\n", &amp;x);

   printf("\nACHTUNG!!!\n\n");
   *y=10;
   printf("*y=10\n\n");
   printf("Adresse  x=%p, Wert  x=%d\n", &amp;x, x);
   printf("Adresse *y=%p, Wert *y=%d\n", &amp;y, *y);
   printf("\nAdresse, auf die y zeigt, ist %p\n", y);
   printf("weiterhin die Adresse von x (%p)\n", &amp;x);
   return EXIT_SUCCESS;
}</pre></div>
<div class="bildbox">
<p><a name="IDABWUQ"></a><a onClick="OpenWin('bilder/12_006.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein12_006.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 12.6    </strong>Die Ausgabe des Programms unter Linux</p>
<p>Folgende Zeile dürfte Ihnen bei diesem Programm aufgefallen sein:</p>
<div class="listing"><pre class="prettyprint">*y = 10;</pre></div>
<p>Hiermit wird der Wert der Variablen <span class="clisting">x</span> dereferenziert. Mit dieser Dereferenzierung kann jederzeit auf den Wert der Variablen <span class="clisting">x</span> zugegriffen werden. Dadurch kann mithilfe eines Zeigers der Inhalt der Variablen verändert werden, und zwar so, als würden Sie direkt darauf zugreifen. Die folgenden Abbildungen verdeutlichen den Verlauf.</p>
<div class="listing"><pre class="prettyprint">int x = 5;
int *y;</pre></div>
<div class="bildbox">
<p><a name="IDAPWUQ"></a><a onClick="OpenWin('bilder/12_007.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein12_007.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 12.7    </strong>Speicheradressierung der Variablen »x« und des Zeigers »y«</p>
<div class="listing"><pre class="prettyprint">y =&amp; x;</pre></div>
<div class="bildbox">
<p><a name="IDAUWUQ"></a><a onClick="OpenWin('bilder/12_008.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein12_008.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 12.8    </strong>Der Zeiger »y« verweist jetzt auf die Adresse von Variable »x«.</p>
<div class="listing"><pre class="prettyprint">*y = 10;</pre></div>
<div class="bildbox">
<p><a name="IDAZWUQ"></a><a onClick="OpenWin('bilder/12_009.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein12_009.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 12.9    </strong>Dereferenzierung der Variablen »x«</p>
<p>Somit gilt: Wenn Sie mit dem Indirektionsoperator den Wert einer Variablen auslesen können, dann kann damit auch die Variable verändert werden. Das Wichtigste ist, dass Sie verstehen, dass einem Zeiger kein Wert übergeben wird, sondern eine Adresse (ich wiederhole mich), um anschließend mit dem Wert dieser Adresse zu arbeiten. Aber Achtung, das folgende Programm könnte böse Folgen haben:</p>
<div class="listing"><pre class="prettyprint">/* ptr4.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void) {
   int *y;
   *y=10;

   printf("Der Wert von *y ist %d\n", *y);
   return EXIT_SUCCESS;
}</pre></div>
<p>Dem Zeiger <span class="clisting">y</span> wurde hier zuvor keine gültige Adresse zugewiesen. Dies bedeutet, dass dem Zeiger <span class="clisting">y</span> beim Start des Programms eine Adresse zur Verfügung steht, die durch ein zufälliges Bitmuster vom Linker erzeugt wurde. Das Programm kann theoretisch sogar korrekt ablaufen. Irgendwann kann (wird) es jedoch ein vollkommen falsches Ergebnis zurückliefern. Auch könnte es sein, dass auf einen Speicherbereich zugegriffen wird, der bereits Daten beinhaltet. Dies könnte zu erheblichen Problemen bei der Programmausführung bis hin zum Absturz führen.</p>
<p>Solche Fehler können Sie vermeiden, indem Sie einen nicht verwendeten Zeiger mit <span class="clisting">NULL</span> initialisieren und vor der Verwendung des Zeigers eine Überprüfung auf <span class="clisting">NULL</span> durchführen. Der Wert oder genauer der Zeiger <span class="clisting">NULL</span> ist meistens eine Konstante, die mit dem Wert 0 definiert ist:</p>
<div class="listing"><pre class="prettyprint">#define NULL (void *)0</pre></div>
<p>Einfach ausgedrückt handelt es sich bei diesem <span class="clisting">NULL</span>-Zeiger um einen <span class="ckursiv">Ich-zeige-auf-keine-gültige-Adresse</span>-Wert.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Hinweis</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Auf <span class="clisting">NULL</span> gehe ich in einem anderen Abschnitt (Abschnitt 14.3, »Das NULL-Mysterium«) nochmals etwas genauer ein. Allerdings empfehle ich Ihnen, hierzu auch die deutsche FAQ der de.comp.lang.c (<a href="http://www.dclc-faq.de/inhalt.htm">http://www.dclc-faq.de/inhalt.htm</a>) zu lesen. Hier wurde dem Thema <span class="clisting">NULL</span>-Zeiger  ein  ganzes  Kapitel  gewidmet,  da  besonders  Anfänger  <span class="clisting">NULL</span>  zu  sehr  vergleichen &#8211; was aber nicht immer so sein muss. Theoretisch muss ein <span class="clisting">NULL</span>-Zeiger nämlich kein Zeiger auf null sein, sondern kann auch eben nur als 0 definiert werden.</p>
</td>
</tr>
</table><br><p>Hier sehen Sie das Erwähnte in der Praxis:</p>
<div class="listing"><pre class="prettyprint">/* ptr5.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void) {
   int *y=NULL;    /* Zeiger mit NULL initialisieren */

   if(y == NULL) {
      printf("Der Zeiger besitzt keine gültige Adresse\n");
      return EXIT_FAILURE;
   }
   else
      *y = 10;
   return EXIT_SUCCESS;
}</pre></div>
<p>Ein Tipp zu einer sichereren Überprüfung von:</p>
<div class="listing"><pre class="prettyprint">if(y == NULL)</pre></div>
<p>Es kann dabei schnell passieren, dass Sie statt einer Überprüfung auf <span class="clisting">NULL</span> den Zeiger mit <span class="clisting">NULL</span> initialisieren:</p>
<div class="listing"><pre class="prettyprint">if(y = NULL)  /* Fehler */</pre></div>
<p>Mit folgender Überprüfung kann Ihnen dieser Fehler nicht mehr unterlaufen:</p>
<div class="listing"><pre class="prettyprint">if(NULL == y)</pre></div>
<p>Denn sollten Sie <span class="clisting">NULL</span> den Zeiger <span class="clisting">y</span> zuweisen wollen, wird der Compiler das Programm nicht übersetzen, da dies rein syntaktisch falsch ist.</p>
<p>Natürlich geht dies auch umgekehrt. Sie können einer normalen Variablen auch den Wert eines Zeigers übergeben, auf den dieser zeigt. Beispiel:</p>
<div class="listing"><pre class="prettyprint">/* ptr6.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void) {
   int *ptr;
   int var=10, tmp;

   /* ptr zeigt auf Adresse von var. */
   ptr =&amp; var;
   /* Variable tmp bekommt den Wert, den ptr dereferenziert. */
   tmp = *ptr;       /* tmp=10 */
   *ptr = 100;       /* Inhalt von var wird verändert var=100. */
   if(var &gt; 50)      /* Ist var größer als 50 ... ? */
      var = tmp;       /* ... wieder den alten Wert */
   printf("var=%d\t*ptr=%d\n",var, *ptr); /* var=10   *ptr=10 */
   return EXIT_SUCCESS;
}</pre></div>
<p>Wichtig ist allerdings dabei, dass Sie den Indirektionsoperator verwenden. Denn dieser dereferenziert den Wert, auf den der Zeiger zeigt:</p>
<div class="listing"><pre class="prettyprint">tmp = *ptr;  /* tmp=10 */</pre></div>
<p>Sollten Sie den Indirektionsoperator vergessen, lässt sich das Programm ohnehin nicht übersetzen, denn es würde ja versucht werden, der Variablen <span class="clisting">tmp</span> eine Adresse zu übergeben.</p>
<p>Hier ein schneller Überblick zum Zugriff und zur Dereferenzierung von Zeigern:</p>
<div class="listing"><pre class="prettyprint">// Deklaration
int *ptr;
int var, var2;

// Initialisieren: ptr bekommt die Adresse von var.
ptr =&amp; var;

// Dereferenzierung : var bekommt den Wert 100 zugewiesen.
*ptr=100;


// var2 mit demselben Wert wie var initialisieren
var2 = *ptr;

*ptr+=100;     // Dereferenzierung: var wird um 100 erhöht.
(*ptr)++;      // Dereferenzierung: var hat jetzt den Wert 201.
(*ptr)--;      // var hat wieder den Wert 200.
ptr=&amp;var2;     // ptr zeigt auf var2.

printf("%d", *ptr);    // Gibt Wert von var2 aus.
printf("%p", &amp;ptr);    // Gibt Adresse von ptr aus.
printf("%p", ptr);     // Gibt Adresse von var2 aus.</pre></div>
<p>Sicherlich sind Ihnen im Beispiel auch die Klammern bei den Zeilen</p>
<div class="listing"><pre class="prettyprint">(*ptr)++;      // Dereferenzierung: var hat jetzt den Wert 201.
(*ptr)--;      // var hat wieder den Wert 200.</pre></div>
<p>aufgefallen. Diese waren nötig, da die Operatoren <span class="clisting">++</span> und <span class="clisting">--</span> einen höheren Rang haben als der Indirektionsoperator (<span class="clisting">*</span>) (siehe Anhang A.1, »Rangfolge der Operatoren«). Wenn Sie diese Klammerung vergessen, kann das fatale Folgen haben.</p><a id="mj335cf9a9b8d14263a9f97db410ad5105" name="mj335cf9a9b8d14263a9f97db410ad5105"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">12.2.1</span><span class="cfett"> Speichergröße von Zeigern</span>  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Ich komme bei der Speicherverwaltung zwar nochmals genauer auf dieses Thema zurück, aber es soll hier schon einmal kurz erwähnt werden. Die Größe eines Zeigers hängt nicht von dem Datentyp ab, auf den dieser verweist. Das ist schließlich nicht notwendig, denn Zeiger sollen ja keine Werte, sondern Adressen speichern. Und zur Speicherung von Adressen werden in der Regel zwei oder vier Bytes benötigt. Der Beweis:</p>
<div class="listing"><pre class="prettyprint">/* ptr7.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void) {
   char   *v;
   int    *w;
   float  *x;
   double *y;
   void   *z;

   printf("%d\t %d\t %d\t %d\t %d \n",
      sizeof(v),sizeof(w), sizeof(x), sizeof(y), sizeof(z));
   return EXIT_SUCCESS;
}</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Zeiger auf 64-Bit-Architekturen</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Auf 64-Bit-Architekturen mit einem 64-Bit-Betriebssystem und dem LP64-Typenmodell ist ein Zeiger (wie auch der Datentyp <span class="clisting">long</span>) üblicherweise auch 64 Bit breit und somit 8 Bytes.</p>
</td>
</tr>
</table><br><p>Sicherlich stellt sich die Frage, warum man Zeiger dann überhaupt typisieren sollte, wenn der Speicherverbrauch immer gleich ist. Dies ist ziemlich wichtig in C. Nur dadurch lässt sich in C die Zeigerarithmetik realisieren. Denn nur durch das Wissen um die Speichergröße des assoziierten Typs kann die Adresse des Vorgänger- oder Nachfolgeelementes berechnet werden. Darüber hinaus ermöglicht die Typisierung von Zeigern dem Compiler, Verletzungen der Typkompatibilität zu erkennen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Hinweis</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Es gibt in der Tat Zeiger, die keinem Typ zugeordnet sind (<span class="clisting">void</span>-Zeiger; siehe Abschnitt 12.11, »void-Zeiger«). Diese Zeiger können allerdings nicht dereferenziert, inkrementiert oder dekrementiert werden.</p>
</td>
</tr>
</table><br><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="http://openbook.galileocomputing.de/c_von_a_bis_z/012_c_zeiger_002.htm"><input type="hidden" name="buchtitel" value="C von A bis Z"><input type="hidden" name="Kapitel" value="12.2 Zeiger initialisieren"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="012_c_zeiger_001.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="012_c_zeiger_003.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">&nbsp;&nbsp;</td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/?GPP=opc3" class="nav">
<strong>Zum Katalog</strong></a>
</td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2132?GPP=opc3">
<img src="common/9783836214117_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C von A bis Z" title="Zum Katalog: C von A bis Z">
<br /><br /><strong>&nbsp;C von A bis Z</strong><br /><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt&nbsp;bestellen</a><br /><br />
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2"><a href="#kommentar" class="nav"><strong>&nbsp;Ihre Meinung?</strong></a>
</td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br /><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br /><br /></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/?GPP=opc3" class="nav"><strong>Buchtipps</strong></a></td>
</tr>
<tr> 
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2083?GPP=opc3">
<img src="common/9783836213851_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in C++" title="Zum Katalog: Einstieg in C++"><br /><br /><br /><br /><br /><br /><br />&nbsp;Einstieg in C++</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opc3">
<img src="common/9783836214292_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br /><br /><br /><br /><br /><br /><br />&nbsp;C++ von A bis Z</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1299?GPP=opc3">
<img src="common/9783898428392_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C/C++" title="Zum Katalog: C/C++"><br /><br /><br /><br /><br /><br /><br />&nbsp;C/C++</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1712?GPP=opc3">
<img src="common/9783836211574_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Shell-Programmierung" title="Zum Katalog: Shell-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Shell-Programmierung</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2049?GPP=opc3">
<img src="common/9783836213660_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Linux-UNIX-Programmierung" title="Zum Katalog: Linux-UNIX-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Linux-UNIX-<br />&nbsp;Programmierung</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2138?GPP=opc3">
<img src="common/9783836214209_s.gif" width="107" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: IT-Handbuch für Fachinformatiker" title="Zum Katalog: IT-Handbuch für Fachinformatiker"><br /><br /><br /><br /><br /><br /><br />&nbsp;IT-Handbuch für <br />&nbsp;Fachinformatiker</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2165?GPP=opc3">
<img src="common/9783836214391_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Ubuntu GNU/Linux" title="Zum Katalog: Ubuntu GNU/Linux"><br /><br /><br /><br /><br /><br /><br />&nbsp;Ubuntu GNU/Linux</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1628?GPP=opc3">
<img src="common/9783836211161_s.gif" width="117" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Coding for Fun" title="Zum Katalog: Coding for Fun"><br /><br /><br /><br /><br /><br /><br /><br />&nbsp;Coding for Fun&nbsp;</a><br /><br /></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2"><strong>&nbsp;Shopping</strong></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br /><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opc3"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br /><br /></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2009</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
