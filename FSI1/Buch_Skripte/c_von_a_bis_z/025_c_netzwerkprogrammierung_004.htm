<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: C von A bis Z &ndash; 25.4 Erstellen einer Client-Anwendung</title>
<meta name="title" content="Galileo Computing :: C von A bis Z - 25.4 Erstellen einer Client-Anwendung">
<meta name="author" content="J&uuml;rgen Wolf ">
<meta name="publisher" content="Galileo Press 2009">
<meta name="copyright" content="Galileo Press 2009">
<meta name="Description" content="C von A bis Z - Das umfassende Handbuch &ndash; 25.4 Erstellen einer Client-Anwendung">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href="025_c_netzwerkprogrammierung_003.htm">
<link rel="next" href="025_c_netzwerkprogrammierung_005.htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opc3"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opc3"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opc3" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="000_c_vorwort_001.htm#mj764cb3fd439d3b95d1843e7c7d17f235">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="000_c_vorwort_gutachter_001.htm#mj3d41cb339c9b2fc1d6e99cdaa93c3860">Vorwort des Gutachters</a></td>
</tr>
<tr>
<td><a class="navnav" href="001_c_einstieg_in_c_001.htm#mja24d93ff97bb42dbebf4689160c45195">1 Einstieg in C</a></td>
</tr>
<tr>
<td><a class="navnav" href="002_c_das_erste_programm_001.htm#mj2604a667cc98d3fa2178751273346b91">2 Das erste Programm</a></td>
</tr>
<tr>
<td><a class="navnav" href="003_c_grundlagen_001.htm#mj7ac54ba315b94149806c1de3fc89ee7f">3 Grundlagen</a></td>
</tr>
<tr>
<td><a class="navnav" href="004_c_ein_ausgabe_001.htm#mj20c131820fbfb1497afd796ee443599e">4 Formatierte Ein-/Ausgabe mit »scanf()« und »printf()«</a></td>
</tr>
<tr>
<td><a class="navnav" href="005_c_basisdatentypen_001.htm#mjeda2957449ddc812dad62b400fe57752">5 Basisdatentypen</a></td>
</tr>
<tr>
<td><a class="navnav" href="006_c_operatoren_001.htm#mjab3693b096d581607801a36ce88905fc">6 Operatoren</a></td>
</tr>
<tr>
<td><a class="navnav" href="007_c_typumwandlung_001.htm#mj5c5e497ac2ab4367fe9df0ffd218cfca">7 Typumwandlung</a></td>
</tr>
<tr>
<td><a class="navnav" href="008_c_kontrollstrukturen_001.htm#mjc7bf6f584a2fe20b4c5f6b16ba15d57d">8 Kontrollstrukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="009_c_funktionen_001.htm#mj7893101be51aa469fe52334038acd465">9 Funktionen</a></td>
</tr>
<tr>
<td><a class="navnav" href="010_c_praeprozessor_001.htm#mjacdd200a20163a4d3fa418b6cb95763e">10 Präprozessor-Direktiven</a></td>
</tr>
<tr>
<td><a class="navnav" href="011_c_arrays_001.htm#mje29de26c54a3884f7316cbbb2a073ad8">11 Arrays</a></td>
</tr>
<tr>
<td><a class="navnav" href="012_c_zeiger_001.htm#mjee28a882ef9125d2c4cc49121b2c65c1">12 Zeiger (Pointer)</a></td>
</tr>
<tr>
<td><a class="navnav" href="013_c_kommandozeilenargumente_001.htm#mjf6a9e42fa3bc25b2b1e06270e7bf8f68">13 Kommandozeilenargumente</a></td>
</tr>
<tr>
<td><a class="navnav" href="014_c_dyn_speicherverwaltung_001.htm#mj8d062301d2449b13710f1484d499cd9b">14 Dynamische Speicherverwaltung</a></td>
</tr>
<tr>
<td><a class="navnav" href="015_c_strukturen_001.htm#mj5e146ba18168113a5c645cd2d07c4ec8">15 Strukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="016_c_ein_ausgabe_funktionen_001.htm#mj136f9ac6b5b7c440aafe5010411ef011">16 Ein-/Ausgabe-Funktionen</a></td>
</tr>
<tr>
<td><a class="navnav" href="017_c_dateien_verzeichnisse_001.htm#mj9f81aea722a9edb8d0080df81eb9402c">17 Attribute von Dateien und das Arbeiten mit Verzeichnissen (nicht ANSI C)</a></td>
</tr>
<tr>
<td><a class="navnav" href="018_c_stdarg_h_001.htm#mj9d64febdc46a1375e5c4498b17154e30">18 Arbeiten mit variabel langen Argumentlisten &#8211; &lt;stdarg.h&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="019_c_zeitroutinen_001.htm#mj0a8102e96a1297bd767ac7274e069f0f">19 Zeitroutinen</a></td>
</tr>
<tr>
<td><a class="navnav" href="020_c_headerdateien_001.htm#mjf3caede8ebd504dc6b7454b297c251e8">20 Weitere Headerdateien und ihre Funktionen (ANSI C)</a></td>
</tr>
<tr>
<td><a class="navnav" href="021_c_dyn_datenstrukturen_001.htm#mja75ba2f4ab8f95e9e321d195c1e26d76">21 Dynamische Datenstrukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="022_c_algorithmen_001.htm#mj07afe6f332eab2e8168da2f69f7b31c4">22 Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="023_c_cgi_001.htm#mj6c4219b4e615fa24deaa57d5c3d04db8">23 CGI mit C</a></td>
</tr>
<tr>
<td><a class="navnav" href="024_c_mysql_001.htm#mj12dab301033f9fd856aa739270c45e08">24 MySQL und C</a></td>
</tr>
<tr>
<td><a class="navh" href="##mja8101c6e0e4cb2e6fd8312114dad30d7">25 Netzwerkprogrammierung und Cross&ndash;Plattform-Entwicklung</a></td>
</tr>
<tr>
<td><a class="navnav" href="026_c_paralleles_rechnen_001.htm#mj710dc0ad851d57e60533f8797ff9c1e6">26 Paralleles Rechnen</a></td>
</tr>
<tr>
<td><a class="navnav" href="027_c_sicheres_programmieren_001.htm#mj13eba8f9d68ac8414bffaa3a1b24ec31">27 Sicheres Programmieren</a></td>
</tr>
<tr>
<td><a class="navnav" href="028_c_weiterfuehrendes_001.htm#mj3e65f750149ade087925f303b3871af9">28 Wie geht&#8217;s jetzt weiter?</a></td>
</tr>
<tr>
<td><a class="navnav" href="029_c_anhang_a_001.htm#mjec9bf1c5e3fe2e46047c2f9c7aa9c531">A Operatoren</a></td>
</tr>
<tr>
<td><a class="navnav" href="030_c_anhang_b_001.htm#mj803443bb6e7546011c48e6e57fbdbb64">B Die C-Standard-Bibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download.galileo-press.de/openbook/c_von_a_bis_z/galileocomputing_c_von_a_bis_z.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 10,6 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="025_c_netzwerkprogrammierung_003.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opc3" class="navnav">Galileo Computing</a> / <a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opc3" class="navnav">&lt;openbook&gt;</a> / <a href="index.htm" class="navnav"> C von A bis Z</a></div></td>
<td align="right" width="25%"><div align="right"><a href="025_c_netzwerkprogrammierung_005.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="buchtitel">C von A bis Z</a><span class="autor"> von J&uuml;rgen Wolf </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="navnav"><img src="common/9783836214117.gif" border="0" alt="Buch: C von A bis Z" title="Buch: C von A bis Z"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2132?GPP=opc3"><span class="autor"><strong>C von A bis Z</strong><br>3., aktualisierte und erweiterte Auflage, geb., mit CD und Referenzkarte<br>1.190 S., 39,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1411-7</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="025_c_netzwerkprogrammierung_001.htm#mja8101c6e0e4cb2e6fd8312114dad30d7" class="navnav">25 Netzwerkprogrammierung und Cross&ndash;Plattform-Entwicklung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="025_c_netzwerkprogrammierung_001.htm#mj90de6127e49e7b6bbf3d89d2ba8c8311" class="navnav">25.1 Begriffe zur Netzwerktechnik</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_001.htm#mjbf2a43d33b65132a43d19f18645a3507" class="navnav">25.1.1 IP-Nummern</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_001.htm#mj5f404eca9c0d01debd902d009585193b" class="navnav">25.1.2 Portnummer</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_001.htm#mjacd6910a47d8022594b0fa597b9ab3f8" class="navnav">25.1.3 Host- und Domainname</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_001.htm#mje65054add809c82a6c3835129f775889" class="navnav">25.1.4 Nameserver</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_001.htm#mj4220478b4296d3c39447a3258cefcaa9" class="navnav">25.1.5 Das IP-Protokoll</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_001.htm#mj81ee096acc1c9718166ee6876ceac786" class="navnav">25.1.6 TCP und UDP</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_001.htm#mj026dcf95963c30f3a232837965a8e774" class="navnav">25.1.7 Was sind Sockets?</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="025_c_netzwerkprogrammierung_002.htm#mj1c3afaad9741d42436f997cb72c62d4e" class="navnav">25.2 Headerdateien zur Socketprogrammierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_002.htm#mje3ed53b4dbcbe6752d398d3bef9762f5" class="navnav">25.2.1 Linux/UNIX</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_002.htm#mj73f2f72802f98899435ecc1c087b5cee" class="navnav">25.2.2 Windows</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="025_c_netzwerkprogrammierung_003.htm#mj165406658863029e1d323d48020e3444" class="navnav">25.3 Client/Server-Prinzip</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_003.htm#mj051ed7a117c7e015544542655c23de33" class="navnav">25.3.1 Loopback-Interface</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mj50a66f07dc78c522bbc8a31b18c366a8" class="navh">25.4 Erstellen einer Client-Anwendung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjc55073cb49f2137a6fe9e8565b3f2df6" class="navh">25.4.1 »socket()« &#8211; Erzeugen eines Kommunikationsendpunktes</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj05b1cb6b5680838f16cd08f6544f03e9" class="navh">25.4.2 »connect()« &#8211; ein Client stellt eine Verbindung zum Server her</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjcc31996af428746674c11b815d3e100b" class="navh">25.4.3 Senden und Empfangen von Daten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjc31a705e5811e09dd9d17f20f650bef9" class="navh">25.4.4 »close()« und »closesocket()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="025_c_netzwerkprogrammierung_005.htm#mj80e21e66b25fefd05e8c817719845013" class="navnav">25.5 Erstellen einer Server-Anwendung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_005.htm#mj307c4be8bd53a079d3dfa9958ca909b0" class="navnav">25.5.1 »bind()« &#8211; Festlegen einer Adresse aus dem Namensraum</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_005.htm#mjeab44080a7c8523d7051d181f2d90a21" class="navnav">25.5.2 »listen()« &#8211; Warteschlange für eingehende Verbindungen einrichten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_005.htm#mj23be1797e05d9762113481d3bf7872b7" class="navnav">25.5.3 »accept()« und die Serverhauptschleife</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="025_c_netzwerkprogrammierung_006.htm#mj39436063fa2ddeff09ac910424931c53" class="navnav">25.6 (Cross-Plattform-)TCP-Echo-Server</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_006.htm#mjf73c5c0852491723ed716d490ad51fcf" class="navnav">25.6.1 Der Client</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_006.htm#mj1a65237c3c8e0b3f4f1ec13fa9f7690e" class="navnav">25.6.2 Der Server</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="025_c_netzwerkprogrammierung_007.htm#mj4324a356c575e91bca60629c2b27804d" class="navnav">25.7 Cross-Plattform-Development</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_007.htm#mjf581cbe47f1669ef59195b50a73e8d27" class="navnav">25.7.1 Abstraction Layer</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_007.htm#mj4d9516b91278b259d2de1a0067a197a7" class="navnav">25.7.2 Headerdatei für Linux/UNIX</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_007.htm#mjaa263193e09f067a442b7e85c2dcee63" class="navnav">25.7.3 Linux/UNIX-Quellcodedatei</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_007.htm#mj1bcde194346542bdd880f32877b8509e" class="navnav">25.7.4 Headerdatei für MS-Windows</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_007.htm#mjfd336749a2559387be148a4f62593234" class="navnav">25.7.5 Windows-Quellcodedatei</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_007.htm#mj22ace026a589e96367846d8d2f148ed2" class="navnav">25.7.6 All together &#8211; die »main«-Funktionen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_007.htm#mj111a55df67b579f4ca5d1646d87861f6" class="navnav">25.7.7 Ein UDP-Beispiel</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_007.htm#mje2ffcc22df9d40b6c9fc2747f25ddd89" class="navnav">25.7.8 Mehrere Clients gleichzeitig behandeln</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="025_c_netzwerkprogrammierung_008.htm#mje4f5e780930470d69864797cba7f848d" class="navnav">25.8 Weitere Anmerkungen zur Netzwerkprogrammierung</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_008.htm#mjc2f15fd49c3c1bdbf5dcc2e468f4a50a" class="navnav">25.8.1 Das Datenformat</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_008.htm#mj30ec737d34e86c30e7c368515d30d480" class="navnav">25.8.2 Der Puffer</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_008.htm#mjaa0377d23e112fac5fc45456d8e8c5cf" class="navnav">25.8.3 Portabilität</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_008.htm#mj46218b64e64226323710c041737ff1a5" class="navnav">25.8.4 Von IPv4 nach IPv6</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_008.htm#mjca1db97f014ce88515371d38ad53319d" class="navnav">25.8.5 RFC-Dokumente (Request for Comments)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="025_c_netzwerkprogrammierung_008.htm#mj99c9507713d25e0c8c61aa14fe9acb32" class="navnav">25.8.6 Sicherheit</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mj50a66f07dc78c522bbc8a31b18c366a8" name="mj50a66f07dc78c522bbc8a31b18c366a8"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">25.4</span><span class="cfett"> Erstellen einer Client-Anwendung</span>  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>In diesem Abschnitt geht es darum, was für Funktionen grundlegend verwendet werden, um eine Client-Anwendung zu erstellen.</p><a id="mjc55073cb49f2137a6fe9e8565b3f2df6" name="mjc55073cb49f2137a6fe9e8565b3f2df6"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">25.4.1</span><span class="cfett"> »socket()« &#8211; Erzeugen eines Kommunikationsendpunktes</span>  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Der erste Schritt einer Kommunikationsverbindung &#8211; egal, ob dies auf dem Server oder auf dem Client geschieht &#8211; besteht immer erst einmal darin, einen Socket vom Betriebssystem anzufordern. Dabei ist noch egal, wer mit wem kommunizieren will. Das Erzeugen eines Sockets (Kommunikationsendpunkt) können Sie sich wie das Installieren einer Stromsteckdose vorstellen. Ähnlich wie bei den Stromsteckdosen weltweit, wo es ja auch unterschiedliche Formen und Spannungen gibt, muss auch beim Anlegen eines Sockets angegeben werden, was hier alles »eingesteckt« werden kann. Hierzu sehen Sie zuerst die Syntax der Funktion <span class="clisting">socket()</span> für Linux/UNIX:</p>
<div class="listing"><pre class="prettyprint">#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int socket(int domain, int type, int protocol);</pre></div>
<p>Und hier ist die Syntax für MS-Windows:</p>
<div class="listing"><pre class="prettyprint">#include &lt;winsock.h&gt;

SOCKET socket(int af, int type, int protocol);</pre></div>
<p>Auf beiden Systemen haben diese Funktionen eine fast identische Syntax &#8211; abgesehen vom Rückgabewert, der unter MS-Windows <span class="clisting">SOCKET</span> lautet. Allerdings ist <span class="clisting">SOCKET</span> letztendlich nichts anderes als eine Typdefinition von <span class="clisting">int</span>, und somit könnten Sie in der Praxis hierfür auch <span class="clisting">int</span> verwenden. Als Rückgabewert erhalten Sie bei beiden Versionen den Socket-Deskriptor.</p>
<p>Bei einem Fehler gibt die Linux/UNIX-Version &#8211;1 zurück. Den Fehler können Sie mit dem Fehlercode von <span class="clisting">errno</span> auswerten (beispielsweise mit <span class="clisting">perror()</span> oder <span class="clisting">strerror()</span>).</p>
<p>Unter MS-Windows wird bei einem Fehler die Konstante <span class="clisting">SOCKET_ERROR</span> (ebenfalls mit &#8211;1 definiert) zurückgegeben. Hierbei können Sie den Fehlercode mit der Funktion <span class="clisting">WSAGetLastError()</span> ermitteln.</p>
<p>Mit dem ersten Parameter <span class="clisting">domain</span> bzw. <span class="clisting">af</span> geben Sie die Adressfamilie (d.  h. die Protokollfamilie) an, die Sie verwenden wollen. Eine komplette Liste aller auf Ihrem System unterstützten Protokolle finden Sie in der Headerdatei <span class="ckursiv">&lt;sys/socket.h&gt;</span>. Tabelle 25.1 enthält einen Überblick zu den gängigeren und häufiger verwendeten Protokollen.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<caption class="tabunter"><p class="ptabunter"><strong>Tabelle 25.1    </strong>Einige gängige Adressfamilien</p>
</caption>
<tr>
<td class="tabellenkopf"><span class="cfett">Adressfamilie</span>
</td>
<td class="tabellenkopf"><span class="cfett">Bedeutung</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">AF_UNIX</pre></div>
</td>
<td class="tabellentext">
<p>UNIX Domain Sockets; wird gewöhnlich für lokale Interprozesskommunikation verwendet.</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">AF_INET</pre></div>
</td>
<td class="tabellentext">
<p>Internet IP-Protokoll Version 4 (IPv4)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">AF_INET6</pre></div>
</td>
<td class="tabellentext">
<p>Internet IP-Protokoll Version 6 (IPv6)</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">AF_IRDA</pre></div>
</td>
<td class="tabellentext">
<p>IRDA-Sockets; beispielsweise via Infarot</p>
</td>
</tr>
<tr>
<td class="tabellentext">
<div class="listing"><pre class="prettyprint">AF_BLUETOOTH</pre></div>
</td>
<td class="tabellentext">
<p>Bluetooth-Sockets</p>
</td>
</tr>
</table><br><p>Mit dem zweiten Parameter der Funktion <span class="clisting">socket()</span> geben Sie den Socket-Typ an. Damit legen Sie die Übertragungsart der Daten fest. Für Sie sind hierbei erst einmal nur die symbolischen Konstanten <span class="clisting">SOCK_STREAM</span> für TCP und <span class="clisting">SOCK_DGRAM</span> für UDP interessant.</p>
<p>Mit dem dritten Parameter können Sie ein Protokoll angeben, das Sie zur Übertragung verwenden wollen. Wenn Sie hierfür 0 eintragen, was meistens der Fall ist, wird das Standardprotokoll verwendet, das dem gewählten Socket-Typ (zweiter Parameter) entspricht. Im Fall von <span class="clisting">SOCK_STREAM</span> wird TCP und bei <span class="clisting">SOCK_DGRAM</span> wird UDP verwendet. Weitere mögliche Werte, ohne jetzt genauer darauf einzugehen, wären hierbei <span class="clisting">IPPROTO_TCP</span> (TCP-Protokoll), <span class="clisting">IPPROTO_UDP</span> (UDP-Protokoll), <span class="clisting">IPPROTO_ICMP</span> (ICMP-Protokoll) und <span class="clisting">IPPROTO_RAW</span> (wird bei Raw-Sockets verwendet). Wenn Sie allerdings beispielsweise für den Socket-Typ <span class="clisting">SOCK_STREAM</span> angegeben haben und das TCP-Protokoll verwenden wollen, müssen Sie nicht extra noch beim dritten Parameter <span class="clisting">IPPROTO_TCP</span> angeben. Mit der Angabe von 0 wird dieses Protokoll standardmäßig verwendet.</p>
<p>Somit sieht das Anfordern eines Sockets folgendermaßen aus:</p>
<div class="listing"><pre class="prettyprint">    // Erzeuge das Socket - Verbindung über TCP/IP
    sock = socket( AF_INET, SOCK_STREAM, 0 );
    if (sock &lt; 0) {
        // Fehler beim Erzeugen des Sockets
    }</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Hinweis</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Damit hier keine Missverständnisse entstehen: Das Erzeugen eines Sockets muss auch auf der Serverseite durchgeführt werden. Womit sonst, wenn nicht über Sockets, will sich ein Client mit dem Server unterhalten?</p>
</td>
</tr>
</table><br><a id="mj05b1cb6b5680838f16cd08f6544f03e9" name="mj05b1cb6b5680838f16cd08f6544f03e9"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">25.4.2</span><span class="cfett"> »connect()« &#8211; ein Client stellt eine Verbindung zum Server her</span>  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Nachdem mit den Sockets die Kommunikationsendpunkte erzeugt wurden, kann der Client nun versuchen, eine Verbindung zum Server-Socket herzustellen. Dies wird mit der Funktion <span class="clisting">connect()</span> versucht, die unter Linux/UNIX folgende Syntax hat:</p>
<div class="listing"><pre class="prettyprint">#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int connect (
   int socket,
   const struct sockaddr *addr,
   int addrlen
);</pre></div>
<p>Unter MS-Windows lautet die Syntax so:</p>
<div class="listing"><pre class="prettyprint">#include &lt;winsock.h&gt;

int connect (
   SOCKET s,
   const struct sockaddr FAR* addr,
   int addrlen
);</pre></div>
<p>Auch hier unterscheidet sich die Syntax nicht erheblich voneinander, und auch die Bedeutungen der einzelnen Parameter sind wieder dieselben. Bei einer erfolgreichen Ausführung geben beide Funktionen 0, ansonsten bei einem Fehler &#8211;1 (gleichwertig unter MS-Windows mit <span class="clisting">SOCKET_ERROR</span>) zurück. Den Fehler können Sie auch hier wieder mit der Fehlervariablen <span class="clisting">errno</span> (unter Linux/UNIX) oder mit der Funktion <span class="clisting">WSAGetLastError()</span> (unter MS-Windows) ermitteln.</p>
<p>Als erster Parameter wird der Socket-Deskriptor erwartet, über den Sie die Verbindung herstellen wollen. Dies ist der Rückgabewert, den Sie von der Funktion <span class="clisting">socket()</span> erhalten haben.</p>
<p>Um eine Verbindung zu einem anderen Rechner aufzubauen, werden logischerweise auch Informationen über die Adresse benötigt, mit der sich der Client verbinden will. Die Adressinformationen über den gewünschten Verbindungspartner tragen Sie im zweiten Parameter der Funktion <span class="clisting">connect()</span> ein. Um sich mit dem Server zu verbinden, benötigen Sie Informationen über die Adressfamilie (Protokollfamilie), die Portnummer und logischerweise die IP-Adresse. Eingetragen werden diese Informationen mit dem zweiten Parameter der Struktur <span class="clisting">sockaddr</span>, die folgendermaßen definiert ist:</p>
<div class="listing"><pre class="prettyprint">struct sockaddr {
   sa_family_t sa_family; // Adressfamilie AF_XXX
   char sa_data[14];      // Protokolladresse (IP-Nr. und Portnr.)
 };</pre></div>
<p>Da diese Struktur allerdings recht umständlich auszufüllen ist, wurde für              IP-Anwendungen eine spezielle Struktur eingeführt, mit der es möglich ist,        die IP-Nummer und die Portnummer getrennt einzutragen:</p>
<div class="listing"><pre class="prettyprint">struct sockaddr_in {
   sa_family sin_family;          // Adressfamilie AF_XXX
   unsigned short int sin_port;   // Portnummer
   struct in_addr sin_addr;       // IP-Adresse
   unsigned char pad[8];          // Auffüllbytes für sockaddr
 };</pre></div>
<p>Da beide Strukturen im Speicher gleichwertig sind, reicht es aus, eine einfache Typumwandlung bei <span class="clisting">connect()</span> vorzunehmen. Mit dem letzten Parameter (<span class="clisting">addrlen</span>) von <span class="clisting">connect()</span> geben Sie die Länge in Bytes von <span class="clisting">sockaddr</span> mit dem <span class="clisting">sizeof-</span>Operator an.</p>
<h4 class="t4"><span class="cfett">Ausfüllen von »sockaddr_in«</span></h4>
<p>In der Strukturvariablen <span class="clisting">sin_family</span> geben Sie die Adressfamilie (Protokollfamilie) an, mit der Sie kommunizieren wollen. Gewöhnlich gibt man hierfür dieselbe Familie an, wie schon beim ersten Parameter der Funktion <span class="clisting">socket()</span>.</p>
<p>In <span class="clisting">sin_port</span> geben Sie die Portnummer an, über die Sie mit dem Server in Kontakt treten wollen. Wichtig ist hierbei, dass Sie den Wert in der <span class="ckursiv">Network Byte Order</span> angeben. Es genügt also nicht, wenn Sie sich beispielsweise mit einem Webserver verbinden wollen, als Portnummer einfach 80 hinzuschreiben. Sie müssen hierbei auch auf die verschiedenen Architekturen Rücksicht nehmen, die es in heterogenen Netzwerken gibt. Denn auf den verschiedenen Architekturen gibt es unterschiedliche Anordnungen der Bytes zum Speichern von Zahlen. So wird bei der Anordnung gewöhnlich zwischen Big Endian und Little Endian unterschieden. Man spricht dabei gern vom »Zahlendreher«. Beim <span class="ckursiv">Big Endian</span>-Format wird das höchstwertige Byte an der niedrigsten Adresse gespeichert, das zweithöchste an der nächsten Adresse und so weiter. Bei der Anordnung von <span class="ckursiv">Little Endian</span> ist dies genau umgekehrt. Dabei wird das niedrigstwertige Byte an der niedrigsten Stelle gespeichert, das zweitniedrigste an der nächsten Stelle usw.</p>
<p>Um jetzt aus einer lokal verwendeten Byte-Reihenfolge (<span class="ckursiv">Host Byte Order</span>) eine <span class="ckursiv">Network-Byte-Order</span>-Reihenfolge oder umgekehrt zu konvertieren, stehen Ihnen die folgenden vier Funktionen zur Verfügung:</p>
<div class="listing"><pre class="prettyprint">#include &lt;netinet/in.h&gt;

// Rückgabe : network-byte-order
// Parameter: host-byte-order
unsigned short int htons(unsigned short int hostshort);

// Rückgabe : network-byte-order
// Parameter: host-byte-order
unsigned long int htonl(unsigned long int hostlong);

// Rückgabe  :  host-byte-order
// Parameter : network-byte-order
unsigned short int ntohs(unsigned short int netshort);

// Rückgabe :  host-byte-order
// Parameter : network-byte-order
unsigned long int ntohl(unsigned long int netlong);</pre></div>
<p>Nicht jeder kennt allerdings die entsprechenden Portnummern zum entsprechenden Dienst. Hierbei kann die Funktion <span class="clisting">getservbyname()</span> helfen. Dieser Funktion übergeben Sie den Namen eines Dienstes und das Transportprotokoll als Parameter. Anschließend sucht <span class="clisting">getservbyname()</span> in einer speziellen Datei nach einem Eintrag, der dazu passt, und gibt die Portnummer zurück. Hierfür gibt es eine spezielle Struktur in der Headerdatei <span class="clisting">&lt;netdb.h&gt;</span> , mit der Sie an die Informationen zu den entsprechenden Diensten kommen:</p>
<div class="listing"><pre class="prettyprint">struct servent {
   char *s_name;      // offizieller Name vom Service
   char **s_aliases;  // Alias-Liste
   int  s_port;       // Portnummer zum Servicenamen
   char *s_proto;     // verwendetes Protokoll
};</pre></div>
<p>Eine kurze Beschreibung der einzelnen Strukturvariablen:</p>
<ul class="gp">
<li><span class="clisting">s_name</span> &#8211; offizieller Servicename</li>
</ul>
<ul class="gp">
<li><span class="clisting">s_aliases</span> &#8211; Ein Stringarray mit eventuellen Aliasnamen zum Service, falls vorhanden. Das letzte Element in der Liste ist <span class="clisting">NULL</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">s_port</span> &#8211; die Portnummer zum Servicenamen</li>
</ul>
<ul class="gp">
<li><span class="clisting">s_proto</span> &#8211; der Name des zu verwendenden Protokolls</li>
</ul>
<p>Die Syntax von <span class="clisting">getservbyname()</span> lautet:</p>
<div class="listing"><pre class="prettyprint">#include &lt;netdb.h&gt;

struct servent *getservbyname ( const char *name,
                                const char *proto );</pre></div>
<p>Wenn Sie den Dienst <span class="clisting">name</span> und das Protokoll <span class="clisting">proto</span> angeben, liefert Ihnen diese Funktion bei Erfolg eine Adresse auf die Information in <span class="clisting">struct servent</span>. Bei einem Fehler wird <span class="clisting">NULL</span> zurückgegeben.</p>
<p>Die IP-Adresse geben Sie in der Strukturvariablen <span class="clisting">sin_addr</span> an. Allerdings wird auch hier die <span class="ckursiv">Network-Byte-Order</span>-Reihenfolge erwartet. Hierbei ist uns allerdings die Funktion <span class="clisting">inet_addr()</span> (oder die etwas sicherere Alternative <span class="clisting">inet_aton()</span>) behilflich. Hierbei können Sie die IP-Adresse als String angeben und bekommen einen für <span class="clisting">sin_addr</span> benötigten 32-Bit Wert in <span class="ckursiv">Network Byte Order</span> zurück.</p>
<p>Wenn der Client den Dienst eines Servers verwenden will, muss jenem natürlich dessen IP-Adresse bekannt sein. Meistens gibt ein Endanwender aber als Adresse den Rechnernamen anstatt der IP-Adresse an, da dieser einfacher zu merken ist. Damit also ein Client aus dem Rechnernamen (beispielsweise www.google.de) eine IP-Adresse (216.239.59.99) erhält, wird die Funktion <span class="clisting">gethostbyname()</span> verwendet.</p>
<div class="listing"><pre class="prettyprint">#include &lt;netdb.h&gt;

struct hostent *gethostbyname(const char *rechnername);</pre></div>
<p>Um also aus einem Rechnernamen eine IP-Adresse und weitere Informationen zu ermitteln, steht ein sogenannter Nameserver zur Verfügung &#8211; dieser Rechner ist für die Umsetzung zwischen Rechnernamen und IP-Nummern zuständig. Selbst auf Ihrem Rechner finden Sie solche Einträge der lokalen IP-Nummern in der Datei <span class="ckursiv">/etc/hosts</span> hinterlegt. Im Internet hingegen werden diese Daten in einer eigenen Datenbank gehalten. Um solche Informationen zu den einzelnen Rechnern zu erhalten, ist in der Headerdatei <span class="ckursiv">&lt;netdb.h&gt;</span> folgende Struktur definiert:</p>
<div class="listing"><pre class="prettyprint">struct hostent {
   char *  h_name;
   char ** h_aliases;
   short   h_addrtype;
   short   h_length;
   char ** h_addr_list;
 };</pre></div>
<p>Eine kurze Beschreibung der einzelnen Strukturvariablen:</p>
<ul class="gp">
<li><span class="clisting">h_name</span> &#8211; offizieller Name des Rechners.</li>
</ul>
<ul class="gp">
<li><span class="clisting">h_aliases</span> &#8211; ein Stringarray, in dem sich eventuell vorhandene Aliasnamen befinden. Das letzte Element ist immer <span class="clisting">NULL</span>.</li>
</ul>
<ul class="gp">
<li><span class="clisting">h_addrtyp</span> &#8211; Hier steht der Adresstyp, was gewöhnlich <span class="clisting">AF_INET</span> für IPv4 ist.</li>
</ul>
<ul class="gp">
<li><span class="clisting">h_length</span> &#8211; Hier findet sich die Länge der numerischen Adresse.</li>
</ul>
<ul class="gp">
<li><span class="clisting">h_addr_list</span> &#8211; Hierbei handelt es sich um ein Array von Zeigern auf die Adressen für den entsprechenden Rechner.</li>
</ul>
<p>Die Funktion <span class="clisting">gethostbyname()</span> gibt bei Erfolg einen Zeiger auf <span class="clisting">struct hostent</span> des gefundenen Rechners zurück, ansonsten bei einem Fehler <span class="clisting">NULL</span>. Die letzte Strukturvariable <span class="clisting">pad</span> in der Struktur <span class="clisting">sockaddr_in</span> wird lediglich als Lückenfüller verwendet, um <span class="clisting">sockaddr_in</span> auf die Größe von <span class="clisting">sockaddr</span> aufzufüllen.</p>
<p>Wenn Sie jetzt alle Strukturvariablen der Struktur <span class="clisting">sockaddr_in</span> mit Werten belegt haben, können Sie die Funktion <span class="clisting">connect()</span> aufrufen und bei stehender (erfolgreicher) Verbindung Daten austauschen (senden und empfangen).</p>
<p>Hier folgt ein Codeausschnitt, der zeigt, wie ein »Auffüllen« der Struktur <span class="clisting">sockaddr_in</span> und der anschließende Aufruf der Funktion <span class="clisting">connect()</span> vonstatten geht. Im Beispiel wird versucht, sich mit einem Webserver (Port 80; HTTP) zu verbinden, dessen IP-Adresse Sie als Argument in der Kommandozeile übergeben haben.</p>
<div class="listing"><pre class="prettyprint">struct sockaddr_in server;
unsigned long addr;
...
// Alternative zu memset() -&gt; bzero()
memset( &amp;server, 0, sizeof (server));

addr = inet_addr( argv[1] );
memcpy( (char *)&amp;server.sin_addr, &amp;addr, sizeof(addr));
server.sin_family = AF_INET;
server.sin_port = htons(80);
...
// Baue die Verbindung zum Server auf.
if (connect(sock,(struct sockaddr*)&amp;server, sizeof(server)) &lt; 0){
        // Fehler beim Verbindungsaufbau ...
    }</pre></div><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Hinweis</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Wenn Sie UDP anstatt TCP verwenden, können Sie auf einen Aufruf von <span class="clisting">connect()</span> verzichten. Dann allerdings müssen Sie die entsprechende Adressinformation bei den Funktionen <span class="clisting">sendto()</span> zum Senden und <span class="clisting">recvfrom()</span> zum Empfangen von Daten ergänzen.</p>
</td>
</tr>
</table><br><a id="mjcc31996af428746674c11b815d3e100b" name="mjcc31996af428746674c11b815d3e100b"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">25.4.3</span><span class="cfett"> Senden und Empfangen von Daten</span>  <a href="#t2t35"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Nachdem Sie sich erfolgreich mit dem Server verbunden haben, können Sie anfangen, Daten an den Server zu senden bzw. Daten zu empfangen. Hierzu gibt es jeweils für TCP und UDP ein Funktionspaar. Es war ja schon einmal die Rede davon, dass man mit Sockets ähnlich wie bei Dateien mit Filedeskriptoren arbeiten kann. Und in der Tat, unter Linux/UNIX kann der Austausch von Daten über Sockets auch mit den Systemcalls <span class="clisting">read()</span> und <span class="clisting">write()</span> stattfinden. Allerdings ist dies unter MS-Windows erst ab den Versionen NT/2000/XP mit den Funktionen <span class="clisting">ReadFile()</span> und <span class="clisting">WriteFile()</span> möglich.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Hinweis</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Natürlich gilt auch hier, dass die Funktionen zum Senden und Empfangen nicht nur für die Clients, sondern auch für die Serveranwendung gelten.</p>
</td>
</tr>
</table><br><h4 class="t4"><span class="cfett">»send()« und »recv()« &#8211; TCP</span></h4>
<p>Zum Senden von Daten von einem Socket an den Stream wird gewöhnlich die Funktion <span class="clisting">send()</span> verwendet, die unter Linux/UNIX folgende Syntax besitzt:</p>
<div class="listing"><pre class="prettyprint">#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

ssize_t send ( int socketfd, const void *data,
               size_t data_len, unsigned int flags );</pre></div>
<p>Unter MS-Windows mit Winsock sieht die Syntax wieder ähnlich aus:</p>
<div class="listing"><pre class="prettyprint">#include &lt;winsock.h&gt;

int send ( SOCKET s, const char FAR* data,
           int data_len, int flags );</pre></div>
<p>Wenn Sie diese Funktion mit <span class="clisting">write()</span> vergleichen, können Sie Parallelen ziehen. Mit dem ersten Parameter geben Sie den Socket-Deskriptor an, über den Sie die Daten senden wollen. Im zweiten Parameter wird ein Zeiger auf den Speicherbereich erwartet, in dem sich die Daten befinden. Die Größe des Speicherbereichs geben Sie mit dem dritten Parameter an. Mit dem letzten Parameter können Sie das Verhalten von <span class="clisting">send()</span> noch beeinflussen. Wird hierbei 0 angegeben, verhält sich <span class="clisting">send()</span> wie die Systemfunktion <span class="clisting">write()</span> zum Schreiben. Ansonsten wäre beispielsweise die symbolische Konstante <span class="clisting">MSG_OOP</span> ein häufig verwendeter Wert, mit dem »Out-of-band«-Daten gesendet werden können. Weitere <span class="clisting">flags</span> entnehmen Sie bitte wieder aus der entsprechenden Dokumentation (beispielsweise der Manual-Page) &#8211; da ich hierauf nicht näher eingehe.</p>
<p>Im Falle eines Fehlers liefert <span class="clisting">send()</span> &#8211;1 (was unter MS-Windows gleichwertig zur Konstante <span class="clisting">SOCKET_ERROR</span> ist) zurück. Welcher Fehler auftrat, lässt sich wieder mit den üblichen betriebssystembedingten Routinen überprüfen (<span class="clisting">errno</span> unter Linux/UNIX und <span class="clisting">WSAGetLastError()</span> unter MS-Windows).</p>
<p>Auch wenn kein Fehler auftritt, ist es dennoch sehr wichtig, den Rückgabewert zu überprüfen. Denn bei der Netzwerkprogrammierung sind auch gewisse Grenzen (Bandbreite) vorhanden &#8211; sprich, Sie können nicht unendlich viele Daten auf einmal versenden. Mit der Auswertung des Rückgabewerts können bzw. müssen Sie sich selbst darum kümmern, dass der eventuelle Rest, der nicht gesendet werden konnte, ebenfalls noch verschickt wird. Dies erledigen Sie, indem Sie <span class="clisting">data_len</span> mit dem Rückgabewert von <span class="clisting">send()</span> vergleichen. Durch diese Differenz (<span class="clisting">data_len</span> &#8211; <span class="ckursiv">Rückgabewert</span>) erhalten Sie die noch nicht gesendeten Daten.</p>
<p>Um Daten von einem Stream-Socket zu empfangen (zu lesen), wird die Funktion <span class="clisting">recv()</span> verwendet. Die Syntax unter Linux/UNIX lautet:</p>
<div class="listing"><pre class="prettyprint">#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

ssize_t recv ( int socketfd, void *data ,
               size_t data_len, unsigned int flags );</pre></div>
<p>Und die Syntax unter MS-Windows ist:</p>
<div class="listing"><pre class="prettyprint">#include &lt;winsock.h&gt;

int recv (SOCKET s, char FAR* data,  int data_len,  int flags);</pre></div>
<p>Auch hier lassen sich mit Ausnahme des letzten Parameters wieder Parallelen zur Systemfunktion <span class="clisting">read()</span> ziehen. Der erste Parameter ist wieder der Socket-Deskriptor der Verbindung, gefolgt von einem Zeiger auf einen Puffer, in den die Daten gelegt werden sollen. Die Länge des Puffers geben Sie mit dem dritten Parameter an, und mit den Flags können Sie das Verhalten von <span class="clisting">recv()</span> beeinflussen. Eine Angabe von 0 bedeutet auch hier, dass sich <span class="clisting">recv()</span> wie die Funktion <span class="clisting">read()</span> verhält. Ansonsten wird auch hierbei gern die Konstante <span class="clisting">MSG_OOP</span> (für »Out-of-band«-Daten, die gelesen werden können) und <span class="clisting">MSG_PEEK</span> verwendet. Mit <span class="clisting">MSG_PEEK</span> können Daten erneut gelesen werden. Zu weiteren möglichen <span class="clisting">flags</span> sollten Sie bei Bedarf die entsprechende Dokumentation lesen (beispielsweise die Manual-Page).</p>
<p>Im Falle eines Fehlers gilt dasselbe wie schon bei der Funktion <span class="clisting">send()</span>. Außerdem kann die Funktion <span class="clisting">recv()</span> auch 0 zurückgeben. Dies bedeutet dann, dass der Verbindungspartner seine Verbindung beendet hat. Ansonsten wird auch mit <span class="clisting">recv()</span> die Anzahl der erfolgreich gelesenen Bytes zurückgeliefert.</p>
<h4 class="t4"><span class="cfett">»sendto()« und »recvfrom()« &#8211; UDP</span></h4>
<p>Für die Funktionen zum Senden und Empfangen von Datagrammen (UDP-Sockets) werden vorzugsweise <span class="clisting">sendto()</span> und <span class="clisting">recvfrom()</span> verwendet. Die Syntax unter Linux/UNIX lautet:</p>
<div class="listing"><pre class="prettyprint">#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

ssize_t  recvfrom( int  s,  void  *buf,  size_t  len,
                   int flags, struct sockaddr *from,
                   socklen_t   *fromlen );

ssize_t  sendto( int  s,  const  void  *msg,  size_t  len,
                 int  flags, const struct sockaddr *to,
                 socklen_t tolen );</pre></div>
<p>Und es gibt eine entsprechende ähnliche Syntax unter MS-Windows:</p>
<div class="listing"><pre class="prettyprint">#include &lt;winsock.h&gt;

int sendto( SOCKET s, const char FAR * buf,  int len,
            int flags, const struct sockaddr FAR * to,
            int tolen );

int recvfrom( SOCKET s, char FAR* buf, int len,
              int flags,  struct sockaddr FAR* from,
              int FAR* fromlen );</pre></div>
<p>Die Bedeutung der einzelnen Parameter sowie des Rückgabewerts entspricht exakt der von den TCP-Gegenstücken <span class="clisting">send()</span> und <span class="clisting">recv()</span>. Hinzugekommen hingegen sind am Ende zwei weitere Parameter. Mit dem fünften Parameter übergeben Sie einen Zeiger auf die Adresse des Zielrechners (bei <span class="clisting">sendto()</span>) bzw. einen Zeiger auf die Adresse des Absenders (bei <span class="clisting">recvfrom()</span>). Die Angaben entsprechen dabei dem Parameter <span class="clisting">sockaddr</span> von der Funktion <span class="clisting">connect()</span>. Mit dem letzten Parameter beider Funktionen geben Sie wieder die Größe der Struktur <span class="clisting">sockaddr</span> an.</p>
<p>Sollten Sie bei einer UDP-Verbindung die <span class="clisting">connect()</span>-Funktion verwenden, können Sie auch die Funktionen <span class="clisting">send()</span> und <span class="clisting">revc()</span> verwenden. In diesem Fall werden die fehlenden Informationen zur Adresse automatisch ergänzt.</p><a id="mjc31a705e5811e09dd9d17f20f650bef9" name="mjc31a705e5811e09dd9d17f20f650bef9"></a><a name="t34"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t35"></a><h3 class="t3"><span class="cfett">25.4.4</span><span class="cfett"> »close()« und »closesocket()«</span>  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t34"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Sobald Sie mit der Datenübertragung fertig sind, sollten Sie den Socket-Deskriptor wieder freigeben bzw. schließen. Unter Linux/UNIX können Sie hierbei, wie beim Lesen und/oder Schreiben einer Datei, ein simples <span class="clisting">close()</span> verwenden:</p>
<div class="listing"><pre class="prettyprint">#include &lt;unistd.h&gt;

int close(int s);</pre></div>
<p>Unter MS-Windows hingegen wird hierbei die Funktion <span class="clisting">closesocket()</span> verwendet, die letztendlich, abgesehen von ihrem anderen Namen, dieselbe Wirkung erzielt wie ein <span class="clisting">close()</span> unter Linux/UNIX.</p>
<div class="listing"><pre class="prettyprint">#include &lt;winsock.h&gt;

int closesocket( SOCKET s);</pre></div>
<p>Beide Funktionen erwarten als Parameter den zu schließenden Socket-Deskriptor und geben bei Erfolg 0, ansonsten bei einem Fehler &#8211;1 (gleichwertig zu <span class="clisting">SOCKET_ERROR</span> unter MS-Windows) zurück. Auch hierbei können Sie den Fehler anhand von <span class="clisting">errno</span> (Linux/UNIX) oder der Funktion <span class="clisting">WSAGetLastError()</span> (MS-Windows) ermitteln. Ein Aufruf von <span class="clisting">close()</span> bzw. <span class="clisting">closesocket()</span> beendet außerdem eine TCP-Verbindung sofort.</p><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="http://openbook.galileocomputing.de/c_von_a_bis_z/025_c_netzwerkprogrammierung_004.htm"><input type="hidden" name="buchtitel" value="C von A bis Z"><input type="hidden" name="Kapitel" value="25.4 Erstellen einer Client-Anwendung"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="025_c_netzwerkprogrammierung_003.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="025_c_netzwerkprogrammierung_005.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">&nbsp;&nbsp;</td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/?GPP=opc3" class="nav">
<strong>Zum Katalog</strong></a>
</td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2132?GPP=opc3">
<img src="common/9783836214117_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C von A bis Z" title="Zum Katalog: C von A bis Z">
<br /><br /><strong>&nbsp;C von A bis Z</strong><br /><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt&nbsp;bestellen</a><br /><br />
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2"><a href="#kommentar" class="nav"><strong>&nbsp;Ihre Meinung?</strong></a>
</td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br /><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br /><br /></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/?GPP=opc3" class="nav"><strong>Buchtipps</strong></a></td>
</tr>
<tr> 
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2083?GPP=opc3">
<img src="common/9783836213851_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in C++" title="Zum Katalog: Einstieg in C++"><br /><br /><br /><br /><br /><br /><br />&nbsp;Einstieg in C++</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opc3">
<img src="common/9783836214292_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br /><br /><br /><br /><br /><br /><br />&nbsp;C++ von A bis Z</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1299?GPP=opc3">
<img src="common/9783898428392_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C/C++" title="Zum Katalog: C/C++"><br /><br /><br /><br /><br /><br /><br />&nbsp;C/C++</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1712?GPP=opc3">
<img src="common/9783836211574_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Shell-Programmierung" title="Zum Katalog: Shell-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Shell-Programmierung</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2049?GPP=opc3">
<img src="common/9783836213660_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Linux-UNIX-Programmierung" title="Zum Katalog: Linux-UNIX-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Linux-UNIX-<br />&nbsp;Programmierung</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2138?GPP=opc3">
<img src="common/9783836214209_s.gif" width="107" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: IT-Handbuch für Fachinformatiker" title="Zum Katalog: IT-Handbuch für Fachinformatiker"><br /><br /><br /><br /><br /><br /><br />&nbsp;IT-Handbuch für <br />&nbsp;Fachinformatiker</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2165?GPP=opc3">
<img src="common/9783836214391_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Ubuntu GNU/Linux" title="Zum Katalog: Ubuntu GNU/Linux"><br /><br /><br /><br /><br /><br /><br />&nbsp;Ubuntu GNU/Linux</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1628?GPP=opc3">
<img src="common/9783836211161_s.gif" width="117" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Coding for Fun" title="Zum Katalog: Coding for Fun"><br /><br /><br /><br /><br /><br /><br /><br />&nbsp;Coding for Fun&nbsp;</a><br /><br /></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2"><strong>&nbsp;Shopping</strong></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br /><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opc3"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br /><br /></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2009</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
