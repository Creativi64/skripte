<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: C von A bis Z &ndash; 11.11 Strings/Zeichenketten (»char«-Array)</title>
<meta name="title" content="Galileo Computing :: C von A bis Z - 11.11 Strings/Zeichenketten (»char«-Array)">
<meta name="author" content="J&uuml;rgen Wolf ">
<meta name="publisher" content="Galileo Press 2009">
<meta name="copyright" content="Galileo Press 2009">
<meta name="Description" content="C von A bis Z - Das umfassende Handbuch &ndash; 11.11 Strings/Zeichenketten (»char«-Array)">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href="011_c_arrays_010.htm">
<link rel="next" href="011_c_arrays_012.htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opc3"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opc3"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opc3" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="000_c_vorwort_001.htm#mj764cb3fd439d3b95d1843e7c7d17f235">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="000_c_vorwort_gutachter_001.htm#mj3d41cb339c9b2fc1d6e99cdaa93c3860">Vorwort des Gutachters</a></td>
</tr>
<tr>
<td><a class="navnav" href="001_c_einstieg_in_c_001.htm#mja24d93ff97bb42dbebf4689160c45195">1 Einstieg in C</a></td>
</tr>
<tr>
<td><a class="navnav" href="002_c_das_erste_programm_001.htm#mj2604a667cc98d3fa2178751273346b91">2 Das erste Programm</a></td>
</tr>
<tr>
<td><a class="navnav" href="003_c_grundlagen_001.htm#mj7ac54ba315b94149806c1de3fc89ee7f">3 Grundlagen</a></td>
</tr>
<tr>
<td><a class="navnav" href="004_c_ein_ausgabe_001.htm#mj20c131820fbfb1497afd796ee443599e">4 Formatierte Ein-/Ausgabe mit »scanf()« und »printf()«</a></td>
</tr>
<tr>
<td><a class="navnav" href="005_c_basisdatentypen_001.htm#mjeda2957449ddc812dad62b400fe57752">5 Basisdatentypen</a></td>
</tr>
<tr>
<td><a class="navnav" href="006_c_operatoren_001.htm#mjab3693b096d581607801a36ce88905fc">6 Operatoren</a></td>
</tr>
<tr>
<td><a class="navnav" href="007_c_typumwandlung_001.htm#mj5c5e497ac2ab4367fe9df0ffd218cfca">7 Typumwandlung</a></td>
</tr>
<tr>
<td><a class="navnav" href="008_c_kontrollstrukturen_001.htm#mjc7bf6f584a2fe20b4c5f6b16ba15d57d">8 Kontrollstrukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="009_c_funktionen_001.htm#mj7893101be51aa469fe52334038acd465">9 Funktionen</a></td>
</tr>
<tr>
<td><a class="navnav" href="010_c_praeprozessor_001.htm#mjacdd200a20163a4d3fa418b6cb95763e">10 Präprozessor-Direktiven</a></td>
</tr>
<tr>
<td><a class="navh" href="##mje29de26c54a3884f7316cbbb2a073ad8">11 Arrays</a></td>
</tr>
<tr>
<td><a class="navnav" href="012_c_zeiger_001.htm#mjee28a882ef9125d2c4cc49121b2c65c1">12 Zeiger (Pointer)</a></td>
</tr>
<tr>
<td><a class="navnav" href="013_c_kommandozeilenargumente_001.htm#mjf6a9e42fa3bc25b2b1e06270e7bf8f68">13 Kommandozeilenargumente</a></td>
</tr>
<tr>
<td><a class="navnav" href="014_c_dyn_speicherverwaltung_001.htm#mj8d062301d2449b13710f1484d499cd9b">14 Dynamische Speicherverwaltung</a></td>
</tr>
<tr>
<td><a class="navnav" href="015_c_strukturen_001.htm#mj5e146ba18168113a5c645cd2d07c4ec8">15 Strukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="016_c_ein_ausgabe_funktionen_001.htm#mj136f9ac6b5b7c440aafe5010411ef011">16 Ein-/Ausgabe-Funktionen</a></td>
</tr>
<tr>
<td><a class="navnav" href="017_c_dateien_verzeichnisse_001.htm#mj9f81aea722a9edb8d0080df81eb9402c">17 Attribute von Dateien und das Arbeiten mit Verzeichnissen (nicht ANSI C)</a></td>
</tr>
<tr>
<td><a class="navnav" href="018_c_stdarg_h_001.htm#mj9d64febdc46a1375e5c4498b17154e30">18 Arbeiten mit variabel langen Argumentlisten &#8211; &lt;stdarg.h&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="019_c_zeitroutinen_001.htm#mj0a8102e96a1297bd767ac7274e069f0f">19 Zeitroutinen</a></td>
</tr>
<tr>
<td><a class="navnav" href="020_c_headerdateien_001.htm#mjf3caede8ebd504dc6b7454b297c251e8">20 Weitere Headerdateien und ihre Funktionen (ANSI C)</a></td>
</tr>
<tr>
<td><a class="navnav" href="021_c_dyn_datenstrukturen_001.htm#mja75ba2f4ab8f95e9e321d195c1e26d76">21 Dynamische Datenstrukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="022_c_algorithmen_001.htm#mj07afe6f332eab2e8168da2f69f7b31c4">22 Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="023_c_cgi_001.htm#mj6c4219b4e615fa24deaa57d5c3d04db8">23 CGI mit C</a></td>
</tr>
<tr>
<td><a class="navnav" href="024_c_mysql_001.htm#mj12dab301033f9fd856aa739270c45e08">24 MySQL und C</a></td>
</tr>
<tr>
<td><a class="navnav" href="025_c_netzwerkprogrammierung_001.htm#mja8101c6e0e4cb2e6fd8312114dad30d7">25 Netzwerkprogrammierung und Cross&ndash;Plattform-Entwicklung</a></td>
</tr>
<tr>
<td><a class="navnav" href="026_c_paralleles_rechnen_001.htm#mj710dc0ad851d57e60533f8797ff9c1e6">26 Paralleles Rechnen</a></td>
</tr>
<tr>
<td><a class="navnav" href="027_c_sicheres_programmieren_001.htm#mj13eba8f9d68ac8414bffaa3a1b24ec31">27 Sicheres Programmieren</a></td>
</tr>
<tr>
<td><a class="navnav" href="028_c_weiterfuehrendes_001.htm#mj3e65f750149ade087925f303b3871af9">28 Wie geht&#8217;s jetzt weiter?</a></td>
</tr>
<tr>
<td><a class="navnav" href="029_c_anhang_a_001.htm#mjec9bf1c5e3fe2e46047c2f9c7aa9c531">A Operatoren</a></td>
</tr>
<tr>
<td><a class="navnav" href="030_c_anhang_b_001.htm#mj803443bb6e7546011c48e6e57fbdbb64">B Die C-Standard-Bibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download.galileo-press.de/openbook/c_von_a_bis_z/galileocomputing_c_von_a_bis_z.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 10,6 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="011_c_arrays_010.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opc3" class="navnav">Galileo Computing</a> / <a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opc3" class="navnav">&lt;openbook&gt;</a> / <a href="index.htm" class="navnav"> C von A bis Z</a></div></td>
<td align="right" width="25%"><div align="right"><a href="011_c_arrays_012.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="buchtitel">C von A bis Z</a><span class="autor"> von J&uuml;rgen Wolf </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="navnav"><img src="common/9783836214117.gif" border="0" alt="Buch: C von A bis Z" title="Buch: C von A bis Z"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2132?GPP=opc3"><span class="autor"><strong>C von A bis Z</strong><br>3., aktualisierte und erweiterte Auflage, geb., mit CD und Referenzkarte<br>1.190 S., 39,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1411-7</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="011_c_arrays_001.htm#mje29de26c54a3884f7316cbbb2a073ad8" class="navnav">11 Arrays</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="011_c_arrays_001.htm#mj469d744c5b30cb3373d80818643836c5" class="navnav">11.1 Arrays deklarieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="011_c_arrays_002.htm#mjeeec3416c1c4f4eb7d05f3f09d9349be" class="navnav">11.2 Initialisierung und Zugriff auf Arrays</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_002.htm#mj79e145f1f171660666f1ef3950e06b24" class="navnav">11.2.1 Gültigkeitsbereich von Arrays</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="011_c_arrays_003.htm#mjb2e1028233d347a20027fc172326f792" class="navnav">11.3 Arrays vergleichen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="011_c_arrays_004.htm#mj3f5445113443dfa117781b465336c610" class="navnav">11.4 Anzahl der Elemente eines Arrays ermitteln</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="011_c_arrays_005.htm#mjf3c5aa0fd5920b4832a21324776dbfff" class="navnav">11.5 Übergabe von Arrays an Funktionen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="011_c_arrays_006.htm#mj9e02213623cea72143af952a11ac85df" class="navnav">11.6 Arrays aus Funktionen zurückgeben</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="011_c_arrays_007.htm#mj14166ef13e23fe9df6fdcce79ba9dfa2" class="navnav">11.7 Programmbeispiel zu den Arrays</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="011_c_arrays_008.htm#mjb13001449f3d3d61c5e9ec50a26ed7ea" class="navnav">11.8 Einlesen von Array-Werten</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="011_c_arrays_009.htm#mj1fafabf9621c60d77f7be86a236b292d" class="navnav">11.9 Mehrdimensionale Arrays</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_009.htm#mj760b5cacdde1f5e176a39559fbba3ecb" class="navnav">11.9.1 Mehrdimensionale Arrays initialisieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_009.htm#mj556ba85ff5cddc85b2f38765b20c2288" class="navnav">11.9.2 Übergabe von zwei- bzw. mehrdimensionalen Arrays an Funktionen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="011_c_arrays_010.htm#mjd98650d82a88b3a4fa0c440564fda48b" class="navnav">11.10 Arrays in Tabellenkalkulation einlesen (*.CSV&ndash;Dateien)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mja452663858fd23e86c51cfa3b9139f64" class="navh">11.11 Strings/Zeichenketten (»char«-Array)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj5694f3948b911efec75fb2de32213fcf" class="navh">11.11.1 Vom String zur Binärzahl</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="011_c_arrays_012.htm#mj274b2aae304e932bd677724af7d7a9cf" class="navnav">11.12 Einlesen von Strings</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="011_c_arrays_013.htm#mj607c824f6d89b1e3f8edb08abdc187d4" class="navnav">11.13 Die Standard-Bibliothek &lt;string.h&gt;</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_013.htm#mj2c229c43f35747a779cb6c76b917fadc" class="navnav">11.13.1 »strcat()« &#8211; Strings aneinanderhängen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_013.htm#mjb1558c148971ed949d838c71595a3490" class="navnav">11.13.2 »strchr()« &#8211; ein Zeichen im String suchen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_013.htm#mjd148b11ca58a4e84fc80121d3c99dbdf" class="navnav">11.13.3 »strcmp()« &#8211; Strings vergleichen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_013.htm#mj998c101ba9353f937a31637fe2cd8773" class="navnav">11.13.4 »strcpy()« &#8211; einen String kopieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_013.htm#mj98579a51cd0f9a9f3ef15549df429720" class="navnav">11.13.5 »strcspn()« &#8211; einen Teilstring ermitteln</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_013.htm#mj7b1a432ff2ba45460be212f4f46446b9" class="navnav">11.13.6 »strlen()« &#8211; Länge eines Strings ermitteln</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_013.htm#mjccc16dd28ed90de5421a8a3978677beb" class="navnav">11.13.7 »strncat()« &#8211; String mit n Zeichen aneinanderhängen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_013.htm#mj7a694abb9835dd5170196f2d9adde460" class="navnav">11.13.8 »strncmp()« &#8211; n Zeichen von zwei Strings miteinander vergleichen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_013.htm#mj8db45eea1aafc53773a6c66dd0858f5d" class="navnav">11.13.9 »strncpy()« &#8211; String mit n Zeichen kopieren</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_013.htm#mjbe8b332bdac004c1f733083e3f4481eb" class="navnav">11.13.10 »strpbrk()« &#8211; nach dem Auftreten bestimmter Zeichen suchen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_013.htm#mja5abfae994daf2a2d88881a7f243e0f7" class="navnav">11.13.11 »strrchr()« &#8211; das letzte Auftreten eines bestimmten Zeichens im String suchen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_013.htm#mj54260c868d0c4b76970e1f88a3d5b372" class="navnav">11.13.12 »strspn()« &#8211; das erste Auftreten eines Zeichens, das nicht vorkommt</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_013.htm#mja214ed64e5acc62362ef373f80645ef9" class="navnav">11.13.13 »strstr()« &#8211; einen String nach dem Auftreten eines Teilstrings durchsuchen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="011_c_arrays_013.htm#mj9a581d570646dd5edcc5d0e97de7a230" class="navnav">11.13.14 »strtok()« &#8211; einen String anhand bestimmter Zeichen zerlegen</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mja452663858fd23e86c51cfa3b9139f64" name="mja452663858fd23e86c51cfa3b9139f64"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">11.11</span><span class="cfett"> Strings/Zeichenketten (»char«-Array)</span>  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Arrays vom Datentyp <span class="clisting">char</span> werden <span class="ckursiv">Strings</span> genannt. Ein String ist eine Kette von einzelnen <span class="clisting">char</span>-Zeichen mit einer abschließenden 0 (was nicht mit dem Zeichen <span class="clisting">'0'</span> gleichzusetzen ist). <span class="clisting">char</span>-Arrays sind typischerweise eindimensional.</p>
<p>Viele Programmierer, die auf die Programmiersprache C stoßen, sind verwundert, dass es keinen eigenen Datentyp für einen String gibt. Für ein <span class="clisting">char</span>-Array gelten nicht nur die Einschränkungen der herkömmlichen Arrays, sondern es existiert auch das Problem der maximalen Länge von Arrays. Diese scheinbare Unflexibilität kann später, wenn sie effektiv eingesetzt wird, sehr ressourcensparend und schnell sein. Belassen Sie es aber erst einmal in den nächsten Kapiteln bei den etwas eingeschränkten <span class="clisting">char</span>-Arrays.</p>
<p>Mit dem <span class="clisting">char</span>-Array können Zeichenfolgen dargestellt und verarbeitet werden. Damit können Sie Benutzerschnittstellen und Textdateien verarbeiten und erstellen.</p>
<p>Eine Form der Stringkonstante wurde schon öfter in diesem Buch verwendet:</p>
<div class="listing"><pre class="prettyprint">printf("Ich bin die Stringkonstante");</pre></div>
<p>Generell lässt sich Folgendes sagen: Alles, was sich zwischen zwei Hochkommata befindet, gilt als Stringkonstante.</p>
<p>Die Deklaration eines <span class="clisting">char</span>-Arrays ist identisch mit der bisher bekannten Form der Array-Deklaration:</p>
<div class="listing"><pre class="prettyprint">char string_array[100];</pre></div>
<p>Im obigen Beispiel wird ein Array vom Datentyp <span class="clisting">char</span> angelegt, das 100 einzelne Zeichen speichern kann. Dabei muss die Größe des Array-Feldes nicht mehr ausdrücklich mit angegeben werden:</p>
<div class="listing"><pre class="prettyprint">const char hallo[] = { 'H', 'a', 'l', 'l', 'o', ' ',
                       'W', 'e', 'l', 't', '\n', '\0' };</pre></div>
<p>Diese Schreibweise ist ebenfalls absolut korrekt, aber sehr umständlich. Daher können Sie ein <span class="clisting">char</span>-Array auch anders, nämlich als einen String (dt. <span class="ckursiv">Zeichenkette</span>), deklarieren:</p>
<div class="listing"><pre class="prettyprint">const char hallo[] = { "Hallo Welt\n" };</pre></div>
<p>Beide Variationen sind absolut gleichwertig. Abbildung 11.12 zeigt die rechnerinterne Darstellung des Strings.</p>
<div class="bildbox">
<p><a name="IDABHUQ"></a><a onClick="OpenWin('bilder/11_012.gif','Abbildung',800,800)"><img border="0" src="bilderklein/klein11_012.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu vergrößern</span></a></p>
</div>
<p class="tabunter"><strong>Abbildung 11.12    </strong>Der String »Hallo Welt« ist ein einfaches »char«-Array.</p>
<p>Diese Zeichenkette benötigt zwölf Elemente (genauer: zwölf Bytes). Wenn Sie aber die Deklaration zu <span class="clisting">hallo[]</span> genauer betrachten, werden Sie feststellen, dass hierfür eigentlich nur elf Zeichen erforderlich wären. Welche Bedeutung hat das zwölfte Zeichen? Bei einem String benötigen Sie immer ein Stringende-Zeichen, das das Ende eines Strings anzeigt. Das ist die Bedeutung des Zeichens <span class="clisting">'\0'</span>. Das versehentliche Weglassen des Zeichens ist eine häufige Fehlerquelle, wenn beispielsweise Speicher für <span class="clisting">n</span> Zeichen reserviert werden soll. Generell muss also bei einem Bedarf von <span class="clisting">n</span> Zeichen immer für <span class="clisting">n+1</span> Zeichen Platz im Array reserviert werden. Hierzu ein kurzes Listing:</p>
<div class="listing"><pre class="prettyprint">/* string1.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

char hello1[] = { "Hallo Welt\n" };
char output[] = { "Ich bin lesbar \0 Ich nicht mehr" };
char deznu[]  = { "Mich siehst du 0 Mich und die Null auch" };

int main(void) {
   printf("%s",hello1);
   printf("%s\n",output);
   printf("%s\n",deznu);
   return EXIT_SUCCESS;
}</pre></div>
<p>Dieses Beispiel zeigt auch, wie Sie für die formatierte Ausgabe von Zeichenketten die Formatangabe <span class="clisting">%s</span> verwenden können (<span class="clisting">s</span> = String). Daher benötigt ein String ein Ende-Kennungszeichen. Bei dem String</p>
<div class="listing"><pre class="prettyprint">char output[] = {"Ich bin lesbar \0 Ich nicht mehr"};</pre></div>
<p>werden nur die Zeichen bis <span class="clisting">'\0'</span> angezeigt. Der hintere Teil des Strings existiert nur im Arbeitsspeicher. Da zuvor das Zeichen für das Ende des Strings <span class="clisting">'\0'</span> steht, wird dieser Teil nie auf dem Bildschirm ausgegeben. Im nächsten Beispiel</p>
<div class="listing"><pre class="prettyprint">char deznu[] = {"Mich siehst du 0 Mich und die Null auch"};</pre></div>
<p>wird der ganze String ausgegeben, weil das Zeichen <span class="clisting">'0'</span> nicht gleichzusetzen ist mit dem Zeichen <span class="clisting">'\0'</span>.</p>
<p>Es wurde bereits erwähnt, dass es auch möglich ist, auf die einzelnen Zeichen eines Strings zuzugreifen. Wenn Sie einen String beispielsweise mithilfe einer <span class="clisting">for</span>-Schleife auf seine Länge hin überprüfen wollen, prüfen Sie lediglich auf das Zeichen <span class="clisting">'\0'</span>. Hier ein Beispiel dazu:</p>
<div class="listing"><pre class="prettyprint">/* string2.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

char hello1[] = { "Hallo Welt" };
char output[] = { "Ich bin lesbar \0 Ich nicht mehr" };
char deznu[]  = { "Mich siehst du 0 Mich und die Null auch" };


int main(void) {
   int i;

   printf("%c", output[0]);      /* I */
   printf("%c'", hello1[9]);     /* t */
   printf("%c ", deznu[5]);      /* s */
   printf("%c", hello1[7]);      /* Gibt das Zeichen 'e' aus */
   printf("%c", output[12]);     /* a */
   printf("%c", deznu[5]);       /* s */
   deznu[1] = 'y';               /* aus 'i' wird 'y' */
   printf("%c\n", deznu[1]);     /* y */

   for(i=0; hello1[i] != '\0'; i++);
   printf("Länge von '%s' = %d Zeichen\n", hello1, i);

   for(i=0; output[i] != '\0'; i++);
   printf("Länge von '%s' = %d Zeichen\n", output, i);

   for(i=0; deznu[i] != '\0'; i++);
   printf("Länge von '%s' = %d Zeichen\n", deznu, i);
   return EXIT_SUCCESS;
}</pre></div>
<p>Hier werden mit dem Feldindex einzelne Zeichen ausgegeben, genau wie bei den Arrays mit Zahlen. In diesem Fall wird der Text »<span class="clisting">It's easy</span>« ausgegeben. Es ist natürlich auch möglich, den Inhalt zu verändern, etwa so wie in der Zeile</p>
<div class="listing"><pre class="prettyprint">deznu[1] = 'y';</pre></div>
<p>Anschließend wird mit</p>
<div class="listing"><pre class="prettyprint">for(i=0; hello1[i] != '\0'; i++);</pre></div>
<p>die Anzahl der Zeichen hochgezählt, die sich im String <span class="clisting">hello1[</span>  <span class="clisting">]</span> ohne <span class="clisting">\0</span> befinden. Die Abbruchbedingung</p>
<div class="listing"><pre class="prettyprint">hello1[i] != '\0';</pre></div>
<p>ist so lange wahr, bis der Inhalt von <span class="clisting">hello1[i] == '\0'</span> ist. In diesem Beispiel wäre das bei <span class="clisting">hello1[11]</span>der Fall, da sich hier das Zeichen <span class="clisting">'\0'</span> befindet. Beachten Sie hier, dass hinter der <span class="clisting">for</span>-Schleife ein Semikolon steht. Es gibt in diesem Fall keinen Anweisungsblock zur <span class="clisting">for</span>-Schleife. Hier wird die Variable <span class="clisting">i</span> so lange hochgezählt, bis das Stringende-Zeichen <span class="clisting">'\0'</span> erreicht wird. Gleiches gilt für die anderen beiden Strings.</p><a id="mj5694f3948b911efec75fb2de32213fcf" name="mj5694f3948b911efec75fb2de32213fcf"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">11.11.1</span><span class="cfett"> Vom String zur Binärzahl</span>  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Oben habe ich behauptet, dass es in C keine Datentypen gibt, die Zeichen darstellen können. Die Zeichen wurden mithilfe der ASCII-Code-Tabelle kodiert. Wie verhält sich dies jetzt mit der folgenden Stringkonstante?</p>
<div class="listing"><pre class="prettyprint">char str[] = { "Hallo!\n" };</pre></div>
<p>Wird dieser String in seine einzelnen Zeichen zerlegt, ergibt sich die Zeile:</p>
<div class="listing"><pre class="prettyprint">/* gleichwertig zu "Hallo!\n" */
char str[] = { 'H', 'a', 'l', 'l', 'o', '!', '\n', '\0' };</pre></div>
<p>Werden die einzelnen Zeichen jetzt anhand der ASCII-Code-Tabelle dekodiert, sieht der String schon anders aus:</p>
<div class="listing"><pre class="prettyprint">char str[] = { 72, 97, 108, 108, 111, 33, 10, 0 };</pre></div>
<p>Theoretisch könnten Sie den String auch so angeben und ausgeben lassen, wie das folgende Listing demonstriert:</p>
<div class="listing"><pre class="prettyprint">/* string3.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void) {
   /* Hallo!\n ... */
   char str[] = { 72, 97, 108, 108, 111, 33, 10, 0 };
   printf("%s\n",str);
   return EXIT_SUCCESS;
}</pre></div>
<p>Wenn Sie jetzt noch die einzelnen Werte in Binärzahlen umrechnen, können Sie den String aus der Sicht des Computers betrachten:</p>
<div class="listing"><pre class="prettyprint">0100100001100001011011000110110001101111001000010000101000000000</pre></div>
<p>Diese Erklärung soll Ihnen nur zeigen, dass Zeichenketten nicht magischer sind als ganz normale Zahlen-Arrays und in gewisser Hinsicht auch solche sind. Sie wollen einen Beweis? Bitte sehr:</p>
<div class="listing"><pre class="prettyprint">/* string4.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void) {
   int i;
  <span class="cfett"> int</span> str[] = { 72, 97, 108, 108, 111, 33, 10, 0 };

   for(i = 0; i &lt; sizeof(str) / sizeof(int); i++)
      printf("%c", str[i]);
   return EXIT_SUCCESS;
}</pre></div>
<p>Ein kleines Programm demonstriert im Folgenden den Umgang mit Strings. Das Programm durchläuft eine Zeichenkette und wandelt alle Stringfolgen <span class="clisting">"und"</span> in Großbuchstaben um:</p>
<div class="listing"><pre class="prettyprint">/* string5.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

char undbig[] = {
   "Hund und Katze sind nicht ohne "
   "Grund des Menschen beste Freunde\n"
};

int main(void) {
  int i;

  for(i=0; undbig[i] != '\0'; i++) {
     if(undbig[i-1]==' '&amp;&amp; (undbig[i]=='u' ||undbig[i]=='U')) {
        if(undbig[i+1]=='n'&amp;&amp;undbig[i+2]=='d'&amp;&amp;undbig[i+3]==' '){
           undbig[i] = 'U';
           /* n in Großbuchstaben konvertieren (N) */
           undbig[i+1] -= 32;
           /* d in Großbuchstaben konvertieren  (D) */
           undbig[i+2] -= 32;
        }
      }
   }
   printf("%s", undbig);
   return EXIT_SUCCESS;
}</pre></div>
<p>Zu Beginn des Programms sehen Sie, wie Sie eine Stringkonstante über mehrere Zeilen schreiben können:</p>
<div class="listing"><pre class="prettyprint">char array[] = {
   "Eine Zeichenkette über"
   "2 Zeilen\n"
};

/* Alternative */
char array[] = {
   "Eine Zeichenkette über \
2 Zeilen"};</pre></div>
<p>Beide Schreibweisen erfüllen den gleichen Zweck. Fahren wir mit der ersten <span class="clisting">for</span>-Schleife des Programms fort:</p>
<div class="listing"><pre class="prettyprint">for(i=0; undbig[i] != '\0'; i++)</pre></div>
<p>Hier wird der String zeichenweise durchlaufen, bis das Stringende-Zeichen <span class="clisting">'\0'</span> gefunden wird. Bei der nächsten Anweisung</p>
<div class="listing"><pre class="prettyprint">if(undbig[i-1] == ' ' &amp;&amp; (undbig[i]=='u' || undbig[i]=='U'))</pre></div>
<p>wird überprüft, ob das Zeichen, bei dem sich der Feldindex gerade befindet, ein kleines <span class="clisting">'u'</span> oder ein großes <span class="clisting">'U'</span> und das Zeichen davor ein Whitespace-Zeichen (Leerzeichen) ist. Falls nicht, wird <span class="clisting">i</span> in der <span class="clisting">for</span>-Schleife um den Wert 1 inkrementiert. Wird ein <span class="clisting">'u'</span> oder <span class="clisting">'U'</span> gefunden, folgt die Überprüfung</p>
<div class="listing"><pre class="prettyprint">if(undbig[i+1]=='n' &amp;&amp; undbig[i+2]=='d' &amp;&amp; undbig[i+3]==' ')</pre></div>
<p>daraufhin, ob die nächsten beiden Zeichen <span class="clisting">'n'</span> und <span class="clisting">'d'</span> sind und ob sich dahinter ebenfalls ein Whitespace-Zeichen befindet. Falls dies ebenso zutrifft, wurde eine Zeichenfolge <span class="clisting">"und"</span> gefunden. Dann werden die einzelnen Zeichen geändert:</p>
<div class="listing"><pre class="prettyprint">undbig[i] = 'U';
undbig[i+1] -= 32;  /* 'n' - 32 */
undbig[i+2] -= 32;  /* 'd' - 32 */</pre></div>
<p>Sehen Sie sich zum besseren Verständnis auch die ASCII-Tabelle in Anhang A.2 an. Sehen Sie nach, welche Dezimalwerte die Zeichen <span class="clisting">'n'</span> und <span class="clisting">'d'</span> haben. In Dezimalwerten würden die Subtraktionen der Werte so aussehen:</p>
<div class="listing"><pre class="prettyprint">110-32=78 und 100-32=68</pre></div>
<p>In der ASCII-Tabelle sind <span class="clisting">'N' = 78</span> und <span class="clisting">'D' = 68.</span></p><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="http://openbook.galileocomputing.de/c_von_a_bis_z/011_c_arrays_011.htm"><input type="hidden" name="buchtitel" value="C von A bis Z"><input type="hidden" name="Kapitel" value="11.11 Strings/Zeichenketten (»char«-Array)"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="011_c_arrays_010.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="011_c_arrays_012.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">&nbsp;&nbsp;</td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/?GPP=opc3" class="nav">
<strong>Zum Katalog</strong></a>
</td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2132?GPP=opc3">
<img src="common/9783836214117_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C von A bis Z" title="Zum Katalog: C von A bis Z">
<br /><br /><strong>&nbsp;C von A bis Z</strong><br /><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt&nbsp;bestellen</a><br /><br />
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2"><a href="#kommentar" class="nav"><strong>&nbsp;Ihre Meinung?</strong></a>
</td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br /><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br /><br /></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/?GPP=opc3" class="nav"><strong>Buchtipps</strong></a></td>
</tr>
<tr> 
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2083?GPP=opc3">
<img src="common/9783836213851_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in C++" title="Zum Katalog: Einstieg in C++"><br /><br /><br /><br /><br /><br /><br />&nbsp;Einstieg in C++</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opc3">
<img src="common/9783836214292_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br /><br /><br /><br /><br /><br /><br />&nbsp;C++ von A bis Z</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1299?GPP=opc3">
<img src="common/9783898428392_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C/C++" title="Zum Katalog: C/C++"><br /><br /><br /><br /><br /><br /><br />&nbsp;C/C++</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1712?GPP=opc3">
<img src="common/9783836211574_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Shell-Programmierung" title="Zum Katalog: Shell-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Shell-Programmierung</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2049?GPP=opc3">
<img src="common/9783836213660_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Linux-UNIX-Programmierung" title="Zum Katalog: Linux-UNIX-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Linux-UNIX-<br />&nbsp;Programmierung</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2138?GPP=opc3">
<img src="common/9783836214209_s.gif" width="107" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: IT-Handbuch für Fachinformatiker" title="Zum Katalog: IT-Handbuch für Fachinformatiker"><br /><br /><br /><br /><br /><br /><br />&nbsp;IT-Handbuch für <br />&nbsp;Fachinformatiker</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2165?GPP=opc3">
<img src="common/9783836214391_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Ubuntu GNU/Linux" title="Zum Katalog: Ubuntu GNU/Linux"><br /><br /><br /><br /><br /><br /><br />&nbsp;Ubuntu GNU/Linux</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1628?GPP=opc3">
<img src="common/9783836211161_s.gif" width="117" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Coding for Fun" title="Zum Katalog: Coding for Fun"><br /><br /><br /><br /><br /><br /><br /><br />&nbsp;Coding for Fun&nbsp;</a><br /><br /></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2"><strong>&nbsp;Shopping</strong></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br /><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opc3"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br /><br /></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2009</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
