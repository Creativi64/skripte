<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: C von A bis Z &ndash; 17.3 Verzeichnisfunktionen</title>
<meta name="title" content="Galileo Computing :: C von A bis Z - 17.3 Verzeichnisfunktionen">
<meta name="author" content="J&uuml;rgen Wolf ">
<meta name="publisher" content="Galileo Press 2009">
<meta name="copyright" content="Galileo Press 2009">
<meta name="Description" content="C von A bis Z - Das umfassende Handbuch &ndash; 17.3 Verzeichnisfunktionen">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href="017_c_dateien_verzeichnisse_002.htm">
<link rel="next" href="018_c_stdarg_h_001.htm"><script type="text/javascript"><!--
    function OpenWin(url,name,height,width)
    {
      var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
      InfoWin.focus();
    }
    //--></script><link href="common/prettify.css" type="text/css" rel="stylesheet"><script type="text/javascript" src="common/prettify.js"></script></head>
<body vlink="#000099" link="#000099" alink="#000099" onload="prettyPrint()">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
<tr>
<td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook?GPP=opc3"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
<td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opc3"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle Bücher. Auch für Einsteiger." title="Galileo Computing - Professionelle Bücher. Auch für Einsteiger."></a></td>
</tr>
</table>
<div align="right"><a href="http://www.galileocomputing.de/?GPP=opc3" class="navnav">Professionelle Bücher. Auch für Einsteiger.</a></div><br><table class="tbl" border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td width="190" valign="top">
<table class="tbl1" border="0" cellpadding="3" cellspacing="0" width="190" align="left">
<tr>
<td class="tbl2"><a class="nav" href="index.htm#_top">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="000_c_vorwort_001.htm#mj764cb3fd439d3b95d1843e7c7d17f235">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="000_c_vorwort_gutachter_001.htm#mj3d41cb339c9b2fc1d6e99cdaa93c3860">Vorwort des Gutachters</a></td>
</tr>
<tr>
<td><a class="navnav" href="001_c_einstieg_in_c_001.htm#mja24d93ff97bb42dbebf4689160c45195">1 Einstieg in C</a></td>
</tr>
<tr>
<td><a class="navnav" href="002_c_das_erste_programm_001.htm#mj2604a667cc98d3fa2178751273346b91">2 Das erste Programm</a></td>
</tr>
<tr>
<td><a class="navnav" href="003_c_grundlagen_001.htm#mj7ac54ba315b94149806c1de3fc89ee7f">3 Grundlagen</a></td>
</tr>
<tr>
<td><a class="navnav" href="004_c_ein_ausgabe_001.htm#mj20c131820fbfb1497afd796ee443599e">4 Formatierte Ein-/Ausgabe mit »scanf()« und »printf()«</a></td>
</tr>
<tr>
<td><a class="navnav" href="005_c_basisdatentypen_001.htm#mjeda2957449ddc812dad62b400fe57752">5 Basisdatentypen</a></td>
</tr>
<tr>
<td><a class="navnav" href="006_c_operatoren_001.htm#mjab3693b096d581607801a36ce88905fc">6 Operatoren</a></td>
</tr>
<tr>
<td><a class="navnav" href="007_c_typumwandlung_001.htm#mj5c5e497ac2ab4367fe9df0ffd218cfca">7 Typumwandlung</a></td>
</tr>
<tr>
<td><a class="navnav" href="008_c_kontrollstrukturen_001.htm#mjc7bf6f584a2fe20b4c5f6b16ba15d57d">8 Kontrollstrukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="009_c_funktionen_001.htm#mj7893101be51aa469fe52334038acd465">9 Funktionen</a></td>
</tr>
<tr>
<td><a class="navnav" href="010_c_praeprozessor_001.htm#mjacdd200a20163a4d3fa418b6cb95763e">10 Präprozessor-Direktiven</a></td>
</tr>
<tr>
<td><a class="navnav" href="011_c_arrays_001.htm#mje29de26c54a3884f7316cbbb2a073ad8">11 Arrays</a></td>
</tr>
<tr>
<td><a class="navnav" href="012_c_zeiger_001.htm#mjee28a882ef9125d2c4cc49121b2c65c1">12 Zeiger (Pointer)</a></td>
</tr>
<tr>
<td><a class="navnav" href="013_c_kommandozeilenargumente_001.htm#mjf6a9e42fa3bc25b2b1e06270e7bf8f68">13 Kommandozeilenargumente</a></td>
</tr>
<tr>
<td><a class="navnav" href="014_c_dyn_speicherverwaltung_001.htm#mj8d062301d2449b13710f1484d499cd9b">14 Dynamische Speicherverwaltung</a></td>
</tr>
<tr>
<td><a class="navnav" href="015_c_strukturen_001.htm#mj5e146ba18168113a5c645cd2d07c4ec8">15 Strukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="016_c_ein_ausgabe_funktionen_001.htm#mj136f9ac6b5b7c440aafe5010411ef011">16 Ein-/Ausgabe-Funktionen</a></td>
</tr>
<tr>
<td><a class="navh" href="##mj9f81aea722a9edb8d0080df81eb9402c">17 Attribute von Dateien und das Arbeiten mit Verzeichnissen (nicht ANSI C)</a></td>
</tr>
<tr>
<td><a class="navnav" href="018_c_stdarg_h_001.htm#mj9d64febdc46a1375e5c4498b17154e30">18 Arbeiten mit variabel langen Argumentlisten &#8211; &lt;stdarg.h&gt;</a></td>
</tr>
<tr>
<td><a class="navnav" href="019_c_zeitroutinen_001.htm#mj0a8102e96a1297bd767ac7274e069f0f">19 Zeitroutinen</a></td>
</tr>
<tr>
<td><a class="navnav" href="020_c_headerdateien_001.htm#mjf3caede8ebd504dc6b7454b297c251e8">20 Weitere Headerdateien und ihre Funktionen (ANSI C)</a></td>
</tr>
<tr>
<td><a class="navnav" href="021_c_dyn_datenstrukturen_001.htm#mja75ba2f4ab8f95e9e321d195c1e26d76">21 Dynamische Datenstrukturen</a></td>
</tr>
<tr>
<td><a class="navnav" href="022_c_algorithmen_001.htm#mj07afe6f332eab2e8168da2f69f7b31c4">22 Algorithmen</a></td>
</tr>
<tr>
<td><a class="navnav" href="023_c_cgi_001.htm#mj6c4219b4e615fa24deaa57d5c3d04db8">23 CGI mit C</a></td>
</tr>
<tr>
<td><a class="navnav" href="024_c_mysql_001.htm#mj12dab301033f9fd856aa739270c45e08">24 MySQL und C</a></td>
</tr>
<tr>
<td><a class="navnav" href="025_c_netzwerkprogrammierung_001.htm#mja8101c6e0e4cb2e6fd8312114dad30d7">25 Netzwerkprogrammierung und Cross&ndash;Plattform-Entwicklung</a></td>
</tr>
<tr>
<td><a class="navnav" href="026_c_paralleles_rechnen_001.htm#mj710dc0ad851d57e60533f8797ff9c1e6">26 Paralleles Rechnen</a></td>
</tr>
<tr>
<td><a class="navnav" href="027_c_sicheres_programmieren_001.htm#mj13eba8f9d68ac8414bffaa3a1b24ec31">27 Sicheres Programmieren</a></td>
</tr>
<tr>
<td><a class="navnav" href="028_c_weiterfuehrendes_001.htm#mj3e65f750149ade087925f303b3871af9">28 Wie geht&#8217;s jetzt weiter?</a></td>
</tr>
<tr>
<td><a class="navnav" href="029_c_anhang_a_001.htm#mjec9bf1c5e3fe2e46047c2f9c7aa9c531">A Operatoren</a></td>
</tr>
<tr>
<td><a class="navnav" href="030_c_anhang_b_001.htm#mj803443bb6e7546011c48e6e57fbdbb64">B Die C-Standard-Bibliothek</a></td>
</tr>
<tr>
<td><a class="navnav" href="stichwort.htm#_top">Stichwort</a></td>
</tr>
<tr>
<td><br><a href="http://download.galileo-press.de/openbook/c_von_a_bis_z/galileocomputing_c_von_a_bis_z.zip" class="navnav"><strong>Download:</strong><br>- ZIP, ca. 10,6 MB</a></td>
</tr>
<tr>
<td><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="navnav">Buch bestellen</a></td>
</tr>
<tr>
<td><a class="navnav" href="#kommentar">Ihre Meinung?</a><br><br></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10" alt="Spacer"></td>
<td width="85%" valign="top" align="center"><div align="center">
<table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="017_c_dateien_verzeichnisse_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a href="http://www.galileocomputing.de/?GPP=opc3" class="navnav">Galileo Computing</a> / <a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opc3" class="navnav">&lt;openbook&gt;</a> / <a href="index.htm" class="navnav"> C von A bis Z</a></div></td>
<td align="right" width="25%"><div align="right"><a href="018_c_stdarg_h_001.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" valign="top"><table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
<tr>
<td colspan="2"><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="buchtitel">C von A bis Z</a><span class="autor"> von J&uuml;rgen Wolf </span><br><span class="untertitel">Das umfassende Handbuch</span></td>
</tr>
<tr>
<td valign="top" width="211"><dl>
<dt><a href="http://www.galileocomputing.de/2132?GPP=opc3" class="navnav"><img src="common/9783836214117.gif" border="0" alt="Buch: C von A bis Z" title="Buch: C von A bis Z"></a></dt>
<dd><br><a href="http://www.galileocomputing.de/2132?GPP=opc3"><span class="autor"><strong>C von A bis Z</strong><br>3., aktualisierte und erweiterte Auflage, geb., mit CD und Referenzkarte<br>1.190 S., 39,90 Euro<br>Galileo Computing<br>ISBN 978-3-8362-1411-7</span></a></dd>
</dl></td>
<td width="80%"><table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="3" class="kap"><strong><a href="017_c_dateien_verzeichnisse_001.htm#mj9f81aea722a9edb8d0080df81eb9402c" class="navnav">17 Attribute von Dateien und das Arbeiten mit Verzeichnissen (nicht ANSI C)</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="017_c_dateien_verzeichnisse_001.htm#mjdce8721b710bdcb73a183a6861554eff" class="navnav">17.1 Attribute einer Datei ermitteln &#8211; »stat()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="017_c_dateien_verzeichnisse_001.htm#mj5d3a6760640b035d4c82d67c5fa40d05" class="navnav">17.1.1 »stat()« &#8211; »st_mode«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="017_c_dateien_verzeichnisse_001.htm#mjfa96859cf23f01558e382594661bdbe0" class="navnav">17.1.2 »stat()« &#8211; »st_size«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="017_c_dateien_verzeichnisse_001.htm#mjfc20e82dbd79f9a349df3d5e66258b3e" class="navnav">17.1.3 »stat()« &#8211; »st_atime«, »st_mtime« und »st_ctime«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="017_c_dateien_verzeichnisse_001.htm#mj8384f1dc9ba3069a09dd846cfea507c3" class="navnav">17.1.4 »stat()« &#8211; »st_gid« und »st_uid«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="017_c_dateien_verzeichnisse_001.htm#mja6dac40bbc1506b1e02baf619838ffb3" class="navnav">17.1.5 »stat()« &#8211; »st_nlink«, »st_ino«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="017_c_dateien_verzeichnisse_001.htm#mjc3760fa109b9837b23fb25544bb53b07" class="navnav">17.1.6 »stat()« &#8211; »st_dev«, »st_rdev«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="017_c_dateien_verzeichnisse_002.htm#mj391fcba8692b6c16acc47fbe1a03a818" class="navnav">17.2 Prüfen des Zugriffsrechts &#8211; »access()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline" colspan="2"><strong><a href="#mjd1acf37cfe2d9ca41a30b369589d112f" class="navh">17.3 Verzeichnisfunktionen</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj1b339621fd0d872343888bdc1219c470" class="navh">17.3.1 Verzeichnis erstellen, löschen und wechseln &#8211; »mkdir()«, »rmdir« und »chdir«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mj30679887ecf4b9ece2f56be87e77f1d5" class="navh">17.3.2 In das Arbeitsverzeichnis wechseln &#8211; »getcwd()«</a></strong></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="Pfeil"></td>
<td valign="baseline"><strong><a href="#mjc31cd7e93db31d7407d32cd062032c36" class="navh">17.3.3 Verzeichnisse öffnen, lesen und schließen &#8211; »opendir()«, »readdir()« und »closedir()«</a></strong></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td><div class="main"><a id="mjd1acf37cfe2d9ca41a30b369589d112f" name="mjd1acf37cfe2d9ca41a30b369589d112f"></a><a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2"><span class="cfett">17.3</span><span class="cfett"> Verzeichnisfunktionen</span>  <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></h2>
<p>Bei den bisherigen ANSI-C-Funktionen konnte es Ihnen egal sein, wie ein Dateisystem aufgebaut ist. Es gibt zwar einige systemabhängige Faktoren, die zu beachten sind (beispielsweise das Trennzeichen von Verzeichnisnamen), aber meistens sind diese Funktionen so universell implementiert, dass es dennoch nicht zu Problemen kommt. Bei einem Zugriff auf Verzeichnisse ist es leider nicht mehr so einfach. Hierbei werden meist POSIX-konforme Funktionen verwendet, die vorwiegend in der UNIX-Welt beheimatet sind. Keine Sorge, auch MS-Windows-Anwender können diese Funktionen nutzen. In vielen Compilern unter diesem System sind diese Funktionen integriert.</p><a id="mj1b339621fd0d872343888bdc1219c470" name="mj1b339621fd0d872343888bdc1219c470"></a><a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3"><span class="cfett">17.3.1</span><span class="cfett"> Verzeichnis erstellen, löschen und wechseln &#8211; »mkdir()«, »rmdir« und »chdir«</span>  <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<div class="listing"><pre class="prettyprint">#include &lt;sys/types.h&gt;  /* Linux/UNIX */
#include &lt;sys/stat.h&gt;   /* Linux/UNIX */
#include &lt;dir.h&gt;        /* MS-DOS/WIN */

int mkdir(const char *pfad, [int modus]);</pre></div>
<p>Mit der Funktion <span class="clisting">mkdir()</span> wird ein neues Verzeichnis mit dem Namen <span class="clisting">pfad</span> angelegt. Zusätzlich werden in dem neuen Verzeichnis automatisch auch das Arbeitsverzeichnis (Working Directory) (<span class="clisting">.</span>) und das Eltern-Verzeichnis (Parent Directory) (<span class="clisting">..</span>) mit angelegt. Die Zugriffsrechte können über <span class="clisting">modus</span> vergeben werden. Dies gilt aber nur für Linux/UNIX und nicht für Windows/MS-DOS. Die Modi unter Linux/UNIX entnehmen Sie bitte der Manpage von <span class="clisting">chmod()</span>.</p>
<p>Hierzu sehen Sie als Beispiel ein Listing, mit dem ein neues Verzeichnis erstellt wird.</p>
<div class="listing"><pre class="prettyprint">/* create_dir.c */
#ifdef __unix__
   #include &lt;sys/types.h&gt;
   #include &lt;sys/stat.h&gt;
   #define MODUS ,0711)
#elif __WIN32__ || _MS_DOS_
    #include &lt;dir.h&gt;
    #define MODUS )
#else
    #include &lt;direct.h&gt;  /* Visual C++ */
    #define MODUS )
#endif
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void) {
   char pfadname[200];

   printf("Wie soll der neue Ordner heissen: ");
   scanf("%199s",pfadname);
   if(mkdir(pfadname MODUS == -1) /*Nicht schön, aber portabler*/
      printf("Konnte kein neues Verzeichnis erstellen\n");
   else
      printf("Neues Verzeichnis namens %s erstellt\n",pfadname);
   return EXIT_SUCCESS;
}</pre></div>
<p>Wurde das Programm ausgeführt, sollte sich im benannten Verzeichnis ein neuer Ordner mit dem eingegebenen Namen befinden. Unter Linux/UNIX muss außerdem beachtet werden, dass für den <span class="clisting">modus</span> auch die Ausführrechte (Execute-Bits) gesetzt sind, um auch Zugriff auf das neue Verzeichnis zu haben.</p>
<p>Sofern versucht wird, ein Verzeichnis zu erstellen, das bereits existiert, wird dies fehlschlagen. <span class="clisting">errno</span> wird dann auf einen entsprechenden Wert gesetzt (<span class="clisting">EEXIST</span>).</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Hinweis</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Es soll hierbei nicht unerwähnt bleiben, dass Sie unter Linux/UNIX nicht einfach die Zugriffsrechte für ein neues Verzeichnis bzw. eine neue Datei vergeben können, wie es Ihnen gerade passt. Sie sind dabei von einer gewissen Bit-Einschränkungsmaske abhängig, die Sie allerdings mit der Funktion <span class="clisting">umask()</span> verändern können. Dies ist allerdings sehr systemspezifisch. Daher möchte ich Sie auf mein anderes Buch »Linux-UNIX-Programmierung« hinweisen, das Sie auch zum Probelesen auf meiner Homepage vorfinden.</p>
</td>
</tr>
</table><br><p>Als Nächstes soll in das eben erstellte Verzeichnis gewechselt werden. Dies gelingt mit der Funktion <span class="clisting">chdir()</span>. Die Syntax von <span class="clisting">chdir()</span> sieht so aus:</p>
<div class="listing"><pre class="prettyprint">#include &lt;unistd.h&gt; /* Linux/UNIX */
#include &lt;dir.h&gt;    /* MS-DOS/WIN */

int chdir(const char *pfad);</pre></div>
<p>Mit <span class="clisting">chdir()</span> wird in das Arbeitsverzeichnis gewechselt, das jedes ablaufende Programm besitzt. Bei einem Fehler gibt diese Funktion &#8211;1 zurück, ansonsten 0. In dem folgenden Listing wird erst ein neues Verzeichnis erstellt, und danach wird mit <span class="clisting">chdir()</span> in das erstellte Verzeichnis gewechselt und darin eine Textdatei erzeugt.</p>
<div class="listing"><pre class="prettyprint">/* change_dir.c */
#ifdef __linux__
   #include &lt;sys/types.h&gt;
   #include &lt;sys/stat.h&gt;
   #include &lt;unistd.h&gt;
   #define MODUS ,0711)
#elif _WIN32__ || _MS_DOS_
    #include &lt;dir.h&gt;
    #define MODUS )
#else
    #include &lt;direct.h&gt;
    #define MODUS )
#endif
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;errno.h&gt;

int main(void) {
   char pfadname[200];

   printf("Wie soll der neue Ordner heissen : ");
   scanf("%199s",pfadname);
   if(mkdir(pfadname MODUS == -1)
      printf("Konnte kein neues Verzeichnis erstellen\n");
   else {
      printf("Neues Verzeichnis namens %s erstellt\n", pfadname);
      printf(" --&gt; (%s)\n", strerror(errno));
   }

   /* Jetzt wollen wir in das neue Verzeichnis wechseln. */
   if(chdir(pfadname) == -1) {
      printf("Konnte nicht in das Verzeichnis wechseln\n");
      return EXIT_FAILURE;
   }
   else
      printf("Erfolgreich nach %s gewechselt!\n", pfadname);
   /* testfile im Verzeichnis erstellen*/
   fopen("testfile", "w");
   return EXIT_SUCCESS;
}</pre></div>
<p>Jetzt sollte sich in dem eben erzeugten Verzeichnis eine Datei namens <span class="ckursiv">testfile</span> befinden. Es dürfte Ihnen aufgefallen sein, dass das Programm, wenn es sich beendet, automatisch wieder in das Verzeichnis des Elternprozesses zurückwechselt.</p>
<p>Wenn Sie mehrmals in einem Programm Verzeichnisse erstellen müssen und in diese wechseln, schreiben Sie besser eine Funktion wie z. B.:</p>
<div class="listing"><pre class="prettyprint">int makedir(char *dir) {
   if(mkdir(dir, 0755) != -1) /* Windows/MS-DOS ohne 0755 */
      if(chdir(dir) != -1)
         return OK;
   return ERROR;
}</pre></div>
<p>Wollen Sie ein Verzeichnis wieder löschen, können Sie die Funktion <span class="clisting">rmdir()</span> verwenden. Die Syntax von <span class="clisting">rmdir()</span> lautet:</p>
<div class="listing"><pre class="prettyprint">#include &lt;unistd.h&gt;   /* UNIX/Linux */
#include &lt;dir.h&gt;      /* MS-DOS     */

int rmdir(const char *pfad);</pre></div>
<p>Mit <span class="clisting">rmdir()</span> kann ein Verzeichnis (<span class="clisting">rmdir</span> steht für <span class="ckursiv">remove directory</span>) gelöscht werden. Unter Linux/UNIX setzt dies allerdings voraus, dass dieses Verzeichnis außer dem (<span class="clisting">.</span>) und (<span class="clisting">..</span>) keinen anderen Eintrag mehr beinhaltet. Bei Erfolg gibt diese Funktion 0 zurück und bei einem Fehler &#8211;1.</p>
<p>Dazu soll das Programm, das eben verwendet wurde, erweitert werden. Das Verzeichnis, das erstellt wurde, in das gewechselt wurde und in dem eine Datei erzeugt wurde, soll am Ende des Programms wieder gelöscht werden. Hier sehen Sie das Listing dazu:</p>
<div class="listing"><pre class="prettyprint">/* remove_dir.c */
#ifdef __linux__
   #include &lt;sys/types.h&gt;
   #include &lt;sys/stat.h&gt;
   #include &lt;unistd.h&gt;
   #define MODUS ,0711)
#elif _WIN32__ || _MS_DOS_
    #include &lt;dir.h&gt;
    #define MODUS )
#else
    #include &lt;direct.h&gt;
    #define MODUS )
#endif
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;errno.h&gt;

int makedir(char *dir) {
   if(mkdir(dir MODUS != -1)
      if(chdir(dir) != -1)
         return 0;
   return -1;
}

int main(void) {
   char pfadname[200];

   printf("Wie soll der neue Ordner heissen : ");
   scanf("%199s",pfadname);

   if(makedir(pfadname) == -1) {
      printf("Konnte kein neues Verzeichnis erstellen\n");
      printf(" --&gt; (%s)\n", strerror(errno));
   }
   /* testfile im Verzeichnis erstellen */
   fopen("testfile","w");

   if(rmdir(pfadname) == -1) {
     printf("Konnte Verzeichnis %s nicht loeschen!!\n",pfadname);
     printf(" --&gt; (%s)\n", strerror(errno));
   }
   return EXIT_SUCCESS;
}</pre></div>
<p>Unter MS-DOS/Windows wird das Listing problemlos funktionieren. Mit Linux/UNIX kann das Verzeichnis nicht gelöscht werden, da sich dort noch eine Datei befindet. Das Verzeichnis muss also zuvor leer sein. Das vollständige Verzeichnis lässt sich mit folgendem Shell-Aufruf leeren:</p>
<div class="listing"><pre class="prettyprint">rmdir Verzeichnis | rm -rf Verzeichnis</pre></div>
<p>Im Listing kann dieser Aufruf folgendermaßen eingesetzt werden:</p>
<div class="listing"><pre class="prettyprint">/* remove_dir_unix.c */
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;errno.h&gt;

int main(void) {
   char pfadname[200];
   char deletefiles[200];

   printf("Welchen Ordner wollen Sie löschen : ");
   scanf("%189s",pfadname);
   strcpy(deletefiles,"rm -rf ");
   strcat(deletefiles,pfadname);
   strcat(deletefiles,"/*");
   printf("%s\n",deletefiles);
   system(deletefiles);
   if(rmdir(pfadname) == -1) {
      printf("Konnte Verzeichnis %s nicht löschen!!\n",pfadname);
      printf(" --&gt; (%s)\n", strerror(errno));
   }
   return EXIT_SUCCESS;
}</pre></div><a id="mj30679887ecf4b9ece2f56be87e77f1d5" name="mj30679887ecf4b9ece2f56be87e77f1d5"></a><a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3"><span class="cfett">17.3.2</span><span class="cfett"> In das Arbeitsverzeichnis wechseln &#8211; »getcwd()«</span>  <a href="#t2t34"><img src="common/down.gif" width="15" height="15" border="0" alt="Zur nächsten Überschrift"></a><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Mit der Funktion <span class="clisting">getcwd()</span> lässt sich der Name des Arbeitsverzeichnisses (Working Directory) ermitteln. Die Syntax von <span class="clisting">getcwd()</span> lautet:</p>
<div class="listing"><pre class="prettyprint">#include &lt;unistd.h&gt;    /* Linux/UNIX */
#include &lt;dir.h&gt;       /* MS-DOS/WIN */

char *getcwd(char *puffer, int puffergroesse);</pre></div>
<p>Die Funktion schreibt in die Speicheradresse <span class="clisting">puffer</span> den Pfadnamen des Arbeitsverzeichnisses mit abschließendem <span class="clisting">'\0'</span>. Mit <span class="clisting">puffergroesse</span> wird die Größe des Puffers angegeben. Die Funktion gibt bei Erfolg den Pfadnamen des Arbeitsverzeichnisses an <span class="clisting">puffer</span> zurück oder bei einem Fehler <span class="clisting">NULL</span>. Hier sehen Sie ein Beispiel dafür, wie diese Funktion verwendet wird:</p>
<div class="listing"><pre class="prettyprint">/* working_D.c */
#ifdef __unix__
    #include &lt;unistd.h&gt;
#elif __WIN32__ || _MS_DOS_
    #include &lt;dir.h&gt;
#else
    #include &lt;direct.h&gt; /* Visual C++ */
#endif
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void) {
   char puffer[200];

   if(getcwd(puffer,sizeof(puffer)) == NULL) {
      fprintf(stderr, "Fehler bei getcwd ...\n");
      return EXIT_FAILURE;
   }
   printf("Working-Directory: %s\n", puffer);
   return EXIT_SUCCESS;
}</pre></div>
<p>Für Linux/UNIX gilt außerdem: Wechseln Sie in ein Verzeichnis, das ein symbolischer Link auf ein anderes Verzeichnis ist, so wird in das Verzeichnis gewechselt, auf das der symbolische Link zeigt.</p>
<p>Ein praktisches Beispiel unter Linux: Der User hat den Namen seines Home-Verzeichnisses vergessen. Er muss aber jetzt wieder in das Verzeichnis wechseln. Welches das ist, kann er mit der Eingabe des Shellbefehls <span class="clisting">env</span> (Environment) oder mit der C-Funktion <span class="clisting">getenv()</span>herausfinden. Hier sehen Sie das Listing:</p>
<div class="listing"><pre class="prettyprint">/* go_home.c */
#ifdef __unix__
    #include &lt;unistd.h&gt;
#elif __WIN32__ || _MS_DOS_
    #include &lt;dir.h&gt;
#else
    #include &lt;direct.h&gt; /* Visual C++ */
#endif
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#define MAX 200

int main(void) {
   char puffer[MAX];
   char home[MAX];
   if( getenv("HOME") == NULL ) {
      printf("getenv(\"HOME\") findet nichts\n");
      return EXIT_FAILURE;
   }
   /* das Heimatverzeichnis nach home */
   strncpy(home, getenv("HOME"), MAX-1);
   home[MAX-1] = '\0';
   /* Working Directory lesen */
   if(getcwd(puffer,sizeof(puffer)) == NULL) {
      fprintf(stderr, "Fehler bei getcwd ...\n");
      return EXIT_FAILURE;
   }
   /* Sind wir schon im Heimatverzeichnis? */
   if(strcmp(home,puffer) == 0)
      printf("Wir sind daheim : %s\n",puffer);
   else { /* Nicht, dann wechseln wir ins Heimatverzeichnis. */
      chdir(home);
      /* Der Beweis: */
      printf("back at home: %s \n",
         getcwd(puffer,sizeof(puffer)));
   }
   return EXIT_SUCCESS;
}</pre></div><a id="mjc31cd7e93db31d7407d32cd062032c36" name="mjc31cd7e93db31d7407d32cd062032c36"></a><a name="t33"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t34"></a><h3 class="t3"><span class="cfett">17.3.3</span><span class="cfett"> Verzeichnisse öffnen, lesen und schließen &#8211; »opendir()«, »readdir()« und »closedir()«</span>  <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t33"><img src="common/top.gif" width="15" height="15" border="0" alt="Zur vorigen Überschrift"></a></h3>
<p>Um Verzeichnisse zu lesen, ist in der Headerdatei mit <span class="clisting">#include &lt;dirent.h&gt;</span> eine interne Struktur namens <span class="clisting">DIR</span> deklariert. Der Inhalt dieser Struktur ist hier jetzt nicht von Interesse, sondern es geht um die folgenden Funktionen, die mit der Struktur arbeiten.</p><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Hinweis</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Die folgenden Funktionen sind leider nicht mit dem Microsoft Visual-C++-Compiler ausführbar. Dafür wird aber am Ende des Kapitels ein extra Listing angefertigt, das zeigt, wie auch mit dem Visual-C++-Compiler Programme erstellt werden können, die ein Verzeichnis auslesen.</p>
</td>
</tr>
</table><br><br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellenkopf"><span class="cfett">Tipp</span>
</td>
</tr>
<tr>
<td class="tabellentext">
<p class="BStandard">Wollen Sie die folgenden Beispiele mit der kostenlosen Entwicklungsumgebung <span class="ckursiv">Bloodshed Dev-C++</span> durchführen, müssen Sie im Menü über <span class="kapitalchen">Projekt</span> &bull; <span class="kapitalchen">Projektoptionen</span> in der Liste <span class="kapitalchen">Linker</span> die Bibliothek -lmingwex eintragen. Eventuell kann dies aber auch über das Menü <span class="kapitalchen">Werkzeuge </span> &bull; <span class="kapitalchen">Compiler</span> &bull; <span class="kapitalchen">Optionen</span> in die Liste <span class="kapitalchen">Linker</span> eingetragen werden. Hierfür genügt aber dann folgender Eintrag: mingwex</p>
</td>
</tr>
</table><br><h4 class="t4"><span class="cfett">»opendir()« &#8211; ein Verzeichnis öffnen</span></h4>
<p>Wir beginnen mit der Funktion <span class="clisting">opendir()</span>:</p>
<div class="listing"><pre class="prettyprint">#include &lt;sys/types.h&gt;
#include &lt;dirent.h&gt;

DIR *opendir(const char *dirname);</pre></div>
<p>Bei Erfolg wird mit dieser Funktion das Verzeichnis <span class="clisting">dirname</span> geöffnet, auf dessen Adresse dann der <span class="clisting">DIR</span>-Zeiger verweist. Ansonsten wird bei einem Fehler <span class="clisting">NULL</span> zurückgegeben.</p>
<p>Der <span class="clisting">DIR</span>-Zeiger wird jetzt verwendet, um den Inhalt eines Verzeichnisses auszulesen. Dies wird jetzt gleich mit der Funktion <span class="clisting">readdir()</span> vorgenommen.</p>
<h4 class="t4"><span class="cfett">»readdir()« &#8211; aus einem Verzeichnis lesen</span></h4>
<p>Die Syntax von <span class="clisting">readdir()</span> lautet:</p>
<div class="listing"><pre class="prettyprint">#include &lt;sys/types.h&gt;
#include &lt;dirent.h&gt;

struct dirent *readdir(DIR *dir);</pre></div>
<p>Bei einem Fehler gibt diese Funktion ebenfalls <span class="clisting">NULL</span> zurück. Ansonsten gibt sie eine Adresse der Struktur <span class="clisting">dirent</span> zurück, die Folgendes beinhaltet:</p>
<div class="listing"><pre class="prettyprint">struct dirent {
   long d_ino;      /* i-node Nr. (bei Windows/MS-DOS immer 0) */
   unsigned short d_reclen;   /* (bei Windows/MS-DOS immer 0)  */
   unsigned short d_namlen;   /* Länge des Namens in d_name    */
   char *d_name;       /* Dateiname mit abschließendem '\0'    */
};</pre></div>
<p>In der Praxis kann die Funktion <span class="clisting">readdir()</span> so verwendet werden:</p>
<div class="listing"><pre class="prettyprint">DIR *dir;
struct dirent *dirzeiger;
/* Verzeichnis öffnen */
if((dir=opendir(dirname)) != NULL)
/* komplettes Verzeichnis Eintrag für Eintrag auslesen */
while((dirzeiger=readdir(dir)) != NULL)
    printf("%s\n",(*dirzeiger).d_name);</pre></div>
<p>Es wird zuerst mit <span class="clisting">opendir()</span> ein Verzeichnis geöffnet und danach mit <span class="clisting">readdir()</span> der komplette Inhalt des Verzeichnisses ausgegeben.</p>
<h4 class="t4"><span class="cfett">»rewinddir()« &#8211; Verzeichnis-Zeiger auf den Anfang zurücksetzen</span></h4>
<p>Mit der Funktion <span class="clisting">rewinddir()</span> wird der Lesezeiger wieder an den Anfang der Namensliste des Verzeichnisses zurückgesetzt. Die Syntax von <span class="clisting">rewinddir()</span> lautet:</p>
<div class="listing"><pre class="prettyprint">#include &lt;sys/types.h&gt;
#include &lt;dirent.h&gt;

void rewinddir(DIR *dir);</pre></div>
<h4 class="t4"><span class="cfett">»closedir()« &#8211; Verzeichnis schließen</span></h4>
<p>Am Ende wird dann mit der Funktion <span class="clisting">closedir()</span> das Verzeichnis geschlossen, das mit <span class="clisting">opendir()</span> geöffnet wurde. Bei Erfolg gibt diese Funktion 0 und bei Fehler &#8211;1 zurück. Die Syntax lautet:</p>
<div class="listing"><pre class="prettyprint">#include &lt;sys/types.h&gt;
#inlcude &lt;dirent.h&gt;

int closedir(DIR *dir);</pre></div>
<p>Hier folgt ein ausführbares Beispiel, das alle Funktionen in Aktion demonstriert:</p>
<div class="listing"><pre class="prettyprint">/* read_dir.c */
#include &lt;sys/types.h&gt;
#include &lt;dirent.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(int argc, char *argv[]) {
   DIR *dir;
   struct dirent *dirzeiger;

   if(argc != 2) {
      fprintf(stderr,"Benutzung : %s Directory\n", argv[0]);
      return EXIT_FAILURE;
   }
   /* das Verzeichnis öffnen */
   if((dir=opendir(argv[1])) == NULL) {
      fprintf(stderr,"Fehler bei opendir ...\n");
      return EXIT_FAILURE;
   }
   /* das komplette Verzeichnis auslesen */
   while((dirzeiger=readdir(dir)) != NULL)
      printf("%s\n",(*dirzeiger).d_name);
   /* Lesezeiger wieder schließen */
   if(closedir(dir) == -1)
      printf("Fehler beim Schließen von %s\n", argv[1]);
   return EXIT_SUCCESS;
}</pre></div>
<p>Mit diesem Programm wird das vollständige Verzeichnis ausgegeben, das Sie über die Kommandozeile angeben.</p>
<h4 class="t4"><span class="cfett">»telldir()« und »seekdir()« &#8211; Positionierung im Verzeichnis</span></h4>
<p>Auf einigen Systemen gibt es zusätzlich noch die Funktion <span class="clisting">telldir()</span>:</p>
<div class="listing"><pre class="prettyprint">#include &lt;sys/types.h&gt;
#include &lt;sys/dirent.h&gt;

off_t telldir(DIR *dirptr)</pre></div>
<p>Diese Funktion liefert zu einem mit <span class="clisting">readdir()</span> gelesenen Verzeichnis die Position des Lesezeigers zurück.</p>
<p>Mit der Funktion <span class="clisting">seekdir()</span> lässt sich die Position des <span class="clisting">DIR</span>-Zeigers verschieben:</p>
<div class="listing"><pre class="prettyprint">#include &lt;sys/types.h&gt;
#include &lt;sys/dirent.h&gt;

void seekdir(DIR *dirptr, off_t pos)</pre></div>
<p>Damit wird der mit <span class="clisting">opendir()</span> geöffnete Lesezeiger (<span class="clisting">dirptr</span>) auf die Position <span class="clisting">pos</span> gesetzt, die Sie zuvor mit der Funktion <span class="clisting">telldir()</span> ermittelt haben. Hierzu noch ein kurzer Ausschnitt dieser beiden Funktionen:</p>
<div class="listing"><pre class="prettyprint">off_t pos;
/* aktuelle Position im Verzeichnis ermitteln */
pos = telldir(dir_ptr);
/* viele Funktionen */
...
/* zur aktuellen Position zurückspringen */
seekdir(dir_ptr, pos);</pre></div>
<h4 class="t4"><span class="cfett">Probleme mit der Portabilität</span></h4>
<p>Ein Problem bei Funktionen wie <span class="clisting">opendir()</span>, <span class="clisting">readdir()</span> oder <span class="clisting">closedir()</span> ist, dass sie POSIX-konform und aus diesem Grund häufig nicht bei Compilern für MS-Windows implementiert sind. Unter UNIX-artigen Systemen müssen Sie sich wegen dieser Funktionen keine Gedanken machen. Um also unter MS-Windows, genauer gesagt unter WIN32, ein vollständiges Verzeichnis auszugeben, müssen Sie auf die Windows-Systemprogrammierung zurückgreifen. Die Windows-Programmierung hier genauer zu erläutern, würde den Rahmen des Kapitels oder gar des Buchs sprengen. Aber zu Anschauungszwecken folgt hier eine portablere Lösung, mit der Sie ein vollständiges Verzeichnis ausgeben lassen können:</p>
<div class="listing"><pre class="prettyprint">/* portabel_readdir.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#ifdef __unix__
#include &lt;dirent.h&gt;
#include &lt;sys/types.h&gt;


/* UNIX-Funktion zum Ausgeben des kompletten Verzeichnisses */
void list_dir(const char *path) {
   DIR *dirptr;
   struct dirent *dir;

   if ((dirptr=opendir(path)) == NULL)
      return;
   while((dir=readdir(dirptr)) != NULL)
      printf("%s\n",dir-&gt;d_name);
   closedir(dirptr);
}

#elif __WIN32__ || _MSC_VER
#include &lt;windows.h&gt;
/* Win32-Funktion zum Ausgeben des kompletten Verzeichnisses */
void list_dir(const char *path) {
   WIN32_FIND_DATA dir;
   HANDLE fhandle;
   char directory[256];

   /* unsicher, besser wäre - falls vorhanden - snprintf() */
   sprintf(directory,"%s\\*.*",path);
   /* Handle auf das Verzeichnis directory */
   if ((fhandle=FindFirstFile(directory,&amp;dir)) !=
                             INVALID_HANDLE_VALUE) {
      do {  /* Verzeichnis auslesen */
         printf("%s\n", dir.cFileName);
      } while(FindNextFile(fhandle,&amp;dir));
   }
   FindClose(fhandle);
}
#endif

int main(int argc,char *argv[]) {
   if (argc &lt; 2)
      list_dir(".");
   else
      list_dir(argv[1]);
   return EXIT_SUCCESS;
}</pre></div>
<p>Bei der Win32-Funktion wurden hier die MS-DOS-ähnlichen Funktionen <span class="clisting">findfirst()</span> und <span class="clisting">findnext()</span> verwendet. Die Funktion <span class="clisting">FindFirstFile()</span> gibt ein Filehandle auf die erste Datei im Verzeichnis zurück, während <span class="clisting">FindNextFile()</span> das Handle immer um eine Position weitersetzt, bis keine Dateien mehr im Verzeichnis zum Lesen vorhanden sind. <span class="clisting">FindClose()</span> schließt das Filehandle wieder.</p><br><hr><a name="kommentar"></a><h3>Ihr Kommentar</h3>
                       Wie hat Ihnen das &lt;openbook&gt; gefallen? Wir freuen uns immer über Ihre freundlichen und kritischen Rückmeldungen.
                       <form action="http://www.galileo-press.de/feedback/openbook" method="post" style="text-align: center; margin-top: 10px;"><input type="hidden" name="openbookurl" value="http://openbook.galileocomputing.de/c_von_a_bis_z/017_c_dateien_verzeichnisse_003.htm"><input type="hidden" name="buchtitel" value="C von A bis Z"><input type="hidden" name="Kapitel" value="17.3 Verzeichnisfunktionen"><table border="0">
<tr>
<td><label for="name">Name</label><br></td>
<td><input type="text" name="name" id="name" size="40"><br></td>
</tr>
<tr>
<td><label for="email">E-Mail</label><br></td>
<td><input type="text" name="email" id="email" size="40"><br></td>
</tr>
<tr>
<td valign="top"><label for="comment">Ihr Kommentar</label><br></td>
<td><textarea name="comment" id="comment" rows="10" cols="40"></textarea><br></td>
</tr>
<tr>
<td>
</td>
<td><input type="submit" value="Kommentar absenden"></td>
</tr>
</table>
</form>
</div></td>
</tr>
</table></td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center"><table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a href="017_c_dateien_verzeichnisse_002.htm" class="navnav"> &lt;&lt;   zurück</a></td>
<td width="49%"><div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div></td>
<td align="right" width="25%"><div align="right"><a href="018_c_stdarg_h_001.htm" class="navnav">vor   &gt;&gt; </a></div></td>
</tr>
</table></td>
</tr>
</table>
</div></td>
<td width="10" valign="top">&nbsp;&nbsp;</td>
<td width="160" valign="top">
<table border="0" cellpadding="0" cellspacing="0" width="160">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2">
&nbsp;<a href="http://www.galileocomputing.de/?GPP=opc3" class="nav">
<strong>Zum Katalog</strong></a>
</td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2">
<img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><a href="http://www.galileocomputing.de/2132?GPP=opc3">
<img src="common/9783836214117_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C von A bis Z" title="Zum Katalog: C von A bis Z">
<br /><br /><strong>&nbsp;C von A bis Z</strong><br /><img src="common/pfeil_rechts5.gif" border="0" alt="">Jetzt&nbsp;bestellen</a><br /><br />
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2"><a href="#kommentar" class="nav"><strong>&nbsp;Ihre Meinung?</strong></a>
</td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br /><a href="#kommentar"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
<br /><br /></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/?GPP=opc3" class="nav"><strong>Buchtipps</strong></a></td>
</tr>
<tr> 
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2083?GPP=opc3">
<img src="common/9783836213851_s.gif" width="112" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Einstieg in C++" title="Zum Katalog: Einstieg in C++"><br /><br /><br /><br /><br /><br /><br />&nbsp;Einstieg in C++</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2156?GPP=opc3">
<img src="common/9783836214292_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C++ von A bis Z" title="Zum Katalog: C++ von A bis Z"><br /><br /><br /><br /><br /><br /><br />&nbsp;C++ von A bis Z</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1299?GPP=opc3">
<img src="common/9783898428392_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C/C++" title="Zum Katalog: C/C++"><br /><br /><br /><br /><br /><br /><br />&nbsp;C/C++</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1712?GPP=opc3">
<img src="common/9783836211574_s.gif" width="113" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Shell-Programmierung" title="Zum Katalog: Shell-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Shell-Programmierung</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2049?GPP=opc3">
<img src="common/9783836213660_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Linux-UNIX-Programmierung" title="Zum Katalog: Linux-UNIX-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Linux-UNIX-<br />&nbsp;Programmierung</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2138?GPP=opc3">
<img src="common/9783836214209_s.gif" width="107" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: IT-Handbuch für Fachinformatiker" title="Zum Katalog: IT-Handbuch für Fachinformatiker"><br /><br /><br /><br /><br /><br /><br />&nbsp;IT-Handbuch für <br />&nbsp;Fachinformatiker</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/2165?GPP=opc3">
<img src="common/9783836214391_s.gif" width="119" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Ubuntu GNU/Linux" title="Zum Katalog: Ubuntu GNU/Linux"><br /><br /><br /><br /><br /><br /><br />&nbsp;Ubuntu GNU/Linux</a><br /><br /></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
<a href="http://www.galileocomputing.de/1628?GPP=opc3">
<img src="common/9783836211161_s.gif" width="117" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Coding for Fun" title="Zum Katalog: Coding for Fun"><br /><br /><br /><br /><br /><br /><br /><br />&nbsp;Coding for Fun&nbsp;</a><br /><br /></td>
</tr>
</table></td>
</tr>
<tr>
<td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
</tr>
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="tbl2" height="20" colspan="2"><strong>&nbsp;Shopping</strong></td>
</tr>
<tr>
<td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
<td valign="top">
<table cellspacing="3">
<tr>
<td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br /><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opc3"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br /><br /></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table><br><br><hr width="70%" align="center">
<div align="center">
<p class="standard"><strong>Copyright © Galileo Press 2009</strong><br>
        Für Ihren privaten Gebrauch dürfen Sie die Online-Version natürlich ausdrucken.
        Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die
        gebundene Ausgabe: Das Werk einschließlich aller seiner Teile ist urheberrechtlich
        geschützt. Alle Rechte vorbehalten einschließlich der Vervielfältigung, Übersetzung,
        Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>
      Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
